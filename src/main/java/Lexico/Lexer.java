/* The following code was generated by JFlex 1.4.3 on 9/21/22 11:42 PM */

package Lexico;
import static Lexico.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/21/22 11:42 PM from the specification file
 * <tt>./src/main/java/Lexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\16\1\0\1\0\1\15\22\0\1\3\1\55\1\73"+
    "\1\72\1\0\1\60\1\57\1\75\1\61\1\62\1\20\1\50\1\3"+
    "\1\5\1\7\1\17\1\6\7\12\2\2\1\67\1\47\1\54\1\51"+
    "\1\52\1\53\1\0\4\4\1\11\1\4\21\1\1\13\2\1\1\63"+
    "\1\74\1\64\1\70\2\0\1\21\1\25\1\30\1\35\1\10\1\14"+
    "\1\41\1\32\1\34\1\1\1\27\1\36\1\37\1\33\1\24\1\45"+
    "\1\1\1\26\1\31\1\23\1\22\1\46\1\43\1\40\1\44\1\42"+
    "\1\65\1\56\1\66\1\71\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\3\1\6"+
    "\2\2\1\7\1\10\15\2\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\3\1\1\0\1\35\1\36\1\37\1\40\1\1\5\2"+
    "\1\41\1\4\1\42\1\43\13\2\1\44\2\2\1\44"+
    "\3\2\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\3\0"+
    "\1\63\1\0\1\1\4\2\2\41\1\4\1\0\1\4"+
    "\24\2\1\64\1\65\2\66\1\67\1\1\1\70\1\0"+
    "\2\2\2\4\1\0\1\41\15\2\1\0\1\71\1\2"+
    "\1\41\7\2\1\0\16\2\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\76"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\76\0\u05d0\0\u060e\0\u064c\0\76\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\76\0\76\0\76\0\76\0\76"+
    "\0\76\0\76\0\u07c0\0\76\0\76\0\u07fe\0\u083c\0\u087a"+
    "\0\u08b8\0\76\0\76\0\76\0\u08f6\0\u0934\0\u0972\0\u09b0"+
    "\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\76\0\76\0\u0b24"+
    "\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\174\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6"+
    "\0\u0f04\0\76\0\76\0\76\0\76\0\u0f42\0\76\0\u0f80"+
    "\0\76\0\76\0\76\0\76\0\76\0\76\0\76\0\u0fbe"+
    "\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae"+
    "\0\u11ec\0\u122a\0\76\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360"+
    "\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550"+
    "\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740"+
    "\0\u177e\0\u17bc\0\76\0\76\0\76\0\u0fbe\0\76\0\u17fa"+
    "\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u1268"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c"+
    "\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c"+
    "\0\u1930\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e"+
    "\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\1\3\1\4\1\3\1\12\2\5\1\13\1\14"+
    "\1\15\1\16\1\17\1\3\1\20\1\21\1\3\1\22"+
    "\1\23\2\3\1\24\1\25\1\26\2\3\1\27\1\3"+
    "\1\30\2\3\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\2\1\57\77\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\0\5\3\4\0\26\3\30\0\1\60\1\4\1\0"+
    "\1\60\1\0\1\4\1\61\2\60\1\4\2\60\4\0"+
    "\26\60\32\0\1\5\11\0\2\5\64\0\1\62\1\7"+
    "\42\0\1\63\1\64\24\0\1\60\2\0\1\60\1\0"+
    "\1\65\1\0\2\60\1\65\1\66\1\60\4\0\17\60"+
    "\1\66\6\60\30\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\0\5\3\4\0\12\3\1\67\2\3\1\70\1\3"+
    "\1\71\6\3\30\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\0\5\3\4\0\3\3\1\72\11\3\1\73\10\3"+
    "\46\0\1\74\1\75\30\0\1\76\75\0\1\77\25\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\5\3\4\0"+
    "\1\3\1\100\24\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\4\0\12\3\1\101\13\3\30\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\5\3\4\0"+
    "\23\3\1\102\2\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\4\0\5\3\1\103\20\3\30\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\1\104\4\3"+
    "\4\0\26\3\30\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\0\5\3\4\0\1\70\2\3\1\105\5\3\1\106"+
    "\14\3\30\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\5\3\4\0\2\3\1\107\6\3\1\110\1\3\1\111"+
    "\6\3\1\112\3\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\4\3\1\113\4\0\12\3\1\114\13\3"+
    "\30\0\2\3\1\0\1\3\1\0\1\3\1\0\1\115"+
    "\4\3\4\0\3\3\1\116\22\3\30\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\5\3\4\0\3\3\1\117"+
    "\22\3\30\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\5\3\4\0\3\3\1\100\22\3\30\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\5\3\4\0\11\3\1\120"+
    "\14\3\30\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\5\3\4\0\3\3\1\121\22\3\35\0\1\7\41\0"+
    "\1\122\1\123\75\0\1\124\75\0\1\125\1\126\74\0"+
    "\1\127\2\0\1\130\72\0\1\131\75\0\1\132\4\0"+
    "\1\133\70\0\1\134\5\0\1\135\67\0\1\136\75\0"+
    "\1\137\24\0\73\140\1\0\1\141\1\140\75\142\2\0"+
    "\2\60\1\0\1\60\1\0\1\60\1\0\5\60\4\0"+
    "\26\60\31\0\1\143\3\0\1\143\3\0\1\143\64\0"+
    "\1\60\2\0\1\60\1\0\1\65\1\144\2\60\1\65"+
    "\2\60\4\0\26\60\30\0\1\60\1\145\1\0\1\145"+
    "\1\0\1\145\1\0\3\145\1\60\1\145\4\0\1\145"+
    "\3\60\1\145\2\60\1\145\4\60\1\145\11\60\30\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\5\3\4\0"+
    "\1\3\1\146\24\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\4\0\10\3\1\147\15\3\30\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\5\3\4\0"+
    "\2\3\1\150\23\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\4\0\5\3\1\113\20\3\30\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\5\3\4\0"+
    "\3\3\1\151\22\3\27\0\15\74\1\152\1\153\57\74"+
    "\16\154\1\155\1\154\1\156\55\154\1\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\5\3\4\0\2\3\1\157"+
    "\23\3\30\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\5\3\4\0\10\3\1\160\2\3\1\161\12\3\30\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\5\3\4\0"+
    "\24\3\1\162\1\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\163\4\3\4\0\26\3\30\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\0\5\3\4\0\2\3"+
    "\1\164\15\3\1\165\5\3\30\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\5\3\4\0\12\3\1\166\13\3"+
    "\30\0\2\3\1\0\1\3\1\0\1\3\1\0\5\3"+
    "\4\0\1\72\25\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\4\0\1\167\4\3\1\170\20\3"+
    "\30\0\2\3\1\0\1\3\1\0\1\3\1\0\5\3"+
    "\4\0\3\3\1\171\22\3\30\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\5\3\4\0\20\3\1\172\1\173"+
    "\4\3\30\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\5\3\4\0\13\3\1\174\12\3\30\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\5\3\4\0\2\3\1\113"+
    "\23\3\30\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\4\3\1\175\4\0\26\3\30\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\5\3\4\0\1\3\1\176\24\3"+
    "\30\0\2\3\1\0\1\3\1\0\1\3\1\0\5\3"+
    "\4\0\12\3\1\177\13\3\30\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\5\3\4\0\13\3\1\200\12\3"+
    "\30\0\2\3\1\0\1\3\1\0\1\3\1\0\5\3"+
    "\4\0\13\3\1\201\1\3\1\202\10\3\100\0\1\203"+
    "\75\0\1\204\24\0\73\140\1\205\1\141\74\140\1\206"+
    "\1\141\1\140\75\0\1\207\1\0\1\60\1\143\1\0"+
    "\1\60\1\0\1\143\1\0\2\210\1\143\2\60\4\0"+
    "\26\60\35\0\1\211\3\0\1\211\64\0\1\60\1\145"+
    "\1\0\1\145\1\0\1\145\1\212\3\145\1\60\1\145"+
    "\4\0\1\145\3\60\1\145\2\60\1\145\4\60\1\145"+
    "\11\60\30\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\5\3\4\0\16\3\1\113\7\3\30\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\113\4\3\4\0\26\3"+
    "\30\0\2\3\1\0\1\3\1\0\1\3\1\0\1\213"+
    "\4\3\4\0\26\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\4\0\1\114\1\3\1\214\23\3"+
    "\27\0\16\215\1\153\57\215\16\154\1\155\1\154\1\216"+
    "\55\154\20\155\1\217\55\155\16\154\1\155\1\220\1\216"+
    "\55\154\1\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\5\3\4\0\3\3\1\113\22\3\30\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\5\3\4\0\13\3\1\221"+
    "\12\3\30\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\5\3\4\0\3\3\1\222\22\3\30\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\223\4\3\4\0\26\3"+
    "\30\0\2\3\1\0\1\3\1\0\1\3\1\0\5\3"+
    "\4\0\1\224\25\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\4\0\1\3\1\213\24\3\30\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\5\3\4\0"+
    "\13\3\1\225\12\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\4\0\2\3\1\226\5\3\1\114"+
    "\15\3\30\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\5\3\4\0\2\3\1\227\23\3\30\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\5\3\4\0\1\3\1\230"+
    "\24\3\30\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\5\3\4\0\5\3\1\114\20\3\30\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\5\3\4\0\12\3\1\231"+
    "\13\3\30\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\232\4\3\4\0\26\3\30\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\5\3\4\0\2\3\1\233\23\3"+
    "\30\0\2\3\1\0\1\3\1\0\1\3\1\0\5\3"+
    "\4\0\1\234\25\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\4\0\4\3\1\200\21\3\30\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\5\3\4\0"+
    "\20\3\1\113\5\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\4\0\15\3\1\147\10\3\30\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\5\3\4\0"+
    "\14\3\1\113\11\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\4\0\1\235\25\3\30\0\2\60"+
    "\1\0\1\60\1\236\1\60\1\0\5\60\4\0\26\60"+
    "\1\0\1\236\26\0\1\60\2\0\1\60\1\0\1\211"+
    "\1\0\2\60\1\211\2\60\4\0\26\60\31\0\1\237"+
    "\1\0\1\237\1\0\1\237\1\0\3\237\1\0\1\237"+
    "\4\0\1\237\3\0\1\237\2\0\1\237\4\0\1\237"+
    "\41\0\2\3\1\0\1\3\1\0\1\3\1\0\5\3"+
    "\4\0\5\3\1\222\20\3\30\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\5\3\4\0\1\240\25\3\27\0"+
    "\16\215\1\0\57\215\16\154\1\155\1\241\1\216\55\154"+
    "\17\155\1\153\1\217\55\155\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\5\3\4\0\20\3\1\172\5\3"+
    "\30\0\2\3\1\0\1\3\1\0\1\3\1\0\5\3"+
    "\4\0\12\3\1\113\13\3\30\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\5\3\4\0\14\3\1\242\11\3"+
    "\30\0\2\3\1\0\1\3\1\0\1\3\1\0\5\3"+
    "\4\0\6\3\1\113\17\3\30\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\5\3\4\0\10\3\1\243\15\3"+
    "\30\0\2\3\1\0\1\3\1\0\1\3\1\0\5\3"+
    "\4\0\13\3\1\244\12\3\30\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\5\3\4\0\13\3\1\245\12\3"+
    "\30\0\2\3\1\0\1\3\1\0\1\3\1\0\5\3"+
    "\4\0\7\3\1\114\16\3\30\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\201\4\3\4\0\26\3\30\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\5\3\4\0"+
    "\3\3\1\246\22\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\4\0\7\3\1\247\16\3\30\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\5\3\4\0"+
    "\1\3\1\250\24\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\4\0\2\3\1\120\23\3\31\0"+
    "\1\251\3\0\1\251\3\0\1\251\64\0\1\60\1\237"+
    "\1\0\1\60\1\0\1\237\1\0\2\60\1\237\2\60"+
    "\4\0\26\60\30\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\0\5\3\4\0\12\3\1\252\13\3\30\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\246\4\3\4\0"+
    "\26\3\30\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\5\3\4\0\2\3\1\253\23\3\30\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\5\3\4\0\12\3\1\254"+
    "\13\3\30\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\5\3\4\0\7\3\1\113\16\3\30\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\4\3\1\113\4\0\26\3"+
    "\30\0\2\3\1\0\1\3\1\0\1\3\1\0\5\3"+
    "\4\0\11\3\1\113\14\3\30\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\5\3\4\0\15\3\1\114\10\3"+
    "\30\0\1\60\1\251\1\0\1\60\1\0\1\251\1\0"+
    "\2\60\1\251\2\60\4\0\26\60\30\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\5\3\4\0\2\3\1\255"+
    "\23\3\30\0\2\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\72\4\3\4\0\26\3\30\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\5\3\4\0\1\3\1\147\24\3"+
    "\30\0\2\3\1\0\1\3\1\0\1\3\1\0\1\256"+
    "\4\3\4\0\26\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\257\3\3\4\0\26\3\30\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\5\3\4\0"+
    "\17\3\1\260\6\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\4\0\24\3\1\261\1\3\30\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\5\3\4\0"+
    "\3\3\1\262\22\3\30\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\5\3\4\0\12\3\1\263\13\3\30\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\1\264\4\3"+
    "\4\0\26\3\30\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\0\5\3\4\0\12\3\1\265\13\3\30\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\0\5\3\4\0\2\3"+
    "\1\266\23\3\30\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\267\4\3\4\0\26\3\30\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\5\3\4\0\26\3\17\0"+
    "\1\270\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8990];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\21\1\1\11\3\1\1\11"+
    "\5\1\7\11\1\1\2\11\3\1\1\0\3\11\11\1"+
    "\2\11\22\1\4\11\1\1\1\11\1\1\7\11\3\0"+
    "\1\1\1\0\6\1\1\11\1\1\1\0\25\1\3\11"+
    "\1\1\1\11\2\1\1\0\4\1\1\0\16\1\1\0"+
    "\12\1\1\0\16\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int line;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { /* ignore */
          }
        case 59: break;
        case 13: 
          { lexeme = yytext(); line=yyline+1; return OperadorPregunta;
          }
        case 60: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 61: break;
        case 35: 
          { lexeme = yytext(); line=yyline+1; return OperadorMultAsignacion;
          }
        case 62: break;
        case 54: 
          { lexeme=yytext(); return Hilera;
          }
        case 63: break;
        case 40: 
          { lexeme = yytext(); line=yyline+1; return OperadorMayorIgual;
          }
        case 64: break;
        case 24: 
          { lexeme = yytext(); line=yyline+1; return OperadorCorcheteDer;
          }
        case 65: break;
        case 18: 
          { lexeme = yytext(); line=yyline+1; return OperadorModulo;
          }
        case 66: break;
        case 52: 
          { lexeme = yytext(); line=yyline+1; return OperadorDesplDerAsig;
          }
        case 67: break;
        case 7: 
          { lexeme = yytext(); line=yyline+1; return OperadorDivision;
          }
        case 68: break;
        case 23: 
          { lexeme = yytext(); line=yyline+1; return OperadorCorcheteIz;
          }
        case 69: break;
        case 38: 
          { lexeme = yytext(); line=yyline+1; return OperadorSumaAsignacion;
          }
        case 70: break;
        case 10: 
          { lexeme = yytext(); line=yyline+1; return OperadorSuma;
          }
        case 71: break;
        case 20: 
          { lexeme = yytext(); line=yyline+1; return OperadorParentesisDer;
          }
        case 72: break;
        case 42: 
          { lexeme = yytext(); line=yyline+1; return OperadorMenorIgual;
          }
        case 73: break;
        case 9: 
          { lexeme = yytext(); line=yyline+1; return OperadorPuntoComa;
          }
        case 74: break;
        case 58: 
          { lexeme=yytext(); return FlotanteExponente;
          }
        case 75: break;
        case 48: 
          { lexeme = yytext(); line=yyline+1; return OperadorY;
          }
        case 76: break;
        case 8: 
          { lexeme = yytext(); line=yyline+1; return OperadorMultiplicacion;
          }
        case 77: break;
        case 15: 
          { lexeme = yytext(); line=yyline+1; return OperadorNegacion;
          }
        case 78: break;
        case 31: 
          { lexeme = yytext(); line=yyline+1; return OperadorMiembroPuntero;
          }
        case 79: break;
        case 19: 
          { lexeme = yytext(); line=yyline+1; return OperadorParentesisIz;
          }
        case 80: break;
        case 6: 
          { lexeme = yytext(); line=yyline+1; return OperadorPunto;
          }
        case 81: break;
        case 57: 
          { lexeme=yytext(); return HexadecimalFlotante;
          }
        case 82: break;
        case 5: 
          { lexeme = yytext(); line=yyline+1; return OperadorResta;
          }
        case 83: break;
        case 12: 
          { lexeme = yytext(); line=yyline+1; return OperadorMayor;
          }
        case 84: break;
        case 51: 
          { lexeme=yytext(); return Flotante;
          }
        case 85: break;
        case 46: 
          { lexeme = yytext(); line=yyline+1; return OperadorO;
          }
        case 86: break;
        case 43: 
          { lexeme = yytext(); line=yyline+1; return OperadorDesplIz;
          }
        case 87: break;
        case 47: 
          { lexeme = yytext(); line=yyline+1; return OperadorANDAsignacion;
          }
        case 88: break;
        case 26: 
          { lexeme = yytext(); line=yyline+1; return OperadorXOR;
          }
        case 89: break;
        case 50: 
          { lexeme = yytext(); line=yyline+1; return OperadorXORAsignacion;
          }
        case 90: break;
        case 34: 
          { lexeme = yytext(); line=yyline+1; return OperadorDivAsignacion;
          }
        case 91: break;
        case 27: 
          { lexeme = yytext(); line=yyline+1; return OperadorComplementoAUno;
          }
        case 92: break;
        case 56: 
          { lexeme=yytext(); return OctalFlotante;
          }
        case 93: break;
        case 16: 
          { lexeme = yytext(); line=yyline+1; return OperadorOR;
          }
        case 94: break;
        case 11: 
          { lexeme = yytext(); line=yyline+1; return OperadorIgual;
          }
        case 95: break;
        case 53: 
          { lexeme = yytext(); line=yyline+1; return OperadorDesplIzAsig;
          }
        case 96: break;
        case 44: 
          { lexeme = yytext(); line=yyline+1; return OperadorDiferente;
          }
        case 97: break;
        case 30: 
          { lexeme = yytext(); line=yyline+1; return OperadorRestaAsignacion;
          }
        case 98: break;
        case 32: 
          { lexeme=yytext(); return Octal;
          }
        case 99: break;
        case 45: 
          { lexeme = yytext(); line=yyline+1; return OperadorORAsignacion;
          }
        case 100: break;
        case 22: 
          { lexeme = yytext(); line=yyline+1; return OperadorParCuadradoDer;
          }
        case 101: break;
        case 25: 
          { lexeme = yytext(); line=yyline+1; return OperadorDoblePunto;
          }
        case 102: break;
        case 39: 
          { lexeme = yytext(); line=yyline+1; return OperadorIgualIgual;
          }
        case 103: break;
        case 14: 
          { lexeme = yytext(); line=yyline+1; return OperadorMenor;
          }
        case 104: break;
        case 49: 
          { lexeme = yytext(); line=yyline+1; return OperadorModuloAsignacion;
          }
        case 105: break;
        case 36: 
          { lexeme=yytext(); line=yyline+1; return Reservadas;
          }
        case 106: break;
        case 29: 
          { lexeme = yytext(); line=yyline+1; return OperadorDecremento;
          }
        case 107: break;
        case 21: 
          { lexeme = yytext(); line=yyline+1; return OperadorParCuadradoIz;
          }
        case 108: break;
        case 28: 
          { lexeme = yytext(); line=yyline+1; return OperadorGato;
          }
        case 109: break;
        case 3: 
          { lexeme=yytext(); return Entero;
          }
        case 110: break;
        case 55: 
          { lexeme=yytext(); return Caracter;
          }
        case 111: break;
        case 37: 
          { lexeme = yytext(); line=yyline+1; return OperadorIncremento;
          }
        case 112: break;
        case 4: 
          { /*Ignore*/
          }
        case 113: break;
        case 1: 
          { lexeme = yytext(); return ERROR;
          }
        case 114: break;
        case 17: 
          { lexeme = yytext(); line=yyline+1; return OperadorDireccion;
          }
        case 115: break;
        case 41: 
          { lexeme = yytext(); line=yyline+1; return OperadorDesplDer;
          }
        case 116: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
