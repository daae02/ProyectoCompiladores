/* The following code was generated by JFlex 1.4.3 on 10/24/22 6:38 PM */

package Lexico;
import Sintactico.sym;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/24/22 6:38 PM from the specification file
 * <tt>./src/main/java/Lexico/LexerSintactico.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 11, 13,  0,  0, 12,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    11, 46, 61, 60,  0, 51, 48, 63, 52, 53, 15, 42, 41,  5,  7, 14, 
     6,  4,  4,  4,  4,  4,  4,  4,  2,  2, 58, 40, 45, 43, 44, 50, 
     0,  3,  3,  3,  3,  8,  3,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
    10,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1, 54, 62, 55, 49,  1, 
     0, 16, 20, 24, 29, 22, 30, 34, 26, 28,  1, 23, 31, 32, 27, 19, 
    38,  1, 21, 25, 18, 17, 39, 36, 33, 37, 35, 56, 47, 57, 59,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\17\2\1\11\1\12\1\13\1\14\4\15"+
    "\1\16\1\15\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\2\1\1\3\1\32"+
    "\1\0\1\33\1\0\1\34\1\35\1\0\1\36\2\0"+
    "\1\37\1\6\1\40\1\41\20\2\1\42\1\43\7\2"+
    "\1\44\1\45\1\46\1\15\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\0\1\55\3\0\1\56\3\0\1\57"+
    "\1\0\2\37\1\6\1\0\1\6\23\2\1\60\2\2"+
    "\1\61\6\2\1\62\1\63\1\55\1\64\1\65\1\0"+
    "\2\6\1\0\1\37\1\66\6\2\1\67\1\70\1\2"+
    "\1\71\2\2\1\72\11\2\1\73\1\74\1\2\1\75"+
    "\1\2\1\0\1\37\1\2\1\76\1\2\1\77\4\2"+
    "\1\100\2\2\1\101\5\2\1\102\1\103\1\2\1\104"+
    "\1\0\2\2\1\105\1\2\1\106\1\2\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\3\2\1\115\2\2\1\116"+
    "\1\2\1\117\1\120\1\121\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\100\0\100\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740"+
    "\0\u0780\0\u07c0\0\u0800\0\100\0\u0840\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\u0880\0\u08c0"+
    "\0\u0900\0\u0940\0\u0980\0\100\0\u0180\0\100\0\100\0\u09c0"+
    "\0\u0a00\0\u0940\0\u0a40\0\u0a80\0\u0ac0\0\100\0\100\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00"+
    "\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\200"+
    "\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0"+
    "\0\100\0\100\0\100\0\100\0\u1100\0\u1140\0\100\0\100"+
    "\0\100\0\100\0\u0880\0\100\0\u1180\0\u11c0\0\u1200\0\u1240"+
    "\0\u1240\0\u1280\0\u12c0\0\u0a40\0\u1300\0\u1340\0\100\0\u1380"+
    "\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580"+
    "\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780"+
    "\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\200\0\u1900\0\u1940"+
    "\0\200\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\100"+
    "\0\100\0\u0880\0\100\0\u12c0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0"+
    "\0\u1380\0\200\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40"+
    "\0\200\0\200\0\u1d80\0\200\0\u1dc0\0\u1e00\0\200\0\u1e40"+
    "\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040"+
    "\0\200\0\200\0\u2080\0\200\0\u20c0\0\u2100\0\u1b40\0\u2140"+
    "\0\200\0\u2180\0\200\0\u21c0\0\u2200\0\u2240\0\u2280\0\200"+
    "\0\u22c0\0\u2300\0\200\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440"+
    "\0\200\0\200\0\u2480\0\u24c0\0\u24c0\0\u2500\0\u2540\0\200"+
    "\0\u2580\0\200\0\u25c0\0\200\0\200\0\200\0\200\0\200"+
    "\0\200\0\u2600\0\u2640\0\u2680\0\200\0\u26c0\0\u2700\0\200"+
    "\0\u2740\0\200\0\200\0\200\0\200";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\4\1\5\1\6\1\7"+
    "\3\3\3\10\1\11\1\12\1\13\1\14\1\15\1\3"+
    "\1\16\1\17\1\20\1\3\1\21\1\22\2\3\1\23"+
    "\1\24\1\25\1\26\2\3\1\27\1\3\1\30\2\3"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\2"+
    "\1\60\101\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\30\3\32\0\1\4\1\0\1\4\1\0\1\61\1\62"+
    "\1\63\15\0\1\63\53\0\1\4\1\0\1\4\1\64"+
    "\1\6\1\65\43\0\1\66\1\67\25\0\1\70\1\0"+
    "\1\71\1\0\1\71\1\72\1\0\1\73\27\0\1\73"+
    "\40\0\1\62\1\0\1\62\1\0\1\62\104\0\3\10"+
    "\100\0\1\74\1\75\33\0\1\76\77\0\1\77\25\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\1\3\1\100"+
    "\26\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\13\3\1\101\14\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\25\3\1\102\2\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\5\3\1\103\22\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\6\3\1\104"+
    "\21\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\13\3\1\105\3\3\1\106\1\3\1\107\6\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\1\110\2\3"+
    "\1\111\6\3\1\112\15\3\31\0\4\3\1\0\1\3"+
    "\1\0\3\3\5\0\2\3\1\113\7\3\1\114\1\3"+
    "\1\115\7\3\1\116\3\3\31\0\4\3\1\0\1\3"+
    "\1\0\3\3\5\0\13\3\1\117\2\3\1\120\11\3"+
    "\31\0\4\3\1\0\1\3\1\0\3\3\5\0\3\3"+
    "\1\121\2\3\1\122\21\3\31\0\4\3\1\0\1\3"+
    "\1\0\3\3\5\0\3\3\1\123\13\3\1\124\10\3"+
    "\31\0\4\3\1\0\1\3\1\0\3\3\5\0\3\3"+
    "\1\125\24\3\31\0\4\3\1\0\1\3\1\0\3\3"+
    "\5\0\3\3\1\126\24\3\31\0\4\3\1\0\1\3"+
    "\1\0\3\3\5\0\12\3\1\127\15\3\31\0\4\3"+
    "\1\0\1\3\1\0\3\3\5\0\3\3\1\130\24\3"+
    "\32\0\1\4\1\0\1\4\1\0\1\6\1\65\42\0"+
    "\1\131\1\132\77\0\1\133\77\0\1\134\1\135\76\0"+
    "\1\134\1\0\1\136\75\0\1\134\77\0\1\137\3\0"+
    "\1\134\73\0\1\140\4\0\1\134\72\0\1\141\77\0"+
    "\1\142\24\0\75\143\1\144\1\145\1\143\76\146\1\147"+
    "\3\0\1\61\1\0\1\61\1\0\1\61\1\62\72\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\1\63\15\0"+
    "\1\63\53\0\1\150\1\0\1\150\1\151\1\150\43\0"+
    "\1\151\27\0\1\70\1\0\1\70\1\0\1\70\1\152"+
    "\72\0\1\70\1\0\1\71\1\0\1\71\1\153\72\0"+
    "\3\154\1\0\1\154\1\155\1\154\7\0\1\154\3\0"+
    "\1\154\1\0\1\154\1\0\1\154\4\0\2\154\41\0"+
    "\14\74\1\156\1\157\62\74\15\160\1\161\1\160\1\162"+
    "\60\160\1\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\2\3\1\163\25\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\11\3\1\164\2\3\1\165\13\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\26\3\1\166"+
    "\1\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\6\3\1\167\21\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\2\3\1\170\17\3\1\171\5\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\1\3\1\172"+
    "\26\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\11\3\1\173\16\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\2\3\1\174\25\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\11\3\1\175\16\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\13\3\1\176"+
    "\14\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\1\177\27\3\31\0\4\3\1\0\1\3\1\0\3\3"+
    "\5\0\1\200\4\3\1\201\22\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\3\3\1\202\24\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\22\3\1\203"+
    "\1\204\4\3\31\0\4\3\1\0\1\3\1\0\3\3"+
    "\5\0\14\3\1\205\13\3\31\0\4\3\1\0\1\3"+
    "\1\0\3\3\5\0\2\3\1\206\25\3\31\0\4\3"+
    "\1\0\1\3\1\0\3\3\5\0\1\3\1\207\26\3"+
    "\31\0\4\3\1\0\1\3\1\0\3\3\5\0\16\3"+
    "\1\210\11\3\31\0\4\3\1\0\1\3\1\0\3\3"+
    "\5\0\5\3\1\211\22\3\31\0\4\3\1\0\1\3"+
    "\1\0\3\3\5\0\3\3\1\212\24\3\31\0\4\3"+
    "\1\0\1\3\1\0\3\3\5\0\13\3\1\213\14\3"+
    "\31\0\4\3\1\0\1\3\1\0\3\3\5\0\2\3"+
    "\1\214\25\3\31\0\4\3\1\0\1\3\1\0\3\3"+
    "\5\0\14\3\1\215\13\3\31\0\4\3\1\0\1\3"+
    "\1\0\3\3\5\0\14\3\1\216\2\3\1\217\10\3"+
    "\103\0\1\220\77\0\1\221\24\0\75\143\1\222\1\145"+
    "\1\143\77\0\1\223\77\147\1\223\2\0\1\150\1\0"+
    "\1\150\1\0\1\150\73\0\1\152\1\0\1\152\1\0"+
    "\1\152\1\0\1\63\15\0\1\63\53\0\1\152\1\0"+
    "\1\224\1\0\1\224\1\0\1\63\15\0\1\63\53\0"+
    "\3\225\1\0\1\225\1\0\1\225\7\0\1\225\3\0"+
    "\1\225\1\0\1\225\1\0\1\225\4\0\2\225\41\0"+
    "\15\226\1\157\62\226\15\160\1\161\1\160\1\227\60\160"+
    "\17\161\1\230\60\161\15\160\1\161\1\231\1\227\60\160"+
    "\1\0\4\3\1\0\1\3\1\0\3\3\5\0\3\3"+
    "\1\232\24\3\31\0\4\3\1\0\1\3\1\0\3\3"+
    "\5\0\14\3\1\233\13\3\31\0\4\3\1\0\1\3"+
    "\1\0\3\3\5\0\3\3\1\234\24\3\31\0\4\3"+
    "\1\0\1\3\1\0\3\3\5\0\6\3\1\235\21\3"+
    "\31\0\4\3\1\0\1\3\1\0\3\3\5\0\1\236"+
    "\27\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\1\3\1\237\26\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\14\3\1\240\13\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\20\3\1\241\7\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\6\3\1\242"+
    "\21\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\6\3\1\243\21\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\6\3\1\244\21\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\2\3\1\245\6\3\1\246"+
    "\16\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\5\3\1\247\22\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\2\3\1\250\25\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\1\3\1\251\26\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\5\3\1\252"+
    "\22\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\13\3\1\253\14\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\6\3\1\254\21\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\2\3\1\255\25\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\4\3\1\256"+
    "\23\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\1\257\27\3\31\0\4\3\1\0\1\3\1\0\3\3"+
    "\5\0\1\260\27\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\22\3\1\261\5\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\3\3\1\262\24\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\17\3\1\263"+
    "\10\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\15\3\1\264\12\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\1\265\27\3\32\0\3\225\1\0\1\225"+
    "\1\0\1\225\1\0\1\266\5\0\1\225\3\0\1\225"+
    "\1\0\1\225\1\0\1\225\4\0\2\225\7\0\1\266"+
    "\31\0\15\226\1\0\62\226\15\160\1\161\1\267\1\227"+
    "\60\160\16\161\1\157\1\230\60\161\1\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\22\3\1\270\5\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\13\3\1\271"+
    "\14\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\15\3\1\272\12\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\7\3\1\273\20\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\5\3\1\274\22\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\11\3\1\275"+
    "\16\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\5\3\1\276\22\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\14\3\1\277\13\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\2\3\1\300\25\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\14\3\1\301"+
    "\13\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\10\3\1\302\17\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\2\3\1\303\25\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\6\3\1\304\21\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\3\3\1\305"+
    "\24\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\10\3\1\306\17\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\17\3\1\307\10\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\1\3\1\310\26\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\2\3\1\311"+
    "\25\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\6\3\1\312\21\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\2\3\1\313\25\3\32\0\1\314\1\0"+
    "\1\314\1\315\1\314\43\0\1\315\26\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\13\3\1\316\14\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\6\3\1\317"+
    "\21\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\13\3\1\320\14\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\2\3\1\321\25\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\13\3\1\322\14\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\13\3\1\323"+
    "\14\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\10\3\1\324\17\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\2\3\1\325\25\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\15\3\1\326\12\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\16\3\1\327"+
    "\11\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\12\3\1\330\15\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\6\3\1\331\21\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\17\3\1\332\10\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\14\3\1\333"+
    "\13\3\32\0\1\314\1\0\1\314\1\0\1\314\72\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\6\3\1\334"+
    "\21\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\16\3\1\335\11\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\6\3\1\336\21\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\1\3\1\337\26\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\2\3\1\340"+
    "\25\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\17\3\1\341\10\3\31\0\4\3\1\0\1\3\1\0"+
    "\3\3\5\0\15\3\1\342\12\3\31\0\4\3\1\0"+
    "\1\3\1\0\3\3\5\0\5\3\1\343\22\3\31\0"+
    "\4\3\1\0\1\3\1\0\3\3\5\0\6\3\1\344"+
    "\21\3\31\0\4\3\1\0\1\3\1\0\3\3\5\0"+
    "\6\3\1\345\21\3\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10112];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\2\11\10\1\1\11\1\1\11\11"+
    "\4\1\1\0\1\11\1\0\2\11\1\0\1\1\2\0"+
    "\2\1\2\11\31\1\4\11\2\1\4\11\1\0\1\11"+
    "\3\0\1\1\3\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\36\1\2\11\1\1\1\11\1\1\1\0\2\1"+
    "\1\0\35\1\1\0\26\1\1\0\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { return new Symbol(sym.OperadorDecremento, yyline, yychar, yytext());
          }
        case 83: break;
        case 33: 
          { return new Symbol(sym.OperadorMultAsignacion, yyline, yychar, yytext());
          }
        case 84: break;
        case 81: 
          { return new Symbol(sym.Continue, yyline, yychar, yytext());
          }
        case 85: break;
        case 55: 
          { return new Symbol(sym.Enum, yyline, yychar, yytext());
          }
        case 86: break;
        case 23: 
          { return new Symbol(sym.OperadorDoblePunto, yyline, yychar, yytext());
          }
        case 87: break;
        case 47: 
          { return new Symbol(sym.Hexadecimal, yyline, yychar, yytext());
          }
        case 88: break;
        case 70: 
          { return new Symbol(sym.Extern, yyline, yychar, yytext());
          }
        case 89: break;
        case 54: 
          { return new Symbol(sym.Auto, yyline, yychar, yytext());
          }
        case 90: break;
        case 44: 
          { return new Symbol(sym.OperadorModuloAsignacion, yyline, yychar, yytext());
          }
        case 91: break;
        case 79: 
          { return new Symbol(sym.Unsigned, yyline, yychar, yytext());
          }
        case 92: break;
        case 43: 
          { return new Symbol(sym.OperadorXORAsignacion, yyline, yychar, yytext());
          }
        case 93: break;
        case 14: 
          { return new Symbol(sym.OperadorDireccion, yyline, yychar, yytext());
          }
        case 94: break;
        case 22: 
          { return new Symbol(sym.OperadorCorcheteDer, yyline, yychar, yytext());
          }
        case 95: break;
        case 57: 
          { return new Symbol(sym.Case, yyline, yychar, yytext());
          }
        case 96: break;
        case 65: 
          { return new Symbol(sym.Short, yyline, yychar, yytext());
          }
        case 97: break;
        case 2: 
          { return new Symbol(sym.Identificador, yyline, yychar, yytext());
          }
        case 98: break;
        case 3: 
          { return new Symbol(sym.Entero, yyline, yychar, yytext());
          }
        case 99: break;
        case 6: 
          { /*Ignore*/
          }
        case 100: break;
        case 56: 
          { return new Symbol(sym.Else, yyline, yychar, yytext());
          }
        case 101: break;
        case 48: 
          { return new Symbol(sym.Int, yyline, yychar, yytext());
          }
        case 102: break;
        case 45: 
          { return new Symbol(sym.Hilera, yyline, yychar, yytext());
          }
        case 103: break;
        case 12: 
          { return new Symbol(sym.OperadorIgual, yyline, yychar, yytext());
          }
        case 104: break;
        case 10: 
          { return new Symbol(sym.OperadorComa, yyline, yychar, yytext());
          }
        case 105: break;
        case 72: 
          { return new Symbol(sym.Struct, yyline, yychar, yytext());
          }
        case 106: break;
        case 74: 
          { return new Symbol(sym.Sizeof, yyline, yychar, yytext());
          }
        case 107: break;
        case 73: 
          { return new Symbol(sym.Signed, yyline, yychar, yytext());
          }
        case 108: break;
        case 60: 
          { return new Symbol(sym.Goto, yyline, yychar, yytext());
          }
        case 109: break;
        case 7: 
          { return new Symbol(sym.OperadorDivision, yyline, yychar, yytext());
          }
        case 110: break;
        case 28: 
          { return new Symbol(sym.OperadorRestaAsignacion, yyline, yychar, yytext());
          }
        case 111: break;
        case 9: 
          { return new Symbol(sym.OperadorPuntoComa, yyline, yychar, yytext());
          }
        case 112: break;
        case 34: 
          { return new Symbol(sym.If, yyline, yychar, yytext());
          }
        case 113: break;
        case 71: 
          { return new Symbol(sym.Static, yyline, yychar, yytext());
          }
        case 114: break;
        case 25: 
          { return new Symbol(sym.OperadorGato, yyline, yychar, yytext());
          }
        case 115: break;
        case 19: 
          { return new Symbol(sym.OperadorParCuadradoIz, yyline, yychar, yytext());
          }
        case 116: break;
        case 46: 
          { return new Symbol(sym.FlotanteExponente, yyline, yychar, yytext());
          }
        case 117: break;
        case 62: 
          { return new Symbol(sym.Union, yyline, yychar, yytext());
          }
        case 118: break;
        case 61: 
          { return new Symbol(sym.Void, yyline, yychar, yytext());
          }
        case 119: break;
        case 36: 
          { return new Symbol(sym.OperadorIncremento, yyline, yychar, yytext());
          }
        case 120: break;
        case 32: 
          { return new Symbol(sym.OperadorDivAsignacion, yyline, yychar, yytext());
          }
        case 121: break;
        case 51: 
          { return new Symbol(sym.OperadorDesplIzAsig, yyline, yychar, yytext());
          }
        case 122: break;
        case 76: 
          { return new Symbol(sym.Double, yyline, yychar, yytext());
          }
        case 123: break;
        case 35: 
          { return new Symbol(sym.Do, yyline, yychar, yytext());
          }
        case 124: break;
        case 67: 
          { return new Symbol(sym.While, yyline, yychar, yytext());
          }
        case 125: break;
        case 40: 
          { return new Symbol(sym.OperadorDesIz, yyline, yychar, yytext());
          }
        case 126: break;
        case 5: 
          { return new Symbol(sym.OperadorPunto, yyline, yychar, yytext());
          }
        case 127: break;
        case 50: 
          { return new Symbol(sym.OperadorDesplDerAsig, yyline, yychar, yytext());
          }
        case 128: break;
        case 38: 
          { return new Symbol(sym.OperadorIgualIgual, yyline, yychar, yytext());
          }
        case 129: break;
        case 64: 
          { return new Symbol(sym.Const, yyline, yychar, yytext());
          }
        case 130: break;
        case 4: 
          { return new Symbol(sym.OperadorResta, yyline, yychar, yytext());
          }
        case 131: break;
        case 1: 
          { return new Symbol(sym.Error, yyline, yychar, yytext());
          }
        case 132: break;
        case 53: 
          { return new Symbol(sym.OctalFlotante, yyline, yychar, yytext());
          }
        case 133: break;
        case 69: 
          { return new Symbol(sym.Return, yyline, yychar, yytext());
          }
        case 134: break;
        case 15: 
          { return new Symbol(sym.OperadorPregunta, yyline, yychar, yytext());
          }
        case 135: break;
        case 49: 
          { return new Symbol(sym.For, yyline, yychar, yytext());
          }
        case 136: break;
        case 58: 
          { return new Symbol(sym.Char, yyline, yychar, yytext());
          }
        case 137: break;
        case 26: 
          { return new Symbol(sym.Flotante, yyline, yychar, yytext());
          }
        case 138: break;
        case 77: 
          { return new Symbol(sym.Typedef, yyline, yychar, yytext());
          }
        case 139: break;
        case 21: 
          { return new Symbol(sym.OperadorCorcheteIz, yyline, yychar, yytext());
          }
        case 140: break;
        case 18: 
          { return new Symbol(sym.OperadorParentesisDer, yyline, yychar, yytext());
          }
        case 141: break;
        case 8: 
          { return new Symbol(sym.OperadorMultiplicacion, yyline, yychar, yytext());
          }
        case 142: break;
        case 11: 
          { return new Symbol(sym.OperadorSuma, yyline, yychar, yytext());
          }
        case 143: break;
        case 59: 
          { return new Symbol(sym.Long, yyline, yychar, yytext());
          }
        case 144: break;
        case 30: 
          { return new Symbol(sym.Octal, yyline, yychar, yytext());
          }
        case 145: break;
        case 80: 
          { return new Symbol(sym.Register, yyline, yychar, yytext());
          }
        case 146: break;
        case 29: 
          { return new Symbol(sym.OperadorMiembroPuntero, yyline, yychar, yytext());
          }
        case 147: break;
        case 16: 
          { return new Symbol(sym.OperadorModulo, yyline, yychar, yytext());
          }
        case 148: break;
        case 52: 
          { return new Symbol(sym.Caracter, yyline, yychar, yytext());
          }
        case 149: break;
        case 41: 
          { return new Symbol(sym.OperadorORAsignacion, yyline, yychar, yytext());
          }
        case 150: break;
        case 66: 
          { return new Symbol(sym.Float, yyline, yychar, yytext());
          }
        case 151: break;
        case 31: 
          { /* ignore */
          }
        case 152: break;
        case 42: 
          { return new Symbol(sym.OperadorANDAsignacion, yyline, yychar, yytext());
          }
        case 153: break;
        case 68: 
          { return new Symbol(sym.HexadecimalFlotante, yyline, yychar, yytext());
          }
        case 154: break;
        case 37: 
          { return new Symbol(sym.OperadorSumaAsignacion, yyline, yychar, yytext());
          }
        case 155: break;
        case 82: 
          { return new Symbol(sym.Volatile, yyline, yychar, yytext());
          }
        case 156: break;
        case 78: 
          { return new Symbol(sym.Default, yyline, yychar, yytext());
          }
        case 157: break;
        case 75: 
          { return new Symbol(sym.Switch, yyline, yychar, yytext());
          }
        case 158: break;
        case 20: 
          { return new Symbol(sym.OperadorParCuadradoDer, yyline, yychar, yytext());
          }
        case 159: break;
        case 24: 
          { return new Symbol(sym.OperadorComplementoAUno, yyline, yychar, yytext());
          }
        case 160: break;
        case 39: 
          { return new Symbol(sym.OperadorDesplDer, yyline, yychar, yytext());
          }
        case 161: break;
        case 63: 
          { return new Symbol(sym.Break, yyline, yychar, yytext());
          }
        case 162: break;
        case 17: 
          { return new Symbol(sym.OperadorParentesisIz, yyline, yychar, yytext());
          }
        case 163: break;
        case 13: 
          { return new Symbol(sym.OperadorBooleano, yyline, yychar, yytext());
          }
        case 164: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
