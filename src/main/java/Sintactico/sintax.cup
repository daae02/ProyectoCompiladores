package Sintactico;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Main,Auto, Break, Case, Char, Const, Continue,
        Default, Do, Double, Else, Enum, Extern,
        Float, For, Goto, If, Int, Long, Register,
        Return, Short, Signed, Sizeof, Static,
        Struct, Switch, Typedef, Union, Unsigned,
        Void, Volatile, While, OperadorPuntoComa,
        OperadorComa, OperadorIncremento,
        OperadorDecremento, OperadorIgualIgual,
        OperadorBooleano, OperadorPregunta, OperadorIgual,
        OperadorSuma, OperadorResta, OperadorMultiplicacion,
        OperadorDivision, OperadorModulo, OperadorParentesisIz,
        OperadorParentesisDer, OperadorParCuadradoIz, OperadorParCuadradoDer,
        OperadorCorcheteIz, OperadorCorcheteDer, OperadorDoblePunto, OperadorPunto,
        OperadorSumaAsignacion, OperadorRestaAsignacion, OperadorMultAsignacion,
        OperadorDivAsignacion, OperadorDireccion, OperadorDesplDer, OperadorDesIz,
        OperadorComplementoAUno, OperadorModuloAsignacion, OperadorANDAsignacion, 
        OperadorXORAsignacion, OperadorORAsignacion, OperadorDesplIzAsig,
        OperadorDesplDerAsig, OperadorMiembroPuntero, OperadorGato, Hilera,
        Caracter, Identificador, Entero, Flotante, FlotanteExponente, Octal,
        OctalFlotante, Hexadecimal, HexadecimalFlotante, Error;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, EPSILON;

start with INICIO;

INICIO ::= 
    Main;
EPSILON ::= {: RESULT = null; :};
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR
;