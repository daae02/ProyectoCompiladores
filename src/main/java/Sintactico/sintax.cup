package Sintactico;

import java_cup.runtime.Symbol;
import Semantico.PilaSemantica;
import Semantico.Traductor;
import Semantico.TablaSimbolos;

parser code
{:
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido.");
    } 
    public Symbol getS(){
        return this.s;
    }
:};

terminal 
    Identificador, OperadorComa, OperadorCorcheteDer, OperadorCorcheteIz, OperadorNegacion,
    OperadorDoblePunto, OperadorParentesisDer, OperadorParentesisIz, OperadorParCuadradoIz, 
    OperadorParCuadradoDer, OperadorPuntoComa, Char, Int, Long, Short, Entero, Flotante, 
    FlotanteExponente, Octal, OctalFlotante, Hexadecimal, HexadecimalFlotante, Caracter, 
    Const, Write, Read, For, While, Switch, If, Else, Void, Case, Default, Continue, Break, 
    OperadorIgual, OperadorMayorIgual, OperadorMayor, OperadorMenorIgual, OperadorMenor,
    OperadorDesigual, OperadorORLazy, OperadorANDLazy, OperadorXOR, OperadorOR, OperadorAND,
    OperadorMultiIgual, OperadorDivIgual, OperadorModIgual, OperadorIncremental, OperadorDecremental,
    OperadorMas, OperadorMenos, OperadorMultiplicacion, OperadorDivision, OperadorModulo, 
    OperadorMasIgual, OperadorMenosIgual, OperadorIgualIgual, Error
;

non terminal 
    INICIO, LITERAL, DECLARACION, DECLARACION_FUNCION, EXPRESION, DECLARADOR, INICIALIZADOR, DECLARACION_EXTERNA, 
    EXPRESION_PRIMARIA, EXPRESION_POSTFIJA, LISTA_ARGUMENTOS_EXPRESIONES, EXPRESION_UNARIA, EXPRESION_MULTIPLICATIVA, 
    EXPRESION_ADITIVA, EXPRESION_RELACIONAL, EXPRESION_IGUALDAD, EXPRESION_AND, EXPRESION_XOR, EXPRESION_OR, 
    EXPRESION_LAZY_AND, EXPRESION_LAZY_OR, EXPRESION_ASIGNACION, OPERADOR_ASIGNACION, LISTA_DECLARADORES_INICIALIZADORES, 
    ESPECIFICADORES_DECLARACION, DECLARADOR_INICIALIZADOR, ESPECIFICADOR_TIPO, LISTA_CUALIFICADOR_ESPECIFICADOR, 
    CUALIFICADOR_TIPO, LISTA_TIPOS_PARAMETROS, LISTA_PARAMETROS, DECLARACION_PARAMETRO, LISTA_IDENTIFICADORES, NOMBRE_TIPO,
    DECLARADOR_ABSTRACTO, DECLARADOR_ABSTRACTO_DIRECTO, LISTA_INICIALIZADORES, SENTENCIA, SENTENCIA_ETIQUETADA, 
    SENTENCIA_COMPUESTA, LISTA_DECLARACIONES, LISTA_SENTENCIAS, SENTENCIA_EXPRESION, SENTENCIA_SELECCION, SENTENCIA_ITERACION,
    SENTENCIA_SALTO, SENTENCIA_READ_WRITE, OPERADOR_UNARIO, RESTO_DECLARACIONF, RESTO_RESTO_DECLARACIONF
;

precedence left OperadorCorcheteIz, OperadorCorcheteDer, OperadorParentesisIz, OperadorParentesisDer, OperadorIncremental, OperadorDecremental;
precedence left OperadorNegacion;
precedence left OperadorMultiplicacion, OperadorDivision, OperadorModulo;
precedence left OperadorMas, OperadorMenos;
precedence left OperadorMenor, OperadorMayor, OperadorMenorIgual, OperadorMayorIgual;
precedence left OperadorIgualIgual, OperadorDesigual;
precedence left OperadorAND;
precedence left OperadorXOR;
precedence left OperadorOR;
precedence left OperadorANDLazy;
precedence left OperadorORLazy;
precedence right OperadorIgual, OperadorMultiIgual, OperadorDivIgual, OperadorModIgual, OperadorMasIgual, OperadorMenosIgual;

start with INICIO
;

INICIO 
    ::= DECLARACION_EXTERNA 
    |   INICIO DECLARACION_EXTERNA 
;

DECLARACION_EXTERNA 
    ::= DECLARACION 
    |   DECLARACION_FUNCION
;

DECLARACION_FUNCION
    ::= ESPECIFICADORES_DECLARACION Identificador:id {: Traductor.recuerdaFuncion((String) id); :} OperadorParentesisIz RESTO_DECLARACIONF
    |   Void:v {: Traductor.recuerdaTipo((String) v); :} Identificador:id {: Traductor.recuerdaFuncion((String) id); :} OperadorParentesisIz RESTO_DECLARACIONF
    |   error OperadorCorcheteDer {: errores.add(new ErrorSintactico(parser.getS(), "Declaración de función no válida")); :} 
;

RESTO_DECLARACIONF
    ::= LISTA_PARAMETROS RESTO_RESTO_DECLARACIONF
    |   LISTA_IDENTIFICADORES RESTO_RESTO_DECLARACIONF
    |   RESTO_RESTO_DECLARACIONF
;
RESTO_RESTO_DECLARACIONF
    ::= OperadorParentesisDer:op {: Traductor.insertarFuncion(opright,opleft); :} SENTENCIA_COMPUESTA
;
EXPRESION_PRIMARIA 
    ::= Identificador:identificador {: Traductor.recuerdaVariable((String) identificador, identificadorright, identificadorleft) ;  :}
    |   LITERAL 
    |   OperadorParentesisIz EXPRESION OperadorParentesisDer
;

LITERAL 
    ::= Entero:e {: Traductor.recuerdaConstante((String) e) ;  :}
    |   Flotante:f {: Traductor.recuerdaConstante((String) f);  :}
    |   FlotanteExponente:fe {: Traductor.recuerdaConstante((String) fe);  :}
    |   Octal:o {: Traductor.recuerdaConstante((String) o);  :}
    |   OctalFlotante:oe {: Traductor.recuerdaConstante((String) oe);  :}
    |   Hexadecimal:h {: Traductor.recuerdaConstante((String) h);  :}
    |   HexadecimalFlotante:hf {: Traductor.recuerdaConstante((String) hf);  :}
    |   Caracter:c {: Traductor.recuerdaConstante((String) c);  :}
;

EXPRESION_POSTFIJA 
    ::= EXPRESION_PRIMARIA
    |   EXPRESION_POSTFIJA OperadorParCuadradoIz EXPRESION OperadorParCuadradoDer
    |   EXPRESION_POSTFIJA OperadorParentesisIz OperadorParentesisDer
    |   EXPRESION_POSTFIJA OperadorParentesisIz LISTA_ARGUMENTOS_EXPRESIONES OperadorParentesisDer
    |   EXPRESION_POSTFIJA OperadorIncremental
    |   EXPRESION_POSTFIJA OperadorDecremental
;

LISTA_ARGUMENTOS_EXPRESIONES 
    ::= EXPRESION_ASIGNACION 
    |   LISTA_ARGUMENTOS_EXPRESIONES OperadorComa EXPRESION_ASIGNACION
;

EXPRESION_UNARIA 
    ::= EXPRESION_POSTFIJA
    |   OperadorIncremental EXPRESION_UNARIA
    |   OperadorDecremental EXPRESION_UNARIA
    |   OPERADOR_UNARIO EXPRESION_UNARIA
;

OPERADOR_UNARIO 
    ::= OperadorAND:op {: Traductor.recuerdaOperador((String) op) ;  :} 
    |   OperadorMultiplicacion:op {: Traductor.recuerdaOperador((String) op) ;  :} 
    |   OperadorMas:op {: Traductor.recuerdaOperador((String) op) ;  :} 
    |   OperadorMenos:op {: Traductor.recuerdaOperador((String) op) ;  :} 
    |   OperadorNegacion:op {: Traductor.recuerdaOperador((String) op) ;  :} 
;

EXPRESION_MULTIPLICATIVA
    ::= EXPRESION_UNARIA 
    |   EXPRESION_MULTIPLICATIVA OperadorMultiplicacion:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_UNARIA
    |   EXPRESION_MULTIPLICATIVA OperadorDivision:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_UNARIA
    |   EXPRESION_MULTIPLICATIVA OperadorModulo:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_UNARIA
;

EXPRESION_ADITIVA
    ::= EXPRESION_MULTIPLICATIVA
    |   EXPRESION_ADITIVA OperadorMas:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_MULTIPLICATIVA
    |   EXPRESION_ADITIVA OperadorMenos:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_MULTIPLICATIVA
;

EXPRESION_RELACIONAL
    ::= EXPRESION_ADITIVA
    |   EXPRESION_RELACIONAL OperadorMenor:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_ADITIVA
    |   EXPRESION_RELACIONAL OperadorMayor:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_ADITIVA
    |   EXPRESION_RELACIONAL OperadorMenorIgual:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_ADITIVA
    |   EXPRESION_RELACIONAL OperadorMayorIgual:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_ADITIVA
;

EXPRESION_IGUALDAD
    ::= EXPRESION_RELACIONAL
    |   EXPRESION_IGUALDAD OperadorIgualIgual:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_RELACIONAL
    |   EXPRESION_IGUALDAD OperadorDesigual:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_RELACIONAL
;

EXPRESION_AND
    ::= EXPRESION_IGUALDAD
    |   EXPRESION_AND OperadorAND:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_IGUALDAD
;

EXPRESION_XOR
    ::= EXPRESION_AND
    |   EXPRESION_XOR OperadorXOR:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_AND
;

EXPRESION_OR
    ::= EXPRESION_XOR
    |   EXPRESION_OR OperadorOR:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_XOR
;

EXPRESION_LAZY_AND
    ::= EXPRESION_OR
    |   EXPRESION_LAZY_AND OperadorANDLazy:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_OR
;

EXPRESION_LAZY_OR
    ::= EXPRESION_LAZY_AND
    |   EXPRESION_LAZY_OR OperadorORLazy:op {: Traductor.recuerdaOperador((String) op) ;  :}  EXPRESION_LAZY_AND
;

EXPRESION_ASIGNACION
    ::= EXPRESION_LAZY_OR
    |   EXPRESION_UNARIA OPERADOR_ASIGNACION EXPRESION_ASIGNACION
;

OPERADOR_ASIGNACION 
    ::= OperadorIgual:op {: Traductor.recuerdaOperador((String) op) ;  :}   
    |   OperadorMasIgual:op {: Traductor.recuerdaOperador((String) op) ;  :}      
    |   OperadorMenosIgual:op {: Traductor.recuerdaOperador((String) op) ;  :}    
    |   OperadorMultiIgual:op {: Traductor.recuerdaOperador((String) op) ;  :}    
    |   OperadorDivIgual:op {: Traductor.recuerdaOperador((String) op) ;  :}      
    |   OperadorModIgual:op {: Traductor.recuerdaOperador((String) op) ;  :}      
;

EXPRESION
    ::= EXPRESION_ASIGNACION
    |   EXPRESION OperadorComa EXPRESION_ASIGNACION
    |   OperadorNegacion EXPRESION_ASIGNACION
;

DECLARACION 
    ::= ESPECIFICADORES_DECLARACION OperadorPuntoComa:OpPuntoComa {: System.out.println("Fin de declaración: ");  System.out.println("Insertando en ts: "); Traductor.insertarTS(OpPuntoComaright,OpPuntoComaleft); :}
    |   ESPECIFICADORES_DECLARACION LISTA_DECLARADORES_INICIALIZADORES OperadorPuntoComa:OpPuntoComa {: System.out.println("Fin de declaración: ");  System.out.println("Insertando en ts: "); Traductor.insertarTS(OpPuntoComaright,OpPuntoComaleft); :}
    |   error OperadorPuntoComa {: errores.add(new ErrorSintactico(parser.getS(), "Declaración no válida")); :}
;

ESPECIFICADORES_DECLARACION 
    ::= ESPECIFICADOR_TIPO ESPECIFICADORES_DECLARACION
    |   ESPECIFICADOR_TIPO
    |   CUALIFICADOR_TIPO
    |   CUALIFICADOR_TIPO ESPECIFICADORES_DECLARACION
;

LISTA_DECLARADORES_INICIALIZADORES
    ::= DECLARADOR_INICIALIZADOR 
    |   LISTA_DECLARADORES_INICIALIZADORES OperadorComa DECLARADOR_INICIALIZADOR 
;

DECLARADOR_INICIALIZADOR 
    ::= DECLARADOR 
    |   DECLARADOR OperadorIgual INICIALIZADOR 
;

ESPECIFICADOR_TIPO 
    ::= Char:char_token {: Traductor.recuerdaTipo((String) char_token) ;  :}
    |   Int:int_token {: Traductor.recuerdaTipo((String) int_token) ;  :}
    |   Long:long_token {: Traductor.recuerdaTipo((String) long_token) ;  :}
    |   Short:short_token {: Traductor.recuerdaTipo((String) short_token) ;  :}
;

LISTA_CUALIFICADOR_ESPECIFICADOR
    ::= ESPECIFICADOR_TIPO LISTA_CUALIFICADOR_ESPECIFICADOR
    |   ESPECIFICADOR_TIPO
    |   CUALIFICADOR_TIPO LISTA_CUALIFICADOR_ESPECIFICADOR
    |   CUALIFICADOR_TIPO
;

CUALIFICADOR_TIPO
    ::= Const
;      

DECLARADOR 
    ::= Identificador:id {: Traductor.recuerdaId((String) id) ;  System.out.println("Encuentra: "+id); :} 
    |   OperadorParentesisIz DECLARADOR OperadorParentesisDer  
    |   DECLARADOR OperadorParCuadradoIz EXPRESION_LAZY_OR OperadorParCuadradoDer
    |   DECLARADOR OperadorParCuadradoIz OperadorParCuadradoDer
    |   DECLARADOR OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer
    |   DECLARADOR OperadorParentesisIz LISTA_IDENTIFICADORES OperadorParentesisDer
    |   DECLARADOR OperadorParentesisIz OperadorParentesisDer
;

LISTA_TIPOS_PARAMETROS 
    ::= LISTA_PARAMETROS 
;

LISTA_PARAMETROS 
    ::= DECLARACION_PARAMETRO 
    |   LISTA_PARAMETROS OperadorComa DECLARACION_PARAMETRO
;

DECLARACION_PARAMETRO 
    ::= ESPECIFICADORES_DECLARACION DECLARADOR 
    |   ESPECIFICADORES_DECLARACION DECLARADOR_ABSTRACTO
    |   ESPECIFICADORES_DECLARACION
;

LISTA_IDENTIFICADORES
    ::= Identificador
    |   LISTA_IDENTIFICADORES OperadorComa Identificador
;

NOMBRE_TIPO 
    ::= LISTA_CUALIFICADOR_ESPECIFICADOR 
    |   LISTA_CUALIFICADOR_ESPECIFICADOR DECLARADOR_ABSTRACTO
;

DECLARADOR_ABSTRACTO
    ::= DECLARADOR_ABSTRACTO_DIRECTO
;

DECLARADOR_ABSTRACTO_DIRECTO
    ::= OperadorParentesisIz DECLARADOR_ABSTRACTO OperadorParentesisDer 
    |   OperadorParCuadradoIz OperadorParCuadradoDer 
    |   OperadorParCuadradoIz EXPRESION_LAZY_OR OperadorParCuadradoDer 
    |   DECLARADOR_ABSTRACTO_DIRECTO OperadorParCuadradoIz OperadorParCuadradoDer
    |   DECLARADOR_ABSTRACTO_DIRECTO OperadorParCuadradoIz EXPRESION_LAZY_OR OperadorParCuadradoDer
    |   OperadorParentesisIz OperadorParentesisDer
    |   OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer
    |   DECLARADOR_ABSTRACTO_DIRECTO OperadorParentesisIz OperadorParentesisDer
    |   DECLARADOR_ABSTRACTO_DIRECTO OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer
;

INICIALIZADOR 
    ::= EXPRESION_ASIGNACION
    |   OperadorCorcheteIz LISTA_INICIALIZADORES OperadorCorcheteDer  
    |   OperadorCorcheteIz LISTA_INICIALIZADORES OperadorComa OperadorCorcheteDer  

;

LISTA_INICIALIZADORES 
    ::= INICIALIZADOR
    |   LISTA_INICIALIZADORES OperadorComa INICIALIZADOR
;

SENTENCIA 
    ::= SENTENCIA_ETIQUETADA
    |   SENTENCIA_COMPUESTA
    |   SENTENCIA_EXPRESION
    |   SENTENCIA_SELECCION
    |   SENTENCIA_ITERACION
    |   SENTENCIA_SALTO
    |   SENTENCIA_READ_WRITE
    |   error OperadorCorcheteDer {: errores.add(new ErrorSintactico(parser.getS(), "Sentencia no válida")); :}
;

SENTENCIA_ETIQUETADA
    ::= Case EXPRESION_LAZY_OR OperadorDoblePunto SENTENCIA
    |   Default OperadorDoblePunto SENTENCIA
;

SENTENCIA_COMPUESTA
    ::= OperadorCorcheteIz OperadorCorcheteDer 
    |   OperadorCorcheteIz LISTA_SENTENCIAS OperadorCorcheteDer 
    |   OperadorCorcheteIz LISTA_DECLARACIONES OperadorCorcheteDer 
    |   OperadorCorcheteIz LISTA_DECLARACIONES LISTA_SENTENCIAS OperadorCorcheteDer 
;

LISTA_DECLARACIONES
    ::= DECLARACION 
    |   LISTA_DECLARACIONES DECLARACION
;

LISTA_SENTENCIAS
    ::= SENTENCIA
    |   LISTA_SENTENCIAS SENTENCIA
; 

SENTENCIA_EXPRESION 
    ::= OperadorPuntoComa 
    |   EXPRESION OperadorPuntoComa:e {:Traductor.evalExpression(eright,eleft);:}
;

SENTENCIA_SELECCION 
    ::= If OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA
    |   If OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA Else SENTENCIA_COMPUESTA
    |   Switch OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA
;

SENTENCIA_ITERACION 
    ::= While OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA
    |   For OperadorParentesisIz SENTENCIA_EXPRESION SENTENCIA_EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA
    |   For OperadorParentesisIz SENTENCIA_EXPRESION SENTENCIA_EXPRESION EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA
;

SENTENCIA_SALTO 
    ::= Continue OperadorPuntoComa
    |   Break OperadorPuntoComa
;

SENTENCIA_READ_WRITE 
    ::= Write OperadorParentesisIz EXPRESION OperadorParentesisDer OperadorPuntoComa
    |   Read OperadorParentesisIz OperadorParentesisDer OperadorPuntoComa
    |   Read OperadorParentesisIz Identificador OperadorParentesisDer OperadorPuntoComa
;