
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 01 23:52:34 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 01 23:52:34 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\004\000\002\002\003\000\002\103" +
    "\004\000\002\103\003\000\002\010\004\000\002\010\003" +
    "\000\002\102\003\000\002\102\003\000\002\012\005\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\014\003\000\002\014\005\000\002\101" +
    "\003\000\002\101\005\000\002\100\003\000\002\077\003" +
    "\000\002\077\005\000\002\016\006\000\002\105\003\000" +
    "\002\105\005\000\002\104\005\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\020\007\000\002\021\004\000\002\022\005\000" +
    "\002\022\002\000\002\023\007\000\002\024\003\000\002" +
    "\024\002\000\002\025\012\000\002\025\013\000\002\027" +
    "\005\000\002\027\002\000\002\030\006\000\002\030\002" +
    "\000\002\031\004\000\002\031\003\000\002\032\004\000" +
    "\002\032\004\000\002\053\004\000\002\053\004\000\002" +
    "\053\004\000\002\053\004\000\002\053\005\000\002\053" +
    "\005\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\004\000\002\053\004\000" +
    "\002\073\003\000\002\073\003\000\002\073\005\000\002" +
    "\072\003\000\002\072\006\000\002\072\005\000\002\072" +
    "\006\000\002\072\004\000\002\072\004\000\002\071\003" +
    "\000\002\071\005\000\002\070\003\000\002\070\004\000" +
    "\002\070\004\000\002\067\003\000\002\067\005\000\002" +
    "\067\005\000\002\067\005\000\002\066\003\000\002\066" +
    "\005\000\002\066\005\000\002\065\003\000\002\065\005" +
    "\000\002\065\005\000\002\065\005\000\002\065\005\000" +
    "\002\064\003\000\002\064\005\000\002\064\005\000\002" +
    "\063\003\000\002\063\005\000\002\062\003\000\002\062" +
    "\005\000\002\061\003\000\002\061\005\000\002\060\003" +
    "\000\002\060\005\000\002\057\003\000\002\057\005\000" +
    "\002\056\003\000\002\056\005\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\054\003\000\002\054\004" +
    "\000\002\035\011\000\002\036\007\000\002\037\004\000" +
    "\002\037\004\000\002\037\004\000\002\037\004\000\002" +
    "\037\005\000\002\037\005\000\002\037\004\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\004\000\002\037\004\000\002\037\003\000" +
    "\002\040\011\000\002\041\011\000\002\042\005\000\002" +
    "\043\004\000\002\043\002\000\002\044\010\000\002\045" +
    "\007\000\002\045\002\000\002\046\011\000\002\047\006" +
    "\000\002\047\004\000\002\050\004\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\016\017\011\020\012\021\013\022\004\033" +
    "\005\043\017\001\002\000\006\004\ufff5\013\ufff5\001\002" +
    "\000\012\017\011\020\012\021\013\022\004\001\002\000" +
    "\004\002\000\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\u0104\001\002\000\006\004\ufff8\013\ufff8\001\002\000" +
    "\006\004\ufff7\013\ufff7\001\002\000\006\004\ufff6\013\ufff6" +
    "\001\002\000\016\017\ufffb\020\ufffb\021\ufffb\022\ufffb\033" +
    "\ufffb\043\ufffb\001\002\000\006\004\026\013\027\001\002" +
    "\000\016\017\ufffa\020\ufffa\021\ufffa\022\ufffa\033\ufffa\043" +
    "\ufffa\001\002\000\012\017\011\020\012\021\013\022\004" +
    "\001\002\000\016\002\ufffc\017\011\020\012\021\013\022" +
    "\004\043\017\001\002\000\016\017\011\020\012\021\013" +
    "\022\004\033\005\043\017\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\ufffd\001\002\000\006\004\026\013\027" +
    "\001\002\000\004\013\032\001\002\000\014\005\uffef\012" +
    "\uffef\013\uffef\016\uffef\051\uffef\001\002\000\006\004\026" +
    "\013\027\001\002\000\004\012\031\001\002\000\014\005" +
    "\uffee\012\uffee\013\uffee\016\uffee\051\uffee\001\002\000\014" +
    "\012\uffd7\017\011\020\012\021\013\022\004\001\002\000" +
    "\004\012\043\001\002\000\004\004\035\001\002\000\006" +
    "\005\037\012\uffd5\001\002\000\004\012\uffd8\001\002\000" +
    "\012\017\011\020\012\021\013\022\004\001\002\000\004" +
    "\004\041\001\002\000\006\005\037\012\uffd5\001\002\000" +
    "\004\012\uffd6\001\002\000\004\007\044\001\002\000\066" +
    "\004\115\010\077\013\101\017\011\020\012\021\013\022" +
    "\004\023\047\024\072\025\067\026\114\027\126\030\052" +
    "\031\100\032\116\033\005\034\122\035\061\036\075\037" +
    "\070\040\076\041\053\046\104\047\057\067\124\070\121" +
    "\001\002\000\070\004\uff76\006\uff76\010\uff76\013\uff76\017" +
    "\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025\uff76" +
    "\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034" +
    "\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\046\uff76" +
    "\047\uff76\067\uff76\070\uff76\001\002\000\156\004\uffc1\005" +
    "\uffc1\006\uffc1\010\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\046\uffc1\047\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063" +
    "\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1" +
    "\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100" +
    "\uffc1\001\002\000\160\004\uffe9\005\uffe9\006\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\046\uffe9" +
    "\047\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073" +
    "\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9\001\002" +
    "\000\156\004\uffb9\005\uffb9\006\uffb9\010\uffb9\012\uffb9\013" +
    "\361\014\357\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\046\uffb9\047\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067" +
    "\362\070\360\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9" +
    "\076\uffb9\077\uffb9\100\uffb9\001\002\000\006\004\026\013" +
    "\027\001\002\000\160\004\uffe4\005\uffe4\006\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\046\uffe4" +
    "\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4" +
    "\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4\073" +
    "\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4\001\002" +
    "\000\004\013\340\001\002\000\112\004\uffa5\005\uffa5\006" +
    "\uffa5\010\uffa5\012\uffa5\013\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\046\uffa5\047" +
    "\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\136\067\uffa5" +
    "\070\uffa5\001\002\000\004\006\337\001\002\000\070\004" +
    "\uff75\006\uff75\010\uff75\013\uff75\017\uff75\020\uff75\021\uff75" +
    "\022\uff75\023\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030" +
    "\uff75\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75" +
    "\037\uff75\040\uff75\041\uff75\046\uff75\047\uff75\067\uff75\070" +
    "\uff75\001\002\000\004\016\336\001\002\000\056\004\uffc7" +
    "\006\uffc7\010\uffc7\013\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\046\uffc7\047\uffc7\067" +
    "\uffc7\070\uffc7\001\002\000\004\013\331\001\002\000\126" +
    "\004\uffaa\005\uffaa\006\uffaa\010\uffaa\012\uffaa\013\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\046\uffaa\047\uffaa\052\143\053\146\054\144\055" +
    "\145\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\067\uffaa\070\uffaa\100\uffaa\001\002\000\140\004\uffb2\005" +
    "\uffb2\006\uffb2\010\uffb2\012\uffb2\013\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\046" +
    "\uffb2\047\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2" +
    "\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\067\uffb2\070" +
    "\uffb2\071\uffb2\072\uffb2\073\155\074\154\075\153\100\uffb2" +
    "\001\002\000\056\004\115\006\uffd3\010\077\013\101\023" +
    "\047\024\072\025\067\026\114\027\126\030\052\031\100" +
    "\032\116\034\122\035\061\036\075\037\070\040\076\041" +
    "\053\046\217\047\215\067\124\070\121\001\002\000\056" +
    "\004\uffc9\006\uffc9\010\uffc9\013\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\046\uffc9\047" +
    "\uffc9\067\uffc9\070\uffc9\001\002\000\102\004\uff9d\005\uff9d" +
    "\006\uff9d\010\uff9d\012\uff9d\013\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\046\uff9d" +
    "\047\uff9d\057\327\067\uff9d\070\uff9d\001\002\000\160\004" +
    "\uffe7\005\uffe7\006\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\046\uffe7\047\uffe7\051\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7" +
    "\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076" +
    "\uffe7\077\uffe7\100\uffe7\001\002\000\004\013\321\001\002" +
    "\000\100\004\uff95\005\uff95\006\uff95\010\uff95\012\uff95\013" +
    "\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95" +
    "\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031" +
    "\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95" +
    "\040\uff95\041\uff95\046\uff95\047\uff95\067\uff95\070\uff95\001" +
    "\002\000\160\004\uffe8\005\uffe8\006\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\046\uffe8\047\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074" +
    "\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8\001\002\000\072" +
    "\004\uff77\006\uff77\010\uff77\013\uff77\017\uff77\020\uff77\021" +
    "\uff77\022\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77" +
    "\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036" +
    "\uff77\037\uff77\040\uff77\041\uff77\042\314\046\uff77\047\uff77" +
    "\067\uff77\070\uff77\001\002\000\106\004\uffa1\005\uffa1\006" +
    "\uffa1\010\uffa1\012\uffa1\013\uffa1\015\uffa1\016\uffa1\017\uffa1" +
    "\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026" +
    "\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1" +
    "\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\046\uffa1\047" +
    "\uffa1\057\uffa1\060\uffa1\062\132\067\uffa1\070\uffa1\001\002" +
    "\000\004\013\276\001\002\000\004\013\230\001\002\000" +
    "\032\004\115\013\101\023\047\024\072\025\067\026\114" +
    "\027\126\030\052\031\100\032\116\067\124\070\121\001" +
    "\002\000\160\004\uffe3\005\uffe3\006\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\046\uffe3\047\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057" +
    "\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3" +
    "\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074" +
    "\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\001\002\000\034" +
    "\004\115\010\077\013\101\023\047\024\072\025\067\026" +
    "\114\027\126\030\052\031\100\032\116\067\124\070\121" +
    "\001\002\000\070\004\uff73\006\uff73\010\uff73\013\uff73\017" +
    "\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73" +
    "\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034" +
    "\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73\046\uff73" +
    "\047\uff73\067\uff73\070\uff73\001\002\000\116\004\uffa7\005" +
    "\uffa7\006\uffa7\010\uffa7\012\uffa7\013\uffa7\015\uffa7\016\uffa7" +
    "\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\046" +
    "\uffa7\047\uffa7\056\141\057\uffa7\060\uffa7\061\uffa7\062\uffa7" +
    "\063\uffa7\067\uffa7\070\uffa7\100\140\001\002\000\004\016" +
    "\224\001\002\000\054\004\115\010\077\013\101\023\047" +
    "\024\072\025\067\026\114\027\126\030\052\031\100\032" +
    "\116\034\122\035\061\036\075\037\070\040\076\041\053" +
    "\046\104\047\057\067\124\070\121\001\002\000\154\004" +
    "\uffb6\005\uffb6\006\uffb6\010\uffb6\012\uffb6\013\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\046\uffb6\047\uffb6\051\203\052\uffb6\053\uffb6\054\uffb6" +
    "\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\064\205\065\211\066\210\067\uffb6\070\uffb6\071\uffb6" +
    "\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\207\077\204\100" +
    "\uffb6\001\002\000\156\004\uffc3\005\uffc3\006\uffc3\010\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\046\uffc3\047\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3" +
    "\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074" +
    "\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\001\002\000\056" +
    "\004\uffc8\006\uffc8\010\uffc8\013\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\046\uffc8\047" +
    "\uffc8\067\uffc8\070\uffc8\001\002\000\070\004\uff74\006\uff74" +
    "\010\uff74\013\uff74\017\uff74\020\uff74\021\uff74\022\uff74\023" +
    "\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74" +
    "\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040" +
    "\uff74\041\uff74\046\uff74\047\uff74\067\uff74\070\uff74\001\002" +
    "\000\014\017\011\020\012\021\013\022\004\033\005\001" +
    "\002\000\014\017\011\020\012\021\013\022\004\033\005" +
    "\001\002\000\160\004\uffe6\005\uffe6\006\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\046\uffe6\047" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6" +
    "\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\001\002\000" +
    "\156\004\uffc4\005\uffc4\006\uffc4\010\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\046\uffc4\047\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4" +
    "\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076" +
    "\uffc4\077\uffc4\100\uffc4\001\002\000\160\004\uffe2\005\uffe2" +
    "\006\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\046\uffe2\047\uffe2\051\uffe2\052\uffe2\053\uffe2\054" +
    "\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2" +
    "\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071" +
    "\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2" +
    "\100\uffe2\001\002\000\132\004\uffaf\005\uffaf\006\uffaf\010" +
    "\uffaf\012\uffaf\013\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\046\uffaf\047\uffaf\052" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf" +
    "\061\uffaf\062\uffaf\063\uffaf\067\uffaf\070\uffaf\071\151\072" +
    "\150\100\uffaf\001\002\000\110\004\uffa3\005\uffa3\006\uffa3" +
    "\010\uffa3\012\uffa3\013\uffa3\015\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3" +
    "\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\046\uffa3\047\uffa3" +
    "\057\uffa3\060\uffa3\061\134\062\uffa3\067\uffa3\070\uffa3\001" +
    "\002\000\032\004\115\013\101\023\047\024\072\025\067" +
    "\026\114\027\126\030\052\031\100\032\116\067\124\070" +
    "\121\001\002\000\004\013\167\001\002\000\056\004\uffca" +
    "\006\uffca\010\uffca\013\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\046\uffca\047\uffca\067" +
    "\uffca\070\uffca\001\002\000\032\004\115\013\101\023\047" +
    "\024\072\025\067\026\114\027\126\030\052\031\100\032" +
    "\116\067\124\070\121\001\002\000\104\004\uff9f\005\uff9f" +
    "\006\uff9f\010\uff9f\012\uff9f\013\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\046\uff9f" +
    "\047\uff9f\057\uff9f\060\127\067\uff9f\070\uff9f\001\002\000" +
    "\160\004\uffe5\005\uffe5\006\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\046\uffe5\047\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060" +
    "\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075" +
    "\uffe5\076\uffe5\077\uffe5\100\uffe5\001\002\000\032\004\115" +
    "\013\101\023\047\024\072\025\067\026\114\027\126\030" +
    "\052\031\100\032\116\067\124\070\121\001\002\000\106" +
    "\004\uffa0\005\uffa0\006\uffa0\010\uffa0\012\uffa0\013\uffa0\015" +
    "\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0" +
    "\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\041\uffa0\046\uffa0\047\uffa0\057\uffa0\060\uffa0\062\132\067" +
    "\uffa0\070\uffa0\001\002\000\140\004\uffb6\005\uffb6\006\uffb6" +
    "\010\uffb6\012\uffb6\013\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\046\uffb6\047\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\067\uffb6\070\uffb6\071\uffb6" +
    "\072\uffb6\073\uffb6\074\uffb6\075\uffb6\100\uffb6\001\002\000" +
    "\032\004\115\013\101\023\047\024\072\025\067\026\114" +
    "\027\126\030\052\031\100\032\116\067\124\070\121\001" +
    "\002\000\110\004\uffa2\005\uffa2\006\uffa2\010\uffa2\012\uffa2" +
    "\013\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\041\uffa2\046\uffa2\047\uffa2\057\uffa2\060\uffa2" +
    "\061\134\062\uffa2\067\uffa2\070\uffa2\001\002\000\032\004" +
    "\115\013\101\023\047\024\072\025\067\026\114\027\126" +
    "\030\052\031\100\032\116\067\124\070\121\001\002\000" +
    "\112\004\uffa4\005\uffa4\006\uffa4\010\uffa4\012\uffa4\013\uffa4" +
    "\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040" +
    "\uffa4\041\uffa4\046\uffa4\047\uffa4\057\uffa4\060\uffa4\061\uffa4" +
    "\062\uffa4\063\136\067\uffa4\070\uffa4\001\002\000\032\004" +
    "\115\013\101\023\047\024\072\025\067\026\114\027\126" +
    "\030\052\031\100\032\116\067\124\070\121\001\002\000" +
    "\116\004\uffa6\005\uffa6\006\uffa6\010\uffa6\012\uffa6\013\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\046\uffa6\047\uffa6\056\141\057\uffa6\060\uffa6" +
    "\061\uffa6\062\uffa6\063\uffa6\067\uffa6\070\uffa6\100\140\001" +
    "\002\000\032\004\115\013\101\023\047\024\072\025\067" +
    "\026\114\027\126\030\052\031\100\032\116\067\124\070" +
    "\121\001\002\000\032\004\115\013\101\023\047\024\072" +
    "\025\067\026\114\027\126\030\052\031\100\032\116\067" +
    "\124\070\121\001\002\000\126\004\uffa8\005\uffa8\006\uffa8" +
    "\010\uffa8\012\uffa8\013\uffa8\015\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\046\uffa8\047\uffa8" +
    "\052\143\053\146\054\144\055\145\056\uffa8\057\uffa8\060" +
    "\uffa8\061\uffa8\062\uffa8\063\uffa8\067\uffa8\070\uffa8\100\uffa8" +
    "\001\002\000\032\004\115\013\101\023\047\024\072\025" +
    "\067\026\114\027\126\030\052\031\100\032\116\067\124" +
    "\070\121\001\002\000\032\004\115\013\101\023\047\024" +
    "\072\025\067\026\114\027\126\030\052\031\100\032\116" +
    "\067\124\070\121\001\002\000\032\004\115\013\101\023" +
    "\047\024\072\025\067\026\114\027\126\030\052\031\100" +
    "\032\116\067\124\070\121\001\002\000\032\004\115\013" +
    "\101\023\047\024\072\025\067\026\114\027\126\030\052" +
    "\031\100\032\116\067\124\070\121\001\002\000\132\004" +
    "\uffad\005\uffad\006\uffad\010\uffad\012\uffad\013\uffad\015\uffad" +
    "\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024" +
    "\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041" +
    "\uffad\046\uffad\047\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\067" +
    "\uffad\070\uffad\071\151\072\150\100\uffad\001\002\000\032" +
    "\004\115\013\101\023\047\024\072\025\067\026\114\027" +
    "\126\030\052\031\100\032\116\067\124\070\121\001\002" +
    "\000\032\004\115\013\101\023\047\024\072\025\067\026" +
    "\114\027\126\030\052\031\100\032\116\067\124\070\121" +
    "\001\002\000\140\004\uffb1\005\uffb1\006\uffb1\010\uffb1\012" +
    "\uffb1\013\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\046\uffb1\047\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073" +
    "\155\074\154\075\153\100\uffb1\001\002\000\032\004\115" +
    "\013\101\023\047\024\072\025\067\026\114\027\126\030" +
    "\052\031\100\032\116\067\124\070\121\001\002\000\032" +
    "\004\115\013\101\023\047\024\072\025\067\026\114\027" +
    "\126\030\052\031\100\032\116\067\124\070\121\001\002" +
    "\000\032\004\115\013\101\023\047\024\072\025\067\026" +
    "\114\027\126\030\052\031\100\032\116\067\124\070\121" +
    "\001\002\000\140\004\uffb5\005\uffb5\006\uffb5\010\uffb5\012" +
    "\uffb5\013\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\046\uffb5\047\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5" +
    "\062\uffb5\063\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073" +
    "\uffb5\074\uffb5\075\uffb5\100\uffb5\001\002\000\140\004\uffb4" +
    "\005\uffb4\006\uffb4\010\uffb4\012\uffb4\013\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\046\uffb4\047\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\067\uffb4" +
    "\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\100" +
    "\uffb4\001\002\000\140\004\uffb3\005\uffb3\006\uffb3\010\uffb3" +
    "\012\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\046\uffb3\047\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3" +
    "\073\uffb3\074\uffb3\075\uffb3\100\uffb3\001\002\000\140\004" +
    "\uffb0\005\uffb0\006\uffb0\010\uffb0\012\uffb0\013\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\046\uffb0\047\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\067" +
    "\uffb0\070\uffb0\071\uffb0\072\uffb0\073\155\074\154\075\153" +
    "\100\uffb0\001\002\000\132\004\uffae\005\uffae\006\uffae\010" +
    "\uffae\012\uffae\013\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027" +
    "\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\046\uffae\047\uffae\052" +
    "\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae" +
    "\061\uffae\062\uffae\063\uffae\067\uffae\070\uffae\071\151\072" +
    "\150\100\uffae\001\002\000\132\004\uffac\005\uffac\006\uffac" +
    "\010\uffac\012\uffac\013\uffac\015\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035" +
    "\uffac\036\uffac\037\uffac\040\uffac\041\uffac\046\uffac\047\uffac" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\063\uffac\067\uffac\070\uffac\071\151" +
    "\072\150\100\uffac\001\002\000\132\004\uffab\005\uffab\006" +
    "\uffab\010\uffab\012\uffab\013\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab" +
    "\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\046\uffab\047" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab" +
    "\060\uffab\061\uffab\062\uffab\063\uffab\067\uffab\070\uffab\071" +
    "\151\072\150\100\uffab\001\002\000\126\004\uffa9\005\uffa9" +
    "\006\uffa9\010\uffa9\012\uffa9\013\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\046\uffa9" +
    "\047\uffa9\052\143\053\146\054\144\055\145\056\uffa9\057" +
    "\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\067\uffa9\070\uffa9" +
    "\100\uffa9\001\002\000\154\004\uffb8\005\uffb8\006\uffb8\010" +
    "\uffb8\012\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\046\uffb8\047\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8" +
    "\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066" +
    "\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8" +
    "\075\uffb8\076\uffb8\077\uffb8\100\uffb8\001\002\000\034\004" +
    "\115\010\077\013\101\023\047\024\072\025\067\026\114" +
    "\027\126\030\052\031\100\032\116\067\124\070\121\001" +
    "\002\000\004\012\176\001\002\000\006\005\173\012\uffde" +
    "\001\002\000\004\012\uffe0\001\002\000\034\004\115\010" +
    "\077\013\101\023\047\024\072\025\067\026\114\027\126" +
    "\030\052\031\100\032\116\067\124\070\121\001\002\000" +
    "\006\005\173\012\uffde\001\002\000\004\012\uffdf\001\002" +
    "\000\004\016\177\001\002\000\070\004\uffe1\006\uffe1\010" +
    "\uffe1\013\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\046\uffe1\047\uffe1\067\uffe1\070\uffe1\001\002\000" +
    "\154\004\uffb7\005\uffb7\006\uffb7\010\uffb7\012\uffb7\013\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\046\uffb7\047\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7" +
    "\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077" +
    "\uffb7\100\uffb7\001\002\000\070\004\uffd1\006\uffd1\010\uffd1" +
    "\013\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\046\uffd1\047\uffd1\067\uffd1\070\uffd1\001\002\000\070" +
    "\004\uffd2\006\uffd2\010\uffd2\013\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\046\uffd2\047\uffd2\067\uffd2" +
    "\070\uffd2\001\002\000\032\004\uff9b\013\uff9b\023\uff9b\024" +
    "\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b" +
    "\067\uff9b\070\uff9b\001\002\000\032\004\uff99\013\uff99\023" +
    "\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99" +
    "\032\uff99\067\uff99\070\uff99\001\002\000\032\004\uff98\013" +
    "\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\067\uff98\070\uff98\001\002\000\032\004" +
    "\115\013\101\023\047\024\072\025\067\026\114\027\126" +
    "\030\052\031\100\032\116\067\124\070\121\001\002\000" +
    "\032\004\uff9a\013\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\067\uff9a\070\uff9a\001" +
    "\002\000\032\004\uff96\013\uff96\023\uff96\024\uff96\025\uff96" +
    "\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\067\uff96\070" +
    "\uff96\001\002\000\032\004\uff97\013\uff97\023\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\067" +
    "\uff97\070\uff97\001\002\000\100\004\uff9c\005\uff9c\006\uff9c" +
    "\010\uff9c\012\uff9c\013\uff9c\015\uff9c\016\uff9c\017\uff9c\020" +
    "\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\046\uff9c\047\uff9c" +
    "\067\uff9c\070\uff9c\001\002\000\056\004\115\006\uffd4\010" +
    "\077\013\101\023\047\024\072\025\067\026\114\027\126" +
    "\030\052\031\100\032\116\034\122\035\061\036\075\037" +
    "\070\040\076\041\053\046\217\047\215\067\124\070\121" +
    "\001\002\000\056\004\uffcd\006\uffcd\010\uffcd\013\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\046\uffcd\047\uffcd\067\uffcd\070\uffcd\001\002\000\004" +
    "\016\223\001\002\000\056\004\uffcf\006\uffcf\010\uffcf\013" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\046\uffcf\047\uffcf\067\uffcf\070\uffcf\001\002" +
    "\000\004\016\222\001\002\000\056\004\uffce\006\uffce\010" +
    "\uffce\013\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\046\uffce\047\uffce\067\uffce\070\uffce" +
    "\001\002\000\056\004\uffd0\006\uffd0\010\uffd0\013\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\046\uffd0\047\uffd0\067\uffd0\070\uffd0\001\002\000\056" +
    "\004\uffcb\006\uffcb\010\uffcb\013\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\046\uffcb\047" +
    "\uffcb\067\uffcb\070\uffcb\001\002\000\056\004\uffcc\006\uffcc" +
    "\010\uffcc\013\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\046\uffcc\047\uffcc\067\uffcc\070" +
    "\uffcc\001\002\000\056\004\uffc5\006\uffc5\010\uffc5\013\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\046\uffc5\047\uffc5\067\uffc5\070\uffc5\001\002\000" +
    "\004\012\226\001\002\000\156\004\uffc2\005\uffc2\006\uffc2" +
    "\010\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\046\uffc2" +
    "\047\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2" +
    "\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073" +
    "\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\001\002" +
    "\000\100\004\uff94\005\uff94\006\uff94\010\uff94\012\uff94\013" +
    "\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94" +
    "\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031" +
    "\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94" +
    "\040\uff94\041\uff94\046\uff94\047\uff94\067\uff94\070\uff94\001" +
    "\002\000\002\001\002\000\004\012\232\001\002\000\004" +
    "\007\233\001\002\000\004\044\234\001\002\000\022\023" +
    "\047\024\072\025\067\026\114\027\126\030\052\031\100" +
    "\032\116\001\002\000\004\006\270\001\002\000\010\006" +
    "\uff7f\044\234\045\uff7f\001\002\000\010\006\uff7f\044\234" +
    "\045\uff7f\001\002\000\006\006\uff7c\045\242\001\002\000" +
    "\004\006\uff81\001\002\000\004\011\243\001\002\000\066" +
    "\004\115\010\077\013\101\017\011\020\012\021\013\022" +
    "\004\023\047\024\072\025\067\026\114\027\126\030\052" +
    "\031\100\032\116\033\005\034\122\035\061\036\075\037" +
    "\070\040\076\041\053\046\250\047\245\067\124\070\121" +
    "\001\002\000\070\004\uff87\006\uff87\010\uff87\013\uff87\017" +
    "\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87" +
    "\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034" +
    "\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\046\uff87" +
    "\047\uff87\067\uff87\070\uff87\001\002\000\004\016\266\001" +
    "\002\000\070\004\uff89\006\uff89\010\uff89\013\uff89\017\uff89" +
    "\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89\026" +
    "\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89" +
    "\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\046\uff89\047" +
    "\uff89\067\uff89\070\uff89\001\002\000\066\004\115\010\077" +
    "\013\101\017\011\020\012\021\013\022\004\023\047\024" +
    "\072\025\067\026\114\027\126\030\052\031\100\032\116" +
    "\033\005\034\122\035\061\036\075\037\070\040\076\041" +
    "\053\046\260\047\256\067\124\070\121\001\002\000\004" +
    "\016\254\001\002\000\070\004\uff84\006\uff84\010\uff84\013" +
    "\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84" +
    "\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033" +
    "\uff84\034\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84" +
    "\046\uff84\047\uff84\067\uff84\070\uff84\001\002\000\070\004" +
    "\uff88\006\uff88\010\uff88\013\uff88\017\uff88\020\uff88\021\uff88" +
    "\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030" +
    "\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88" +
    "\037\uff88\040\uff88\041\uff88\046\uff88\047\uff88\067\uff88\070" +
    "\uff88\001\002\000\070\004\uff8a\006\uff8a\010\uff8a\013\uff8a" +
    "\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025" +
    "\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a" +
    "\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\046" +
    "\uff8a\047\uff8a\067\uff8a\070\uff8a\001\002\000\070\004\uff85" +
    "\006\uff85\010\uff85\013\uff85\017\uff85\020\uff85\021\uff85\022" +
    "\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85" +
    "\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037" +
    "\uff85\040\uff85\041\uff85\046\uff85\047\uff85\067\uff85\070\uff85" +
    "\001\002\000\070\004\uff8e\006\uff8e\010\uff8e\013\uff8e\017" +
    "\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e" +
    "\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034" +
    "\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\046\uff8e" +
    "\047\uff8e\067\uff8e\070\uff8e\001\002\000\004\016\265\001" +
    "\002\000\070\004\uff90\006\uff90\010\uff90\013\uff90\017\uff90" +
    "\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026" +
    "\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90" +
    "\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\046\uff90\047" +
    "\uff90\067\uff90\070\uff90\001\002\000\004\016\264\001\002" +
    "\000\070\004\uff8b\006\uff8b\010\uff8b\013\uff8b\017\uff8b\020" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b" +
    "\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035" +
    "\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\046\uff8b\047\uff8b" +
    "\067\uff8b\070\uff8b\001\002\000\070\004\uff8f\006\uff8f\010" +
    "\uff8f\013\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f" +
    "\041\uff8f\046\uff8f\047\uff8f\067\uff8f\070\uff8f\001\002\000" +
    "\070\004\uff91\006\uff91\010\uff91\013\uff91\017\uff91\020\uff91" +
    "\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027" +
    "\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91" +
    "\036\uff91\037\uff91\040\uff91\041\uff91\046\uff91\047\uff91\067" +
    "\uff91\070\uff91\001\002\000\070\004\uff8c\006\uff8c\010\uff8c" +
    "\013\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c" +
    "\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\046\uff8c\047\uff8c\067\uff8c\070\uff8c\001\002\000\070" +
    "\004\uff8d\006\uff7d\010\uff8d\013\uff8d\017\uff8d\020\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d" +
    "\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036" +
    "\uff8d\037\uff8d\040\uff8d\041\uff8d\046\uff8d\047\uff8d\067\uff8d" +
    "\070\uff8d\001\002\000\070\004\uff86\006\uff86\010\uff86\013" +
    "\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86" +
    "\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033" +
    "\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86" +
    "\046\uff86\047\uff86\067\uff86\070\uff86\001\002\000\006\006" +
    "\uff80\045\uff80\001\002\000\070\004\uff82\006\uff82\010\uff82" +
    "\013\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024" +
    "\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82" +
    "\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041" +
    "\uff82\046\uff82\047\uff82\067\uff82\070\uff82\001\002\000\004" +
    "\011\272\001\002\000\066\004\115\010\077\013\101\017" +
    "\011\020\012\021\013\022\004\023\047\024\072\025\067" +
    "\026\114\027\126\030\052\031\100\032\116\033\005\034" +
    "\122\035\061\036\075\037\070\040\076\041\053\046\250" +
    "\047\245\067\124\070\121\001\002\000\066\004\115\010" +
    "\077\013\101\017\011\020\012\021\013\022\004\023\047" +
    "\024\072\025\067\026\114\027\126\030\052\031\100\032" +
    "\116\033\005\034\122\035\061\036\075\037\070\040\076" +
    "\041\053\046\260\047\274\067\124\070\121\001\002\000" +
    "\004\016\275\001\002\000\074\004\uff8d\006\uff7e\010\uff8d" +
    "\013\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024" +
    "\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d" +
    "\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041" +
    "\uff8d\044\uff7e\045\uff7e\046\uff8d\047\uff8d\067\uff8d\070\uff8d" +
    "\001\002\000\012\017\011\020\012\021\013\022\004\001" +
    "\002\000\004\016\307\001\002\000\004\012\301\001\002" +
    "\000\004\007\302\001\002\000\066\004\115\010\077\013" +
    "\101\017\011\020\012\021\013\022\004\023\047\024\072" +
    "\025\067\026\114\027\126\030\052\031\100\032\116\033" +
    "\005\034\122\035\061\036\075\037\070\040\076\041\053" +
    "\046\250\047\245\067\124\070\121\001\002\000\070\004" +
    "\115\006\305\010\077\013\101\017\011\020\012\021\013" +
    "\022\004\023\047\024\072\025\067\026\114\027\126\030" +
    "\052\031\100\032\116\033\005\034\122\035\061\036\075" +
    "\037\070\040\076\041\053\046\260\047\304\067\124\070" +
    "\121\001\002\000\004\016\306\001\002\000\070\004\uff93" +
    "\006\uff93\010\uff93\013\uff93\017\uff93\020\uff93\021\uff93\022" +
    "\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93" +
    "\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037" +
    "\uff93\040\uff93\041\uff93\046\uff93\047\uff93\067\uff93\070\uff93" +
    "\001\002\000\070\004\uff8d\006\uff8d\010\uff8d\013\uff8d\017" +
    "\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d" +
    "\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034" +
    "\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\046\uff8d" +
    "\047\uff8d\067\uff8d\070\uff8d\001\002\000\034\004\115\010" +
    "\077\013\101\023\047\024\072\025\067\026\114\027\126" +
    "\030\052\031\100\032\116\067\124\070\121\001\002\000" +
    "\004\016\311\001\002\000\034\004\115\010\077\013\101" +
    "\023\047\024\072\025\067\026\114\027\126\030\052\031" +
    "\100\032\116\067\124\070\121\001\002\000\004\012\uff92" +
    "\001\002\000\070\004\uff78\006\uff78\010\uff78\013\uff78\017" +
    "\uff78\020\uff78\021\uff78\022\uff78\023\uff78\024\uff78\025\uff78" +
    "\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034" +
    "\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041\uff78\046\uff78" +
    "\047\uff78\067\uff78\070\uff78\001\002\000\006\007\315\041" +
    "\053\001\002\000\066\004\115\010\077\013\101\017\011" +
    "\020\012\021\013\022\004\023\047\024\072\025\067\026" +
    "\114\027\126\030\052\031\100\032\116\033\005\034\122" +
    "\035\061\036\075\037\070\040\076\041\053\046\250\047" +
    "\245\067\124\070\121\001\002\000\070\004\uff79\006\uff79" +
    "\010\uff79\013\uff79\017\uff79\020\uff79\021\uff79\022\uff79\023" +
    "\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79" +
    "\032\uff79\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040" +
    "\uff79\041\uff79\046\uff79\047\uff79\067\uff79\070\uff79\001\002" +
    "\000\070\004\115\006\320\010\077\013\101\017\011\020" +
    "\012\021\013\022\004\023\047\024\072\025\067\026\114" +
    "\027\126\030\052\031\100\032\116\033\005\034\122\035" +
    "\061\036\075\037\070\040\076\041\053\046\260\047\304" +
    "\067\124\070\121\001\002\000\070\004\uff7a\006\uff7a\010" +
    "\uff7a\013\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a" +
    "\024\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032" +
    "\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a" +
    "\041\uff7a\046\uff7a\047\uff7a\067\uff7a\070\uff7a\001\002\000" +
    "\034\004\115\010\077\013\101\023\047\024\072\025\067" +
    "\026\114\027\126\030\052\031\100\032\116\067\124\070" +
    "\121\001\002\000\004\012\323\001\002\000\004\007\324" +
    "\001\002\000\066\004\115\010\077\013\101\017\011\020" +
    "\012\021\013\022\004\023\047\024\072\025\067\026\114" +
    "\027\126\030\052\031\100\032\116\033\005\034\122\035" +
    "\061\036\075\037\070\040\076\041\053\046\250\047\245" +
    "\067\124\070\121\001\002\000\070\004\115\006\326\010" +
    "\077\013\101\017\011\020\012\021\013\022\004\023\047" +
    "\024\072\025\067\026\114\027\126\030\052\031\100\032" +
    "\116\033\005\034\122\035\061\036\075\037\070\040\076" +
    "\041\053\046\260\047\304\067\124\070\121\001\002\000" +
    "\070\004\uff83\006\uff83\010\uff83\013\uff83\017\uff83\020\uff83" +
    "\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027" +
    "\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83" +
    "\036\uff83\037\uff83\040\uff83\041\uff83\046\uff83\047\uff83\067" +
    "\uff83\070\uff83\001\002\000\032\004\115\013\101\023\047" +
    "\024\072\025\067\026\114\027\126\030\052\031\100\032" +
    "\116\067\124\070\121\001\002\000\104\004\uff9e\005\uff9e" +
    "\006\uff9e\010\uff9e\012\uff9e\013\uff9e\015\uff9e\016\uff9e\017" +
    "\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e" +
    "\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034" +
    "\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\046\uff9e" +
    "\047\uff9e\057\uff9e\060\127\067\uff9e\070\uff9e\001\002\000" +
    "\006\004\333\012\uffdb\001\002\000\004\012\334\001\002" +
    "\000\004\012\uffdc\001\002\000\004\016\335\001\002\000" +
    "\070\004\uffdd\006\uffdd\010\uffdd\013\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\046\uffdd\047\uffdd\067" +
    "\uffdd\070\uffdd\001\002\000\056\004\uffc6\006\uffc6\010\uffc6" +
    "\013\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\046\uffc6\047\uffc6\067\uffc6\070\uffc6\001" +
    "\002\000\016\002\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\043\uffda\001\002\000\002\001\002\000\004\012\342\001" +
    "\002\000\004\007\343\001\002\000\066\004\115\010\077" +
    "\013\101\017\011\020\012\021\013\022\004\023\047\024" +
    "\072\025\067\026\114\027\126\030\052\031\100\032\116" +
    "\033\005\034\122\035\061\036\075\037\070\040\076\041" +
    "\053\046\250\047\245\067\124\070\121\001\002\000\070" +
    "\004\115\006\345\010\077\013\101\017\011\020\012\021" +
    "\013\022\004\023\047\024\072\025\067\026\114\027\126" +
    "\030\052\031\100\032\116\033\005\034\122\035\061\036" +
    "\075\037\070\040\076\041\053\046\260\047\304\067\124" +
    "\070\121\001\002\000\072\004\uff7b\006\uff7b\010\uff7b\013" +
    "\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b" +
    "\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033" +
    "\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b" +
    "\042\uff7b\046\uff7b\047\uff7b\067\uff7b\070\uff7b\001\002\000" +
    "\010\005\ufff2\016\ufff2\051\354\001\002\000\006\005\ufff4" +
    "\016\ufff4\001\002\000\006\005\352\016\351\001\002\000" +
    "\020\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\033\ufff9" +
    "\043\ufff9\001\002\000\006\004\026\013\027\001\002\000" +
    "\006\005\ufff3\016\ufff3\001\002\000\032\004\115\013\101" +
    "\023\047\024\072\025\067\026\114\027\126\030\052\031" +
    "\100\032\116\067\124\070\121\001\002\000\006\005\ufff0" +
    "\016\ufff0\001\002\000\006\005\ufff1\016\ufff1\001\002\000" +
    "\034\004\115\010\077\013\101\023\047\024\072\025\067" +
    "\026\114\027\126\030\052\031\100\032\116\067\124\070" +
    "\121\001\002\000\156\004\uffbc\005\uffbc\006\uffbc\010\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\046\uffbc\047\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\066\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074" +
    "\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\001\002\000\034" +
    "\004\115\012\365\013\101\023\047\024\072\025\067\026" +
    "\114\027\126\030\052\031\100\032\116\067\124\070\121" +
    "\001\002\000\156\004\uffbd\005\uffbd\006\uffbd\010\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\046\uffbd\047\uffbd\051" +
    "\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066" +
    "\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd" +
    "\075\uffbd\076\uffbd\077\uffbd\100\uffbd\001\002\000\006\005" +
    "\uffbb\012\uffbb\001\002\000\006\005\367\012\366\001\002" +
    "\000\156\004\uffbf\005\uffbf\006\uffbf\010\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\046\uffbf\047\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067" +
    "\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf" +
    "\076\uffbf\077\uffbf\100\uffbf\001\002\000\156\004\uffbe\005" +
    "\uffbe\006\uffbe\010\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063" +
    "\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe" +
    "\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100" +
    "\uffbe\001\002\000\032\004\115\013\101\023\047\024\072" +
    "\025\067\026\114\027\126\030\052\031\100\032\116\067" +
    "\124\070\121\001\002\000\006\005\uffba\012\uffba\001\002" +
    "\000\004\015\372\001\002\000\156\004\uffc0\005\uffc0\006" +
    "\uffc0\010\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\046" +
    "\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064" +
    "\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0" +
    "\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\001" +
    "\002\000\006\004\026\013\027\001\002\000\004\013\375" +
    "\001\002\000\014\012\uffd7\017\011\020\012\021\013\022" +
    "\004\001\002\000\004\012\377\001\002\000\004\007\u0100" +
    "\001\002\000\066\004\115\010\077\013\101\017\011\020" +
    "\012\021\013\022\004\023\047\024\072\025\067\026\114" +
    "\027\126\030\052\031\100\032\116\033\005\034\122\035" +
    "\061\036\075\037\070\040\076\041\053\046\104\047\057" +
    "\067\124\070\121\001\002\000\004\006\u0102\001\002\000" +
    "\016\002\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\043\uffd9" +
    "\001\002\000\012\005\ufff2\013\032\016\ufff2\051\354\001" +
    "\002\000\004\002\001\001\002\000\006\004\026\013\027" +
    "\001\002\000\006\005\u010c\016\u010b\001\002\000\004\051" +
    "\u0109\001\002\000\006\005\uffec\016\uffec\001\002\000\032" +
    "\004\115\013\101\023\047\024\072\025\067\026\114\027" +
    "\126\030\052\031\100\032\116\067\124\070\121\001\002" +
    "\000\006\005\uffea\016\uffea\001\002\000\016\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\033\uffed\043\uffed\001\002\000\006" +
    "\004\026\013\027\001\002\000\006\005\uffeb\016\uffeb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\022\002\007\010\006\012\013\013\014\016" +
    "\015\025\017\102\020\103\005\001\001\000\002\001\001" +
    "\000\004\013\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\347\077" +
    "\u0102\101\346\001\001\000\002\001\001\000\004\013\372" +
    "\001\001\000\010\010\022\013\023\025\017\001\001\000" +
    "\020\010\006\012\013\013\014\016\015\025\017\102\020" +
    "\103\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\077\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\077\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\033\027\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\035\001\001\000\002\001" +
    "\001\000\004\013\037\001\001\000\002\001\001\000\004" +
    "\030\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\012\111\013\050\016\112\017\106\020\057\023\107" +
    "\031\054\032\104\035\055\040\110\041\101\046\072\050" +
    "\044\051\064\053\063\054\122\056\070\057\065\060\124" +
    "\061\073\062\117\063\053\064\102\065\061\066\116\067" +
    "\062\070\105\072\047\073\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\347\077\345\101\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\017" +
    "\106\020\213\023\217\035\055\040\110\041\101\046\072" +
    "\050\044\051\215\054\220\056\070\057\065\060\124\061" +
    "\073\062\117\063\053\064\102\065\061\066\116\067\062" +
    "\070\105\072\047\073\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\017\106\056\226\057\065\060\124\061\073\062\117\063" +
    "\053\064\102\065\061\066\116\067\062\070\105\072\047" +
    "\073\045\001\001\000\002\001\001\000\040\017\106\054" +
    "\224\056\070\057\065\060\124\061\073\062\117\063\053" +
    "\064\102\065\061\066\116\067\062\070\105\072\047\073" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\017\106\020\057\023\107\035\055\040" +
    "\110\041\101\046\072\050\044\051\064\053\212\054\122" +
    "\056\070\057\065\060\124\061\073\062\117\063\053\064" +
    "\102\065\061\066\116\067\062\070\105\072\047\073\045" +
    "\001\001\000\004\055\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\111\013\050" +
    "\016\112\032\201\001\001\000\012\012\111\013\050\016" +
    "\112\032\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\106\070\177\072\047\073\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\106\070\165\072" +
    "\047\073\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\017\106\061\127\062\117\063\053\064\102\065" +
    "\061\066\116\067\062\070\130\072\047\073\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\017\106\062" +
    "\132\063\053\064\102\065\061\066\116\067\062\070\130" +
    "\072\047\073\045\001\001\000\002\001\001\000\024\017" +
    "\106\063\134\064\102\065\061\066\116\067\062\070\130" +
    "\072\047\073\045\001\001\000\002\001\001\000\022\017" +
    "\106\064\136\065\061\066\116\067\062\070\130\072\047" +
    "\073\045\001\001\000\002\001\001\000\020\017\106\065" +
    "\164\066\116\067\062\070\130\072\047\073\045\001\001" +
    "\000\020\017\106\065\141\066\116\067\062\070\130\072" +
    "\047\073\045\001\001\000\002\001\001\000\016\017\106" +
    "\066\163\067\062\070\130\072\047\073\045\001\001\000" +
    "\016\017\106\066\162\067\062\070\130\072\047\073\045" +
    "\001\001\000\016\017\106\066\161\067\062\070\130\072" +
    "\047\073\045\001\001\000\016\017\106\066\146\067\062" +
    "\070\130\072\047\073\045\001\001\000\002\001\001\000" +
    "\014\017\106\067\160\070\130\072\047\073\045\001\001" +
    "\000\014\017\106\067\151\070\130\072\047\073\045\001" +
    "\001\000\002\001\001\000\012\017\106\070\157\072\047" +
    "\073\045\001\001\000\012\017\106\070\156\072\047\073" +
    "\045\001\001\000\012\017\106\070\155\072\047\073\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\017\106\021\167\054\170\056\070\057\065\060\124" +
    "\061\073\062\117\063\053\064\102\065\061\066\116\067" +
    "\062\070\105\072\047\073\045\001\001\000\002\001\001" +
    "\000\004\022\171\001\001\000\002\001\001\000\040\017" +
    "\106\054\173\056\070\057\065\060\124\061\073\062\117" +
    "\063\053\064\102\065\061\066\116\067\062\070\105\072" +
    "\047\073\045\001\001\000\004\022\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\017\106\056" +
    "\211\057\065\060\124\061\073\062\117\063\053\064\102" +
    "\065\061\066\116\067\062\070\105\072\047\073\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\017\106\020\213\023\217\035" +
    "\055\040\110\041\101\046\072\050\044\051\215\054\220" +
    "\056\070\057\065\060\124\061\073\062\117\063\053\064" +
    "\102\065\061\066\116\067\062\070\105\072\047\073\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\042\234\044\235\001\001\000\004\017\270\001\001" +
    "\000\002\001\001\000\006\043\237\044\236\001\001\000" +
    "\006\043\266\044\236\001\001\000\004\045\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\072\012\111\013" +
    "\050\016\112\017\106\020\243\023\251\032\250\035\055" +
    "\037\246\040\110\041\101\046\072\050\044\051\245\054" +
    "\252\056\070\057\065\060\124\061\073\062\117\063\053" +
    "\064\102\065\061\066\116\067\062\070\105\072\047\073" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\012\111\013\050\016\112\017\106\020" +
    "\254\023\261\032\260\035\055\040\110\041\101\046\072" +
    "\050\044\051\256\054\262\056\070\057\065\060\124\061" +
    "\073\062\117\063\053\064\102\065\061\066\116\067\062" +
    "\070\105\072\047\073\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\072\012\111\013\050\016\112\017\106\020" +
    "\243\023\251\032\250\035\055\037\272\040\110\041\101" +
    "\046\072\050\044\051\245\054\252\056\070\057\065\060" +
    "\124\061\073\062\117\063\053\064\102\065\061\066\116" +
    "\067\062\070\105\072\047\073\045\001\001\000\070\012" +
    "\111\013\050\016\112\017\106\020\254\023\261\032\260" +
    "\035\055\040\110\041\101\046\072\050\044\051\256\054" +
    "\262\056\070\057\065\060\124\061\073\062\117\063\053" +
    "\064\102\065\061\066\116\067\062\070\105\072\047\073" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\276\013\050\036\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\072\012\111\013\050" +
    "\016\112\017\106\020\243\023\251\032\250\035\055\037" +
    "\302\040\110\041\101\046\072\050\044\051\245\054\252" +
    "\056\070\057\065\060\124\061\073\062\117\063\053\064" +
    "\102\065\061\066\116\067\062\070\105\072\047\073\045" +
    "\001\001\000\070\012\111\013\050\016\112\017\106\020" +
    "\254\023\261\032\260\035\055\040\110\041\101\046\072" +
    "\050\044\051\256\054\262\056\070\057\065\060\124\061" +
    "\073\062\117\063\053\064\102\065\061\066\116\067\062" +
    "\070\105\072\047\073\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\017\106\054\307" +
    "\056\070\057\065\060\124\061\073\062\117\063\053\064" +
    "\102\065\061\066\116\067\062\070\105\072\047\073\045" +
    "\001\001\000\002\001\001\000\040\017\106\054\311\056" +
    "\070\057\065\060\124\061\073\062\117\063\053\064\102" +
    "\065\061\066\116\067\062\070\105\072\047\073\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\315" +
    "\001\001\000\072\012\111\013\050\016\112\017\106\020" +
    "\243\023\251\032\250\035\055\037\316\040\110\041\101" +
    "\046\072\050\044\051\245\054\252\056\070\057\065\060" +
    "\124\061\073\062\117\063\053\064\102\065\061\066\116" +
    "\067\062\070\105\072\047\073\045\001\001\000\002\001" +
    "\001\000\070\012\111\013\050\016\112\017\106\020\254" +
    "\023\261\032\260\035\055\040\110\041\101\046\072\050" +
    "\044\051\256\054\262\056\070\057\065\060\124\061\073" +
    "\062\117\063\053\064\102\065\061\066\116\067\062\070" +
    "\105\072\047\073\045\001\001\000\002\001\001\000\040" +
    "\017\106\054\321\056\070\057\065\060\124\061\073\062" +
    "\117\063\053\064\102\065\061\066\116\067\062\070\105" +
    "\072\047\073\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\072\012\111\013\050\016\112\017\106\020\243" +
    "\023\251\032\250\035\055\037\324\040\110\041\101\046" +
    "\072\050\044\051\245\054\252\056\070\057\065\060\124" +
    "\061\073\062\117\063\053\064\102\065\061\066\116\067" +
    "\062\070\105\072\047\073\045\001\001\000\070\012\111" +
    "\013\050\016\112\017\106\020\254\023\261\032\260\035" +
    "\055\040\110\041\101\046\072\050\044\051\256\054\262" +
    "\056\070\057\065\060\124\061\073\062\117\063\053\064" +
    "\102\065\061\066\116\067\062\070\105\072\047\073\045" +
    "\001\001\000\002\001\001\000\032\017\106\060\327\061" +
    "\073\062\117\063\053\064\102\065\061\066\116\067\062" +
    "\070\130\072\047\073\045\001\001\000\002\001\001\000" +
    "\004\024\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\012\111\013\050\016\112\017" +
    "\106\020\243\023\251\032\250\035\055\037\343\040\110" +
    "\041\101\046\072\050\044\051\245\054\252\056\070\057" +
    "\065\060\124\061\073\062\117\063\053\064\102\065\061" +
    "\066\116\067\062\070\105\072\047\073\045\001\001\000" +
    "\070\012\111\013\050\016\112\017\106\020\254\023\261" +
    "\032\260\035\055\040\110\041\101\046\072\050\044\051" +
    "\256\054\262\056\070\057\065\060\124\061\073\062\117" +
    "\063\053\064\102\065\061\066\116\067\062\070\105\072" +
    "\047\073\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\077\345\101\352\001\001\000\002\001\001\000\040" +
    "\017\106\056\354\057\065\060\124\061\073\062\117\063" +
    "\053\064\102\065\061\066\116\067\062\070\105\072\047" +
    "\073\045\100\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\017\106\054\370\056\070\057\065\060\124" +
    "\061\073\062\117\063\053\064\102\065\061\066\116\067" +
    "\062\070\105\072\047\073\045\001\001\000\002\001\001" +
    "\000\040\017\106\056\362\057\065\060\124\061\073\062" +
    "\117\063\053\064\102\065\061\066\116\067\062\070\105" +
    "\071\363\072\047\073\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\017\106\056\367\057\065\060\124\061" +
    "\073\062\117\063\053\064\102\065\061\066\116\067\062" +
    "\070\105\072\047\073\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\373\001\001" +
    "\000\002\001\001\000\006\013\033\027\375\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\012\111\013\050" +
    "\016\112\017\106\020\057\023\107\031\u0100\032\104\035" +
    "\055\040\110\041\101\046\072\050\044\051\064\053\063" +
    "\054\122\056\070\057\065\060\124\061\073\062\117\063" +
    "\053\064\102\065\061\066\116\067\062\070\105\072\047" +
    "\073\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\077\u0106\104\u0107" +
    "\105\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\017\106\056\354\057\065\060\124" +
    "\061\073\062\117\063\053\064\102\065\061\066\116\067" +
    "\062\070\105\072\047\073\045\100\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\077\u0106\104\u010c\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ESTRUCTURACONTROL ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURACONTROL",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ESTRUCTURACONTROL ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURACONTROL",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ESTRUCTURACONTROL ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURACONTROL",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ESTRUCTURACONTROL ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURACONTROL",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ESTRUCTURACONTROL ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURACONTROL",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // IF_ELSE ::= IF ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ELSE ::= Else IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ELSE ::= Else OperadorCorcheteIz CUERPOFOR OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // IF ::= If OperadorParentesisIz EXPBOOLEANA OperadorParentesisDer OperadorCorcheteIz CUERPOFOR OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DEFAULT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DEFAULT ::= Default OperadorDoblePunto CUERPOFOR Break OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CASE ::= Case LITERAL OperadorDoblePunto CUERPOFOR Break OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CUERPOSWITCHLISTA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCHLISTA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CUERPOSWITCHLISTA ::= CASE CUERPOSWITCHLISTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCHLISTA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CUERPOSWITCH ::= CASE CUERPOSWITCHLISTA DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOSWITCH",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SWITCH ::= Switch OperadorParentesisIz EXPARITMETRICA OperadorParentesisDer OperadorCorcheteIz CUERPOSWITCH OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // WHILE ::= While OperadorParentesisIz EXPRESION OperadorParentesisDer OperadorCorcheteIz CUERPOFOR OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CUERPOFOR ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CUERPOFOR ::= Continue OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CUERPOFOR ::= Break OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CUERPOFOR ::= WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CUERPOFOR ::= READ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CUERPOFOR ::= ESTRUCTURACONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CUERPOFOR ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CUERPOFOR ::= CUERPOFOR DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CUERPOFOR ::= CUERPOFOR Continue OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CUERPOFOR ::= CUERPOFOR Break OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CUERPOFOR ::= CUERPOFOR WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CUERPOFOR ::= CUERPOFOR READ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CUERPOFOR ::= CUERPOFOR ESTRUCTURACONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CUERPOFOR ::= CUERPOFOR EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESIONESFOR ::= DECLARACIONVARIABLE OperadorPuntoComa EXPRESION OperadorPuntoComa EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONESFOR",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FOR ::= For OperadorParentesisIz EXPRESIONESFOR OperadorParentesisDer OperadorCorcheteIz CUERPOFOR OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= OperadorNegacion EXPRESIONASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= EXPRESIONASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPERADORASIGNACION ::= OperadorModIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPERADORASIGNACION ::= OperadorDivIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPERADORASIGNACION ::= OperadorMultiIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPERADORASIGNACION ::= OperadorMenosIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPERADORASIGNACION ::= OperadorMasIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPERADORASIGNACION ::= OperadorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORASIGNACION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESIONASIGNACION ::= EXPRESIONUNARIA OPERADORASIGNACION EXPRESIONASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONASIGNACION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESIONASIGNACION ::= LAZYOREXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONASIGNACION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LAZYOREXPRESION ::= LAZYOREXPRESION OperadorORLazy LAZYANDEXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LAZYOREXPRESION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LAZYOREXPRESION ::= LAZYANDEXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LAZYOREXPRESION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LAZYANDEXPRESION ::= LAZYANDEXPRESION OperadorANDLazy OREXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LAZYANDEXPRESION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LAZYANDEXPRESION ::= OREXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LAZYANDEXPRESION",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OREXPRESION ::= OREXPRESION OperadorOR XOREXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OREXPRESION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OREXPRESION ::= XOREXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OREXPRESION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // XOREXPRESION ::= XOREXPRESION OperadorXOR ANDEXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("XOREXPRESION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // XOREXPRESION ::= ANDEXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("XOREXPRESION",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ANDEXPRESION ::= ANDEXPRESION OperadorAND EXPRESIONIGUALDAD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANDEXPRESION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ANDEXPRESION ::= EXPRESIONIGUALDAD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANDEXPRESION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESIONIGUALDAD ::= EXPRESIONIGUALDAD OperadorDesigual EXPRESIONRELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONIGUALDAD",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESIONIGUALDAD ::= EXPRESIONIGUALDAD OperadorIgualIgual EXPRESIONRELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONIGUALDAD",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESIONIGUALDAD ::= EXPRESIONRELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONIGUALDAD",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESIONRELACIONAL ::= EXPRESIONRELACIONAL OperadorMayorIgual EXPRESIONADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESIONRELACIONAL ::= EXPRESIONRELACIONAL OperadorMenorIgual EXPRESIONADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESIONRELACIONAL ::= EXPRESIONRELACIONAL OperadorMayor EXPRESIONADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESIONRELACIONAL ::= EXPRESIONRELACIONAL OperadorMenor EXPRESIONADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESIONRELACIONAL ::= EXPRESIONADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONRELACIONAL",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESIONADITIVA ::= EXPRESIONADITIVA OperadorMenos EXPRESIONMULTIPLICATIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONADITIVA",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESIONADITIVA ::= EXPRESIONADITIVA OperadorMas EXPRESIONMULTIPLICATIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONADITIVA",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESIONADITIVA ::= EXPRESIONMULTIPLICATIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONADITIVA",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESIONMULTIPLICATIVA ::= EXPRESIONMULTIPLICATIVA OperadorModulo EXPRESIONUNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONMULTIPLICATIVA",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESIONMULTIPLICATIVA ::= EXPRESIONMULTIPLICATIVA OperadorDivision EXPRESIONUNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONMULTIPLICATIVA",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESIONMULTIPLICATIVA ::= EXPRESIONMULTIPLICATIVA OperadorMultiplicacion EXPRESIONUNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONMULTIPLICATIVA",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESIONMULTIPLICATIVA ::= EXPRESIONUNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONMULTIPLICATIVA",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESIONUNARIA ::= OperadorDecremental EXPRESIONUNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONUNARIA",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESIONUNARIA ::= OperadorIncremental EXPRESIONUNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONUNARIA",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESIONUNARIA ::= EXPRESIONPOSTFIJA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONUNARIA",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTAARGUMENTOSEXPRESIONES ::= LISTAARGUMENTOSEXPRESIONES OperadorComa EXPRESIONASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAARGUMENTOSEXPRESIONES",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTAARGUMENTOSEXPRESIONES ::= EXPRESIONASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAARGUMENTOSEXPRESIONES",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESIONPOSTFIJA ::= EXPRESIONPOSTFIJA OperadorDecremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONPOSTFIJA",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESIONPOSTFIJA ::= EXPRESIONPOSTFIJA OperadorIncremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONPOSTFIJA",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESIONPOSTFIJA ::= EXPRESIONPOSTFIJA OperadorParentesisIz LISTAARGUMENTOSEXPRESIONES OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONPOSTFIJA",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESIONPOSTFIJA ::= EXPRESIONPOSTFIJA OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONPOSTFIJA",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESIONPOSTFIJA ::= EXPRESIONPOSTFIJA OperadorParCuadradoIz EXPRESION OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONPOSTFIJA",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESIONPOSTFIJA ::= EXPRESIONPRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONPOSTFIJA",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESIONPRIMARIA ::= OperadorParentesisIz EXPRESION OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONPRIMARIA",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESIONPRIMARIA ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONPRIMARIA",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESIONPRIMARIA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESIONPRIMARIA",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CUERPOFUNCION ::= Continue OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFUNCION",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CUERPOFUNCION ::= Break OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFUNCION",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CUERPOFUNCION ::= WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFUNCION",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CUERPOFUNCION ::= READ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFUNCION",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CUERPOFUNCION ::= ESTRUCTURACONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFUNCION",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CUERPOFUNCION ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFUNCION",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CUERPOFUNCION ::= CUERPOFUNCION Continue OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFUNCION",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CUERPOFUNCION ::= CUERPOFUNCION Break OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFUNCION",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CUERPOFUNCION ::= CUERPOFUNCION WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFUNCION",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUERPOFUNCION ::= CUERPOFUNCION READ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFUNCION",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUERPOFUNCION ::= CUERPOFUNCION ESTRUCTURACONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFUNCION",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CUERPOFUNCION ::= CUERPOFUNCION EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPOFUNCION",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= DECLARACIONCONSTANTE DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= DECLARACIONVARIABLE DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONTENIDOFUNCION ::= CUERPOFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDOFUNCION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONTENIDOFUNCION ::= DECLARACION CUERPOFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDOFUNCION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RESTOPARAMETROSFUNCION ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTOPARAMETROSFUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RESTOPARAMETROSFUNCION ::= OperadorComa TIPO Identificador RESTOPARAMETROSFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTOPARAMETROSFUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETROSFUNCION ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROSFUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETROSFUNCION ::= TIPO Identificador RESTOPARAMETROSFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROSFUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCION ::= Void TIPO DECLARADOR OperadorParentesisIz PARAMETROSFUNCION OperadorParentesisDer OperadorCorcheteIz CONTENIDOFUNCION OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCION ::= TIPO DECLARADOR OperadorParentesisIz PARAMETROSFUNCION OperadorParentesisDer OperadorCorcheteIz CONTENIDOFUNCION OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETROSREAD ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROSREAD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETROSREAD ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROSREAD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // READ ::= Read OperadorParentesisIz PARAMETROSREAD OperadorParentesisDer OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("READ",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RESTOPARAMETROSWRITE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTOPARAMETROSWRITE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RESTOPARAMETROSWRITE ::= OperadorComa EXPRESION RESTOPARAMETROSWRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTOPARAMETROSWRITE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETROSWRITE ::= EXPRESION RESTOPARAMETROSWRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROSWRITE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // WRITE ::= Write OperadorParentesisIz PARAMETROSWRITE OperadorParentesisDer OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LITERAL ::= Caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LITERAL ::= HexadecimalFlotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LITERAL ::= Hexadecimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LITERAL ::= OctalFlotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LITERAL ::= Octal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LITERAL ::= FlotanteExponente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LITERAL ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LITERAL ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARADORINICIALIZADORCONSTANTE ::= DECLARADOR OperadorIgual INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADORINICIALIZADORCONSTANTE",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTACONSTANTE ::= LISTACONSTANTE OperadorComa DECLARADORINICIALIZADORCONSTANTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTACONSTANTE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTACONSTANTE ::= DECLARADORINICIALIZADORCONSTANTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTACONSTANTE",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACIONCONSTANTE ::= Const TIPO LISTACONSTANTE OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONCONSTANTE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARADOR ::= OperadorParentesisIz DECLARADOR OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARADOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INICIALIZADOR ::= EXPRESIONASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARADORINICIALIZADOR ::= DECLARADOR OperadorIgual INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADORINICIALIZADOR",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARADORINICIALIZADOR ::= DECLARADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADORINICIALIZADOR",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA ::= LISTA OperadorComa DECLARADORINICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA ::= DECLARADORINICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO ::= Short 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= Long 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONVARIABLE ::= TIPO LISTA OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONVARIABLE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GLOBCONS ::= DECLARACIONCONSTANTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBCONS",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GLOBCONS ::= DECLARACIONVARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBCONS",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESTRUCTURA ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESTRUCTURA ::= GLOBCONS ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

