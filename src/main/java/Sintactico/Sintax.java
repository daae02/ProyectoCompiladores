
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 28 23:06:00 CST 2022
//----------------------------------------------------

package Sintactico;

import java_cup.runtime.Symbol;
import Semantico.PilaSemantica;
import Semantico.Traductor;
import Semantico.TablaSimbolos;
import static Sintactico.ListaErroresSintactico.errores;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 28 23:06:00 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\263\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\011\003\000\002\011\003\000\002\064\002" +
    "\000\002\005\007\000\002\065\002\000\002\066\002\000" +
    "\002\005\010\000\002\005\004\000\002\062\004\000\002" +
    "\062\004\000\002\062\003\000\002\067\002\000\002\063" +
    "\005\000\002\012\003\000\002\012\003\000\002\012\005" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\013\003\000\002\013" +
    "\006\000\002\013\005\000\002\013\006\000\002\013\004" +
    "\000\002\013\004\000\002\014\003\000\002\014\005\000" +
    "\002\015\003\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\016\003" +
    "\000\002\070\002\000\002\016\006\000\002\071\002\000" +
    "\002\016\006\000\002\072\002\000\002\016\006\000\002" +
    "\017\003\000\002\073\002\000\002\017\006\000\002\074" +
    "\002\000\002\017\006\000\002\020\003\000\002\075\002" +
    "\000\002\020\006\000\002\076\002\000\002\020\006\000" +
    "\002\077\002\000\002\020\006\000\002\100\002\000\002" +
    "\020\006\000\002\021\003\000\002\101\002\000\002\021" +
    "\006\000\002\102\002\000\002\021\006\000\002\022\003" +
    "\000\002\103\002\000\002\022\006\000\002\023\003\000" +
    "\002\104\002\000\002\023\006\000\002\024\003\000\002" +
    "\105\002\000\002\024\006\000\002\025\003\000\002\106" +
    "\002\000\002\025\006\000\002\026\003\000\002\107\002" +
    "\000\002\026\006\000\002\027\003\000\002\027\005\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\006" +
    "\003\000\002\006\005\000\002\006\004\000\002\004\004" +
    "\000\002\004\005\000\002\004\004\000\002\032\004\000" +
    "\002\032\003\000\002\032\003\000\002\032\004\000\002" +
    "\031\003\000\002\031\005\000\002\033\003\000\002\033" +
    "\005\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\035\004\000\002\035\003\000" +
    "\002\035\004\000\002\035\003\000\002\036\003\000\002" +
    "\007\003\000\002\007\005\000\002\007\006\000\002\007" +
    "\005\000\002\007\006\000\002\007\006\000\002\007\005" +
    "\000\002\037\003\000\002\040\003\000\002\040\005\000" +
    "\002\041\004\000\002\041\004\000\002\041\003\000\002" +
    "\042\003\000\002\042\005\000\002\043\003\000\002\043" +
    "\004\000\002\044\003\000\002\045\005\000\002\045\004" +
    "\000\002\045\005\000\002\045\005\000\002\045\006\000" +
    "\002\045\004\000\002\045\005\000\002\045\005\000\002" +
    "\045\006\000\002\010\003\000\002\010\005\000\002\010" +
    "\006\000\002\046\003\000\002\046\005\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\004\000\002\050\006\000\002\050\005\000\002\051" +
    "\004\000\002\051\005\000\002\051\005\000\002\051\006" +
    "\000\002\052\003\000\002\052\004\000\002\053\003\000" +
    "\002\053\004\000\002\054\003\000\002\054\004\000\002" +
    "\055\007\000\002\055\011\000\002\055\007\000\002\056" +
    "\007\000\002\056\010\000\002\056\011\000\002\057\004" +
    "\000\002\057\004\000\002\060\007\000\002\060\006\000" +
    "\002\060\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\020\003\017\017\014\020\015\021\016\022" +
    "\006\033\005\043\020\001\002\000\022\002\000\003\000" +
    "\017\000\020\000\021\000\022\000\033\000\043\000\001" +
    "\002\000\030\004\uff8e\005\uff8e\012\uff8e\013\uff8e\014\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\033\uff8e\001" +
    "\002\000\030\004\uff93\005\uff93\012\uff93\013\uff93\014\uff93" +
    "\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\033\uff93\001" +
    "\002\000\030\004\uff9c\005\uff9c\012\uff9c\013\uff9c\014\uff9c" +
    "\016\uff9c\017\014\020\015\021\016\022\006\033\005\001" +
    "\002\000\030\004\uff9d\005\uff9d\012\uff9d\013\uff9d\014\uff9d" +
    "\016\uff9d\017\014\020\015\021\016\022\006\033\005\001" +
    "\002\000\022\002\ufffe\003\ufffe\017\ufffe\020\ufffe\021\ufffe" +
    "\022\ufffe\033\ufffe\043\ufffe\001\002\000\022\002\u011b\003" +
    "\017\017\014\020\015\021\016\022\006\033\005\043\020" +
    "\001\002\000\010\004\u0116\013\206\016\202\001\002\000" +
    "\030\004\uff96\005\uff96\012\uff96\013\uff96\014\uff96\016\uff96" +
    "\017\uff96\020\uff96\021\uff96\022\uff96\033\uff96\001\002\000" +
    "\030\004\uff95\005\uff95\012\uff95\013\uff95\014\uff95\016\uff95" +
    "\017\uff95\020\uff95\021\uff95\022\uff95\033\uff95\001\002\000" +
    "\030\004\uff94\005\uff94\012\uff94\013\uff94\014\uff94\016\uff94" +
    "\017\uff94\020\uff94\021\uff94\022\uff94\033\uff94\001\002\000" +
    "\006\006\u0115\016\325\001\002\000\004\004\ufffa\001\002" +
    "\000\022\002\ufffd\003\ufffd\017\ufffd\020\ufffd\021\ufffd\022" +
    "\ufffd\033\ufffd\043\ufffd\001\002\000\004\004\023\001\002" +
    "\000\004\013\ufff9\001\002\000\004\013\025\001\002\000" +
    "\020\004\033\012\035\017\014\020\015\021\016\022\006" +
    "\033\005\001\002\000\006\005\224\012\035\001\002\000" +
    "\006\005\222\012\035\001\002\000\014\004\205\005\uff81" +
    "\012\uff81\013\u0102\014\376\001\002\000\022\002\ufff4\003" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\033\ufff4\043\ufff4" +
    "\001\002\000\022\002\ufff8\003\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\033\ufff8\043\ufff8\001\002\000\006\005\uff80" +
    "\012\uff80\001\002\000\006\005\uff85\012\uff85\001\002\000" +
    "\004\007\ufff3\001\002\000\004\007\040\001\002\000\022" +
    "\002\ufff2\003\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\033" +
    "\ufff2\043\ufff2\001\002\000\112\003\072\004\114\006\132" +
    "\007\040\010\074\013\076\016\120\017\014\020\015\021" +
    "\016\022\006\023\041\024\064\025\063\026\115\027\130" +
    "\030\043\031\075\032\116\033\005\034\121\035\052\036" +
    "\065\037\062\040\073\041\044\044\104\045\047\046\102" +
    "\047\053\062\055\066\125\067\117\070\051\071\126\072" +
    "\122\001\002\000\102\005\uffee\006\uffee\011\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\050\uffee\051\uffee\052" +
    "\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee" +
    "\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067" +
    "\uffee\070\uffee\071\uffee\072\uffee\073\uffee\074\uffee\075\uffee" +
    "\076\uffee\077\uffee\001\002\000\044\004\114\010\137\013" +
    "\076\023\041\024\064\025\063\026\115\027\130\030\043" +
    "\031\075\032\116\062\055\066\125\067\117\070\051\071" +
    "\126\072\122\001\002\000\102\005\uffe9\006\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\050\uffe9\051" +
    "\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066" +
    "\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9" +
    "\075\uffe9\076\uffe9\077\uffe9\001\002\000\004\013\367\001" +
    "\002\000\022\005\uffaf\006\uffaf\011\uffaf\012\uffaf\015\uffaf" +
    "\016\uffaf\056\uffaf\057\234\001\002\000\100\003\uff5d\004" +
    "\uff5d\006\uff5d\007\uff5d\010\uff5d\013\uff5d\016\uff5d\023\uff5d" +
    "\024\uff5d\025\uff5d\026\uff5d\027\uff5d\030\uff5d\031\uff5d\032" +
    "\uff5d\034\uff5d\035\uff5d\036\uff5d\037\uff5d\040\uff5d\041\uff5d" +
    "\044\uff5d\045\uff5d\046\uff5d\047\uff5d\062\uff5d\066\uff5d\067" +
    "\uff5d\070\uff5d\071\uff5d\072\uff5d\001\002\000\004\011\365" +
    "\001\002\000\024\005\uffb2\006\uffb2\011\uffb2\012\uffb2\015" +
    "\uffb2\016\uffb2\056\uffb2\057\uffb2\061\237\001\002\000\044" +
    "\004\uffd8\010\uffd8\013\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\062\uffd8\066\uffd8" +
    "\067\uffd8\070\uffd8\071\uffd8\072\uffd8\001\002\000\004\013" +
    "\357\001\002\000\004\016\356\001\002\000\050\005\uffc9" +
    "\006\uffc9\011\uffc9\012\uffc9\015\uffc9\016\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\062\uffc9\070\150\071\147\077\uffc9\001\002\000" +
    "\044\004\uffda\010\uffda\013\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\062\uffda\066" +
    "\uffda\067\uffda\070\uffda\071\uffda\072\uffda\001\002\000\102" +
    "\005\uffe6\006\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6" +
    "\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\001" +
    "\002\000\026\005\uffb5\006\uffb5\011\uffb5\012\uffb5\015\uffb5" +
    "\016\uffb5\056\uffb5\057\uffb5\060\242\061\uffb5\001\002\000" +
    "\102\005\uffde\006\uffde\011\uffde\012\uffde\013\343\014\342" +
    "\015\uffde\016\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054" +
    "\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\064\uffde\065\uffde\066\345\067\344\070\uffde\071" +
    "\uffde\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde" +
    "\001\002\000\100\003\uff6c\004\uff6c\006\uff6c\007\uff6c\010" +
    "\uff6c\013\uff6c\016\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c" +
    "\027\uff6c\030\uff6c\031\uff6c\032\uff6c\034\uff6c\035\uff6c\036" +
    "\uff6c\037\uff6c\040\uff6c\041\uff6c\044\uff6c\045\uff6c\046\uff6c" +
    "\047\uff6c\062\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\072" +
    "\uff6c\001\002\000\004\013\336\001\002\000\102\005\uffec" +
    "\006\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec" +
    "\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064" +
    "\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec" +
    "\073\uffec\074\uffec\075\uffec\076\uffec\077\uffec\001\002\000" +
    "\102\005\uffed\006\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054" +
    "\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed" +
    "\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071" +
    "\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076\uffed\077\uffed" +
    "\001\002\000\004\013\326\001\002\000\100\003\uff67\004" +
    "\uff67\006\uff67\007\uff67\010\uff67\013\uff67\016\uff67\023\uff67" +
    "\024\uff67\025\uff67\026\uff67\027\uff67\030\uff67\031\uff67\032" +
    "\uff67\034\uff67\035\uff67\036\uff67\037\uff67\040\uff67\041\uff67" +
    "\044\uff67\045\uff67\046\uff67\047\uff67\062\uff67\066\uff67\067" +
    "\uff67\070\uff67\071\uff67\072\uff67\001\002\000\044\005\uffc0" +
    "\006\uffc0\011\uffc0\012\uffc0\015\uffc0\016\uffc0\051\141\052" +
    "\144\053\142\054\143\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\062\uffc0\077\uffc0\001\002\000\100\003\uff6a\004" +
    "\uff6a\006\uff6a\007\uff6a\010\uff6a\013\uff6a\016\uff6a\023\uff6a" +
    "\024\uff6a\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032" +
    "\uff6a\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a" +
    "\044\uff6a\045\uff6a\046\uff6a\047\uff6a\062\uff6a\066\uff6a\067" +
    "\uff6a\070\uff6a\071\uff6a\072\uff6a\001\002\000\030\005\uffb8" +
    "\006\uffb8\011\uffb8\012\uffb8\015\uffb8\016\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\062\245\001\002\000\006\006\300" +
    "\016\325\001\002\000\004\013\321\001\002\000\044\004" +
    "\uffd6\010\uffd6\013\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\062\055\066\uffd6\067" +
    "\uffd6\070\051\071\126\072\122\001\002\000\102\005\uffe8" +
    "\006\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8" +
    "\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\001\002\000" +
    "\044\004\114\010\074\013\076\023\041\024\064\025\063" +
    "\026\115\027\130\030\043\031\075\032\116\062\055\066" +
    "\125\067\117\070\051\071\126\072\122\001\002\000\100" +
    "\003\uff6d\004\uff6d\006\uff6d\007\uff6d\010\uff6d\013\uff6d\016" +
    "\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d" +
    "\031\uff6d\032\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d\040" +
    "\uff6d\041\uff6d\044\uff6d\045\uff6d\046\uff6d\047\uff6d\062\uff6d" +
    "\066\uff6d\067\uff6d\070\uff6d\071\uff6d\072\uff6d\001\002\000" +
    "\012\005\uffa4\012\uffa4\015\uffa4\016\uffa4\001\002\000\100" +
    "\003\uff69\004\uff69\006\uff69\007\uff69\010\uff69\013\uff69\016" +
    "\uff69\023\uff69\024\uff69\025\uff69\026\uff69\027\uff69\030\uff69" +
    "\031\uff69\032\uff69\034\uff69\035\uff69\036\uff69\037\uff69\040" +
    "\uff69\041\uff69\044\uff69\045\uff69\046\uff69\047\uff69\062\uff69" +
    "\066\uff69\067\uff69\070\uff69\071\uff69\072\uff69\001\002\000" +
    "\004\016\315\001\002\000\112\003\uff5f\004\uff5f\006\uff5f" +
    "\007\uff5f\010\uff5f\013\uff5f\016\uff5f\017\uff5f\020\uff5f\021" +
    "\uff5f\022\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f\027\uff5f" +
    "\030\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f\035\uff5f\036" +
    "\uff5f\037\uff5f\040\uff5f\041\uff5f\044\uff5f\045\uff5f\046\uff5f" +
    "\047\uff5f\062\uff5f\066\uff5f\067\uff5f\070\uff5f\071\uff5f\072" +
    "\uff5f\001\002\000\044\004\114\010\137\013\076\023\041" +
    "\024\064\025\063\026\115\027\130\030\043\031\075\032" +
    "\116\062\055\066\125\067\117\070\051\071\126\072\122" +
    "\001\002\000\102\005\ufff0\006\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\050\ufff0\051\ufff0\052\ufff0" +
    "\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061" +
    "\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0" +
    "\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076" +
    "\ufff0\077\ufff0\001\002\000\016\005\uffac\006\uffac\012\uffac" +
    "\015\uffac\016\uffac\056\231\001\002\000\100\003\uff68\004" +
    "\uff68\006\uff68\007\uff68\010\uff68\013\uff68\016\uff68\023\uff68" +
    "\024\uff68\025\uff68\026\uff68\027\uff68\030\uff68\031\uff68\032" +
    "\uff68\034\uff68\035\uff68\036\uff68\037\uff68\040\uff68\041\uff68" +
    "\044\uff68\045\uff68\046\uff68\047\uff68\062\uff68\066\uff68\067" +
    "\uff68\070\uff68\071\uff68\072\uff68\001\002\000\070\005\uffd5" +
    "\006\uffd5\012\uffd5\015\uffd5\016\uffd5\050\302\051\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5" +
    "\061\uffd5\062\uffd5\063\305\064\310\065\307\070\uffd5\071" +
    "\uffd5\072\uffd5\073\uffd5\074\uffd5\075\306\076\303\077\uffd5" +
    "\001\002\000\100\003\276\004\114\006\301\007\040\010" +
    "\074\013\076\016\120\023\041\024\064\025\063\026\115" +
    "\027\130\030\043\031\075\032\116\034\121\035\052\036" +
    "\065\037\062\040\073\041\044\044\104\045\047\046\102" +
    "\047\053\062\055\066\125\067\117\070\051\071\126\072" +
    "\122\001\002\000\100\003\uff6b\004\uff6b\006\uff6b\007\uff6b" +
    "\010\uff6b\013\uff6b\016\uff6b\023\uff6b\024\uff6b\025\uff6b\026" +
    "\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\034\uff6b\035\uff6b" +
    "\036\uff6b\037\uff6b\040\uff6b\041\uff6b\044\uff6b\045\uff6b\046" +
    "\uff6b\047\uff6b\062\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b" +
    "\072\uff6b\001\002\000\112\003\072\004\114\006\274\007" +
    "\040\010\074\013\076\016\120\017\014\020\015\021\016" +
    "\022\006\023\041\024\064\025\063\026\115\027\130\030" +
    "\043\031\075\032\116\033\005\034\121\035\052\036\065" +
    "\037\062\040\073\041\044\044\104\045\047\046\102\047" +
    "\053\062\055\066\125\067\117\070\051\071\126\072\122" +
    "\001\002\000\102\005\ufff1\006\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\050\ufff1\051\ufff1\052\ufff1" +
    "\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061" +
    "\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1" +
    "\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076" +
    "\ufff1\077\ufff1\001\002\000\102\005\uffeb\006\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb" +
    "\075\uffeb\076\uffeb\077\uffeb\001\002\000\102\005\uffe7\006" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7" +
    "\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073" +
    "\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7\001\002\000\044" +
    "\004\114\010\137\013\076\023\041\024\064\025\063\026" +
    "\115\027\130\030\043\031\075\032\116\062\055\066\125" +
    "\067\117\070\051\071\126\072\122\001\002\000\102\003" +
    "\uff5b\004\uff5b\006\uff5b\007\uff5b\010\uff5b\012\uff5b\013\uff5b" +
    "\016\uff5b\023\uff5b\024\uff5b\025\uff5b\026\uff5b\027\uff5b\030" +
    "\uff5b\031\uff5b\032\uff5b\034\uff5b\035\uff5b\036\uff5b\037\uff5b" +
    "\040\uff5b\041\uff5b\044\uff5b\045\uff5b\046\uff5b\047\uff5b\062" +
    "\uff5b\066\uff5b\067\uff5b\070\uff5b\071\uff5b\072\uff5b\001\002" +
    "\000\004\013\265\001\002\000\044\004\uffd9\010\uffd9\013" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\062\uffd9\066\uffd9\067\uffd9\070\uffd9\071" +
    "\uffd9\072\uffd9\001\002\000\010\004\205\013\206\016\202" +
    "\001\002\000\006\005\200\016\177\001\002\000\044\004" +
    "\114\010\137\013\076\023\041\024\064\025\063\026\115" +
    "\027\130\030\043\031\075\032\116\062\055\066\125\067" +
    "\117\070\051\071\126\072\122\001\002\000\044\004\uffd7" +
    "\010\uffd7\013\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\062\uffd7\066\uffd7\067\uffd7" +
    "\070\uffd7\071\uffd7\072\uffd7\001\002\000\056\005\uffce\006" +
    "\uffce\011\uffce\012\uffce\015\uffce\016\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\062\uffce\070\uffce\071\uffce\072\155\073\154\074\153" +
    "\077\uffce\001\002\000\102\005\uffea\006\uffea\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea" +
    "\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075" +
    "\uffea\076\uffea\077\uffea\001\002\000\034\005\uffbb\006\uffbb" +
    "\011\uffbb\012\uffbb\015\uffbb\016\uffbb\055\134\056\uffbb\057" +
    "\uffbb\060\uffbb\061\uffbb\062\uffbb\077\133\001\002\000\120" +
    "\002\uff63\003\uff63\004\uff63\006\uff63\007\uff63\010\uff63\013" +
    "\uff63\016\uff63\017\uff63\020\uff63\021\uff63\022\uff63\023\uff63" +
    "\024\uff63\025\uff63\026\uff63\027\uff63\030\uff63\031\uff63\032" +
    "\uff63\033\uff63\034\uff63\035\uff63\036\uff63\037\uff63\040\uff63" +
    "\041\uff63\042\uff63\043\uff63\044\uff63\045\uff63\046\uff63\047" +
    "\uff63\062\uff63\066\uff63\067\uff63\070\uff63\071\uff63\072\uff63" +
    "\001\002\000\044\004\uffbf\010\uffbf\013\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\062\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\001" +
    "\002\000\044\004\uffbd\010\uffbd\013\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\062" +
    "\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\001\002" +
    "\000\044\004\114\010\137\013\076\023\041\024\064\025" +
    "\063\026\115\027\130\030\043\031\075\032\116\062\055" +
    "\066\125\067\117\070\051\071\126\072\122\001\002\000" +
    "\056\005\uffd5\006\uffd5\011\uffd5\012\uffd5\015\uffd5\016\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\061\uffd5\062\uffd5\070\uffd5\071\uffd5\072\uffd5" +
    "\073\uffd5\074\uffd5\077\uffd5\001\002\000\044\004\uffd6\010" +
    "\uffd6\013\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\062\uffd6\066\uffd6\067\uffd6\070" +
    "\uffd6\071\uffd6\072\uffd6\001\002\000\044\005\uffbc\006\uffbc" +
    "\011\uffbc\012\uffbc\015\uffbc\016\uffbc\051\141\052\144\053" +
    "\142\054\143\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\062\uffbc\077\uffbc\001\002\000\044\004\uffc2\010\uffc2\013" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\062\uffc2\066\uffc2\067\uffc2\070\uffc2\071" +
    "\uffc2\072\uffc2\001\002\000\044\004\uffc4\010\uffc4\013\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\062\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4" +
    "\072\uffc4\001\002\000\044\004\uffc8\010\uffc8\013\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\062\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072" +
    "\uffc8\001\002\000\044\004\uffc6\010\uffc6\013\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\062\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6" +
    "\001\002\000\044\004\114\010\137\013\076\023\041\024" +
    "\064\025\063\026\115\027\130\030\043\031\075\032\116" +
    "\062\055\066\125\067\117\070\051\071\126\072\122\001" +
    "\002\000\050\005\uffc5\006\uffc5\011\uffc5\012\uffc5\015\uffc5" +
    "\016\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\070\150\071\147" +
    "\077\uffc5\001\002\000\044\004\uffcb\010\uffcb\013\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\062\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072" +
    "\uffcb\001\002\000\044\004\uffcd\010\uffcd\013\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\062\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd" +
    "\001\002\000\044\004\114\010\137\013\076\023\041\024" +
    "\064\025\063\026\115\027\130\030\043\031\075\032\116" +
    "\062\055\066\125\067\117\070\051\071\126\072\122\001" +
    "\002\000\056\005\uffcc\006\uffcc\011\uffcc\012\uffcc\015\uffcc" +
    "\016\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\070\uffcc\071\uffcc" +
    "\072\155\073\154\074\153\077\uffcc\001\002\000\044\004" +
    "\uffd0\010\uffd0\013\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\062\uffd0\066\uffd0\067" +
    "\uffd0\070\uffd0\071\uffd0\072\uffd0\001\002\000\044\004\uffd2" +
    "\010\uffd2\013\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\062\uffd2\066\uffd2\067\uffd2" +
    "\070\uffd2\071\uffd2\072\uffd2\001\002\000\044\004\uffd4\010" +
    "\uffd4\013\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\062\uffd4\066\uffd4\067\uffd4\070" +
    "\uffd4\071\uffd4\072\uffd4\001\002\000\044\004\114\010\137" +
    "\013\076\023\041\024\064\025\063\026\115\027\130\030" +
    "\043\031\075\032\116\062\055\066\125\067\117\070\051" +
    "\071\126\072\122\001\002\000\056\005\uffd3\006\uffd3\011" +
    "\uffd3\012\uffd3\015\uffd3\016\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\077\uffd3" +
    "\001\002\000\044\004\114\010\137\013\076\023\041\024" +
    "\064\025\063\026\115\027\130\030\043\031\075\032\116" +
    "\062\055\066\125\067\117\070\051\071\126\072\122\001" +
    "\002\000\056\005\uffd1\006\uffd1\011\uffd1\012\uffd1\015\uffd1" +
    "\016\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\070\uffd1\071\uffd1" +
    "\072\uffd1\073\uffd1\074\uffd1\077\uffd1\001\002\000\044\004" +
    "\114\010\137\013\076\023\041\024\064\025\063\026\115" +
    "\027\130\030\043\031\075\032\116\062\055\066\125\067" +
    "\117\070\051\071\126\072\122\001\002\000\056\005\uffcf" +
    "\006\uffcf\011\uffcf\012\uffcf\015\uffcf\016\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf" +
    "\061\uffcf\062\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074" +
    "\uffcf\077\uffcf\001\002\000\044\004\114\010\137\013\076" +
    "\023\041\024\064\025\063\026\115\027\130\030\043\031" +
    "\075\032\116\062\055\066\125\067\117\070\051\071\126" +
    "\072\122\001\002\000\056\005\uffca\006\uffca\011\uffca\012" +
    "\uffca\015\uffca\016\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\070" +
    "\uffca\071\uffca\072\155\073\154\074\153\077\uffca\001\002" +
    "\000\044\004\114\010\137\013\076\023\041\024\064\025" +
    "\063\026\115\027\130\030\043\031\075\032\116\062\055" +
    "\066\125\067\117\070\051\071\126\072\122\001\002\000" +
    "\050\005\uffc7\006\uffc7\011\uffc7\012\uffc7\015\uffc7\016\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\070\150\071\147\077\uffc7" +
    "\001\002\000\044\004\114\010\137\013\076\023\041\024" +
    "\064\025\063\026\115\027\130\030\043\031\075\032\116" +
    "\062\055\066\125\067\117\070\051\071\126\072\122\001" +
    "\002\000\050\005\uffc3\006\uffc3\011\uffc3\012\uffc3\015\uffc3" +
    "\016\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\070\150\071\147" +
    "\077\uffc3\001\002\000\044\004\114\010\137\013\076\023" +
    "\041\024\064\025\063\026\115\027\130\030\043\031\075" +
    "\032\116\062\055\066\125\067\117\070\051\071\126\072" +
    "\122\001\002\000\050\005\uffc1\006\uffc1\011\uffc1\012\uffc1" +
    "\015\uffc1\016\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\070\150" +
    "\071\147\077\uffc1\001\002\000\044\004\114\010\137\013" +
    "\076\023\041\024\064\025\063\026\115\027\130\030\043" +
    "\031\075\032\116\062\055\066\125\067\117\070\051\071" +
    "\126\072\122\001\002\000\044\005\uffbe\006\uffbe\011\uffbe" +
    "\012\uffbe\015\uffbe\016\uffbe\051\141\052\144\053\142\054" +
    "\143\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\077\uffbe\001\002\000\072\005\uffdd\006\uffdd\011\uffdd\012" +
    "\uffdd\015\uffdd\016\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\070\uffdd\071\uffdd\072\uffdd" +
    "\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\001\002\000" +
    "\102\003\uff5a\004\uff5a\006\uff5a\007\uff5a\010\uff5a\012\uff5a" +
    "\013\uff5a\016\uff5a\023\uff5a\024\uff5a\025\uff5a\026\uff5a\027" +
    "\uff5a\030\uff5a\031\uff5a\032\uff5a\034\uff5a\035\uff5a\036\uff5a" +
    "\037\uff5a\040\uff5a\041\uff5a\044\uff5a\045\uff5a\046\uff5a\047" +
    "\uff5a\062\uff5a\066\uff5a\067\uff5a\070\uff5a\071\uff5a\072\uff5a" +
    "\001\002\000\044\004\114\010\137\013\076\023\041\024" +
    "\064\025\063\026\115\027\130\030\043\031\075\032\116" +
    "\062\055\066\125\067\117\070\051\071\126\072\122\001" +
    "\002\000\012\005\uffa3\012\uffa3\015\uffa3\016\uffa3\001\002" +
    "\000\116\002\uffa1\003\uffa1\004\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\013\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1" +
    "\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1" +
    "\040\uffa1\041\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047" +
    "\uffa1\062\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1" +
    "\001\002\000\014\005\uff98\013\213\014\211\016\uff98\050" +
    "\253\001\002\000\006\005\251\016\250\001\002\000\016" +
    "\005\uff8d\012\uff8d\013\uff8d\014\uff8d\016\uff8d\050\uff8d\001" +
    "\002\000\006\004\205\013\206\001\002\000\006\005\uff9a" +
    "\016\uff9a\001\002\000\010\012\212\013\213\014\211\001" +
    "\002\000\046\004\114\010\137\013\076\015\226\023\041" +
    "\024\064\025\063\026\115\027\130\030\043\031\075\032" +
    "\116\062\055\066\125\067\117\070\051\071\126\072\122" +
    "\001\002\000\016\005\uff8c\012\uff8c\013\uff8c\014\uff8c\016" +
    "\uff8c\050\uff8c\001\002\000\020\004\033\012\216\017\014" +
    "\020\015\021\016\022\006\033\005\001\002\000\006\005" +
    "\224\012\uff86\001\002\000\006\005\222\012\221\001\002" +
    "\000\016\005\uff87\012\uff87\013\uff87\014\uff87\016\uff87\050" +
    "\uff87\001\002\000\004\012\220\001\002\000\016\005\uff89" +
    "\012\uff89\013\uff89\014\uff89\016\uff89\050\uff89\001\002\000" +
    "\016\005\uff88\012\uff88\013\uff88\014\uff88\016\uff88\050\uff88" +
    "\001\002\000\004\004\223\001\002\000\006\005\uff7f\012" +
    "\uff7f\001\002\000\014\017\014\020\015\021\016\022\006" +
    "\033\005\001\002\000\006\005\uff84\012\uff84\001\002\000" +
    "\016\005\uff8a\012\uff8a\013\uff8a\014\uff8a\016\uff8a\050\uff8a" +
    "\001\002\000\006\015\230\056\231\001\002\000\016\005" +
    "\uff8b\012\uff8b\013\uff8b\014\uff8b\016\uff8b\050\uff8b\001\002" +
    "\000\044\004\uffae\010\uffae\013\uffae\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\062\uffae" +
    "\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\001\002\000" +
    "\044\004\114\010\137\013\076\023\041\024\064\025\063" +
    "\026\115\027\130\030\043\031\075\032\116\062\055\066" +
    "\125\067\117\070\051\071\126\072\122\001\002\000\022" +
    "\005\uffad\006\uffad\011\uffad\012\uffad\015\uffad\016\uffad\056" +
    "\uffad\057\234\001\002\000\044\004\uffb1\010\uffb1\013\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\062\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\001\002\000\044\004\114\010\137\013\076\023" +
    "\041\024\064\025\063\026\115\027\130\030\043\031\075" +
    "\032\116\062\055\066\125\067\117\070\051\071\126\072" +
    "\122\001\002\000\024\005\uffb0\006\uffb0\011\uffb0\012\uffb0" +
    "\015\uffb0\016\uffb0\056\uffb0\057\uffb0\061\237\001\002\000" +
    "\044\004\uffb4\010\uffb4\013\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\062\uffb4\066" +
    "\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\001\002\000\044" +
    "\004\114\010\137\013\076\023\041\024\064\025\063\026" +
    "\115\027\130\030\043\031\075\032\116\062\055\066\125" +
    "\067\117\070\051\071\126\072\122\001\002\000\026\005" +
    "\uffb3\006\uffb3\011\uffb3\012\uffb3\015\uffb3\016\uffb3\056\uffb3" +
    "\057\uffb3\060\242\061\uffb3\001\002\000\044\004\uffb7\010" +
    "\uffb7\013\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\062\uffb7\066\uffb7\067\uffb7\070" +
    "\uffb7\071\uffb7\072\uffb7\001\002\000\044\004\114\010\137" +
    "\013\076\023\041\024\064\025\063\026\115\027\130\030" +
    "\043\031\075\032\116\062\055\066\125\067\117\070\051" +
    "\071\126\072\122\001\002\000\030\005\uffb6\006\uffb6\011" +
    "\uffb6\012\uffb6\015\uffb6\016\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\062\245\001\002\000\044\004\uffba\010\uffba\013" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\062\uffba\066\uffba\067\uffba\070\uffba\071" +
    "\uffba\072\uffba\001\002\000\044\004\114\010\137\013\076" +
    "\023\041\024\064\025\063\026\115\027\130\030\043\031" +
    "\075\032\116\062\055\066\125\067\117\070\051\071\126" +
    "\072\122\001\002\000\034\005\uffb9\006\uffb9\011\uffb9\012" +
    "\uffb9\015\uffb9\016\uffb9\055\134\056\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\077\133\001\002\000\116\002\uffa0\003" +
    "\uffa0\004\uffa0\006\uffa0\007\uffa0\010\uffa0\013\uffa0\016\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\062\uffa0\066\uffa0" +
    "\067\uffa0\070\uffa0\071\uffa0\072\uffa0\001\002\000\006\004" +
    "\205\013\206\001\002\000\006\005\uff99\016\uff99\001\002" +
    "\000\046\004\114\007\256\010\137\013\076\023\041\024" +
    "\064\025\063\026\115\027\130\030\043\031\075\032\116" +
    "\062\055\066\125\067\117\070\051\071\126\072\122\001" +
    "\002\000\010\005\uff72\006\uff72\016\uff72\001\002\000\006" +
    "\005\uff97\016\uff97\001\002\000\046\004\114\007\256\010" +
    "\137\013\076\023\041\024\064\025\063\026\115\027\130" +
    "\030\043\031\075\032\116\062\055\066\125\067\117\070" +
    "\051\071\126\072\122\001\002\000\006\005\262\006\261" +
    "\001\002\000\006\005\uff6f\006\uff6f\001\002\000\010\005" +
    "\uff71\006\uff71\016\uff71\001\002\000\050\004\114\006\263" +
    "\007\256\010\137\013\076\023\041\024\064\025\063\026" +
    "\115\027\130\030\043\031\075\032\116\062\055\066\125" +
    "\067\117\070\051\071\126\072\122\001\002\000\010\005" +
    "\uff70\006\uff70\016\uff70\001\002\000\006\005\uff6e\006\uff6e" +
    "\001\002\000\044\004\114\010\074\013\076\023\041\024" +
    "\064\025\063\026\115\027\130\030\043\031\075\032\116" +
    "\062\055\066\125\067\117\070\051\071\126\072\122\001" +
    "\002\000\006\005\200\012\267\001\002\000\004\016\270" +
    "\001\002\000\100\003\uff51\004\uff51\006\uff51\007\uff51\010" +
    "\uff51\013\uff51\016\uff51\023\uff51\024\uff51\025\uff51\026\uff51" +
    "\027\uff51\030\uff51\031\uff51\032\uff51\034\uff51\035\uff51\036" +
    "\uff51\037\uff51\040\uff51\041\uff51\044\uff51\045\uff51\046\uff51" +
    "\047\uff51\062\uff51\066\uff51\067\uff51\070\uff51\071\uff51\072" +
    "\uff51\001\002\000\072\005\uffdc\006\uffdc\011\uffdc\012\uffdc" +
    "\015\uffdc\016\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc" +
    "\063\uffdc\064\uffdc\065\uffdc\070\uffdc\071\uffdc\072\uffdc\073" +
    "\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\001\002\000\112" +
    "\003\uff5e\004\uff5e\006\uff5e\007\uff5e\010\uff5e\013\uff5e\016" +
    "\uff5e\017\uff5e\020\uff5e\021\uff5e\022\uff5e\023\uff5e\024\uff5e" +
    "\025\uff5e\026\uff5e\027\uff5e\030\uff5e\031\uff5e\032\uff5e\033" +
    "\uff5e\034\uff5e\035\uff5e\036\uff5e\037\uff5e\040\uff5e\041\uff5e" +
    "\044\uff5e\045\uff5e\046\uff5e\047\uff5e\062\uff5e\066\uff5e\067" +
    "\uff5e\070\uff5e\071\uff5e\072\uff5e\001\002\000\100\003\276" +
    "\004\114\006\277\007\040\010\074\013\076\016\120\023" +
    "\041\024\064\025\063\026\115\027\130\030\043\031\075" +
    "\032\116\034\121\035\052\036\065\037\062\040\073\041" +
    "\044\044\104\045\047\046\102\047\053\062\055\066\125" +
    "\067\117\070\051\071\126\072\122\001\002\000\120\002" +
    "\uff61\003\uff61\004\uff61\006\uff61\007\uff61\010\uff61\013\uff61" +
    "\016\uff61\017\uff61\020\uff61\021\uff61\022\uff61\023\uff61\024" +
    "\uff61\025\uff61\026\uff61\027\uff61\030\uff61\031\uff61\032\uff61" +
    "\033\uff61\034\uff61\035\uff61\036\uff61\037\uff61\040\uff61\041" +
    "\uff61\042\uff61\043\uff61\044\uff61\045\uff61\046\uff61\047\uff61" +
    "\062\uff61\066\uff61\067\uff61\070\uff61\071\uff61\072\uff61\001" +
    "\002\000\100\003\uff5c\004\uff5c\006\uff5c\007\uff5c\010\uff5c" +
    "\013\uff5c\016\uff5c\023\uff5c\024\uff5c\025\uff5c\026\uff5c\027" +
    "\uff5c\030\uff5c\031\uff5c\032\uff5c\034\uff5c\035\uff5c\036\uff5c" +
    "\037\uff5c\040\uff5c\041\uff5c\044\uff5c\045\uff5c\046\uff5c\047" +
    "\uff5c\062\uff5c\066\uff5c\067\uff5c\070\uff5c\071\uff5c\072\uff5c" +
    "\001\002\000\004\006\300\001\002\000\120\002\uff60\003" +
    "\uff60\004\uff60\006\uff60\007\uff60\010\uff60\013\uff60\016\uff60" +
    "\017\uff60\020\uff60\021\uff60\022\uff60\023\uff60\024\uff60\025" +
    "\uff60\026\uff60\027\uff60\030\uff60\031\uff60\032\uff60\033\uff60" +
    "\034\uff60\035\uff60\036\uff60\037\uff60\040\uff60\041\uff60\042" +
    "\uff60\043\uff60\044\uff60\045\uff60\046\uff60\047\uff60\062\uff60" +
    "\066\uff60\067\uff60\070\uff60\071\uff60\072\uff60\001\002\000" +
    "\100\003\uff66\004\uff66\006\uff66\007\uff66\010\uff66\013\uff66" +
    "\016\uff66\023\uff66\024\uff66\025\uff66\026\uff66\027\uff66\030" +
    "\uff66\031\uff66\032\uff66\034\uff66\035\uff66\036\uff66\037\uff66" +
    "\040\uff66\041\uff66\044\uff66\045\uff66\046\uff66\047\uff66\062" +
    "\uff66\066\uff66\067\uff66\070\uff66\071\uff66\072\uff66\001\002" +
    "\000\120\002\uff62\003\uff62\004\uff62\006\uff62\007\uff62\010" +
    "\uff62\013\uff62\016\uff62\017\uff62\020\uff62\021\uff62\022\uff62" +
    "\023\uff62\024\uff62\025\uff62\026\uff62\027\uff62\030\uff62\031" +
    "\uff62\032\uff62\033\uff62\034\uff62\035\uff62\036\uff62\037\uff62" +
    "\040\uff62\041\uff62\042\uff62\043\uff62\044\uff62\045\uff62\046" +
    "\uff62\047\uff62\062\uff62\066\uff62\067\uff62\070\uff62\071\uff62" +
    "\072\uff62\001\002\000\044\004\uffaa\010\uffaa\013\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\062\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072" +
    "\uffaa\001\002\000\044\004\uffa8\010\uffa8\013\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\062\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8" +
    "\001\002\000\044\004\114\010\137\013\076\023\041\024" +
    "\064\025\063\026\115\027\130\030\043\031\075\032\116" +
    "\062\055\066\125\067\117\070\051\071\126\072\122\001" +
    "\002\000\044\004\uffa7\010\uffa7\013\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\062" +
    "\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\001\002" +
    "\000\044\004\uffa9\010\uffa9\013\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\062\uffa9" +
    "\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\001\002\000" +
    "\044\004\uffa5\010\uffa5\013\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\062\uffa5\066" +
    "\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\001\002\000\044" +
    "\004\uffa6\010\uffa6\013\uffa6\023\uffa6\024\uffa6\025\uffa6\026" +
    "\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\062\uffa6\066\uffa6" +
    "\067\uffa6\070\uffa6\071\uffa6\072\uffa6\001\002\000\014\005" +
    "\uffab\006\uffab\012\uffab\015\uffab\016\uffab\001\002\000\006" +
    "\011\313\056\231\001\002\000\076\003\276\004\114\007" +
    "\040\010\074\013\076\016\120\023\041\024\064\025\063" +
    "\026\115\027\130\030\043\031\075\032\116\034\121\035" +
    "\052\036\065\037\062\040\073\041\044\044\104\045\047" +
    "\046\102\047\053\062\055\066\125\067\117\070\051\071" +
    "\126\072\122\001\002\000\100\003\uff65\004\uff65\006\uff65" +
    "\007\uff65\010\uff65\013\uff65\016\uff65\023\uff65\024\uff65\025" +
    "\uff65\026\uff65\027\uff65\030\uff65\031\uff65\032\uff65\034\uff65" +
    "\035\uff65\036\uff65\037\uff65\040\uff65\041\uff65\044\uff65\045" +
    "\uff65\046\uff65\047\uff65\062\uff65\066\uff65\067\uff65\070\uff65" +
    "\071\uff65\072\uff65\001\002\000\100\003\uff53\004\uff53\006" +
    "\uff53\007\uff53\010\uff53\013\uff53\016\uff53\023\uff53\024\uff53" +
    "\025\uff53\026\uff53\027\uff53\030\uff53\031\uff53\032\uff53\034" +
    "\uff53\035\uff53\036\uff53\037\uff53\040\uff53\041\uff53\044\uff53" +
    "\045\uff53\046\uff53\047\uff53\062\uff53\066\uff53\067\uff53\070" +
    "\uff53\071\uff53\072\uff53\001\002\000\006\005\200\012\317" +
    "\001\002\000\102\005\uffef\006\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\016\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061" +
    "\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef" +
    "\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef\075\uffef\076" +
    "\uffef\077\uffef\001\002\000\012\005\uffa2\012\uffa2\015\uffa2" +
    "\016\uffa2\001\002\000\044\004\114\010\074\013\076\023" +
    "\041\024\064\025\063\026\115\027\130\030\043\031\075" +
    "\032\116\062\055\066\125\067\117\070\051\071\126\072" +
    "\122\001\002\000\006\005\200\012\323\001\002\000\004" +
    "\007\040\001\002\000\100\003\uff57\004\uff57\006\uff57\007" +
    "\uff57\010\uff57\013\uff57\016\uff57\023\uff57\024\uff57\025\uff57" +
    "\026\uff57\027\uff57\030\uff57\031\uff57\032\uff57\034\uff57\035" +
    "\uff57\036\uff57\037\uff57\040\uff57\041\uff57\044\uff57\045\uff57" +
    "\046\uff57\047\uff57\062\uff57\066\uff57\067\uff57\070\uff57\071" +
    "\uff57\072\uff57\001\002\000\116\002\uff9f\003\uff9f\004\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\013\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f" +
    "\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\047\uff9f\062\uff9f\066\uff9f\067\uff9f\070" +
    "\uff9f\071\uff9f\072\uff9f\001\002\000\046\004\114\010\074" +
    "\013\076\016\120\023\041\024\064\025\063\026\115\027" +
    "\130\030\043\031\075\032\116\062\055\066\125\067\117" +
    "\070\051\071\126\072\122\001\002\000\046\004\114\010" +
    "\074\013\076\016\120\023\041\024\064\025\063\026\115" +
    "\027\130\030\043\031\075\032\116\062\055\066\125\067" +
    "\117\070\051\071\126\072\122\001\002\000\046\004\114" +
    "\010\074\012\331\013\076\023\041\024\064\025\063\026" +
    "\115\027\130\030\043\031\075\032\116\062\055\066\125" +
    "\067\117\070\051\071\126\072\122\001\002\000\004\007" +
    "\040\001\002\000\006\005\200\012\333\001\002\000\004" +
    "\007\040\001\002\000\100\003\uff54\004\uff54\006\uff54\007" +
    "\uff54\010\uff54\013\uff54\016\uff54\023\uff54\024\uff54\025\uff54" +
    "\026\uff54\027\uff54\030\uff54\031\uff54\032\uff54\034\uff54\035" +
    "\uff54\036\uff54\037\uff54\040\uff54\041\uff54\044\uff54\045\uff54" +
    "\046\uff54\047\uff54\062\uff54\066\uff54\067\uff54\070\uff54\071" +
    "\uff54\072\uff54\001\002\000\100\003\uff55\004\uff55\006\uff55" +
    "\007\uff55\010\uff55\013\uff55\016\uff55\023\uff55\024\uff55\025" +
    "\uff55\026\uff55\027\uff55\030\uff55\031\uff55\032\uff55\034\uff55" +
    "\035\uff55\036\uff55\037\uff55\040\uff55\041\uff55\044\uff55\045" +
    "\uff55\046\uff55\047\uff55\062\uff55\066\uff55\067\uff55\070\uff55" +
    "\071\uff55\072\uff55\001\002\000\044\004\114\010\074\013" +
    "\076\023\041\024\064\025\063\026\115\027\130\030\043" +
    "\031\075\032\116\062\055\066\125\067\117\070\051\071" +
    "\126\072\122\001\002\000\006\005\200\012\340\001\002" +
    "\000\004\007\040\001\002\000\100\003\uff56\004\uff56\006" +
    "\uff56\007\uff56\010\uff56\013\uff56\016\uff56\023\uff56\024\uff56" +
    "\025\uff56\026\uff56\027\uff56\030\uff56\031\uff56\032\uff56\034" +
    "\uff56\035\uff56\036\uff56\037\uff56\040\uff56\041\uff56\044\uff56" +
    "\045\uff56\046\uff56\047\uff56\062\uff56\066\uff56\067\uff56\070" +
    "\uff56\071\uff56\072\uff56\001\002\000\044\004\114\010\074" +
    "\013\076\023\041\024\064\025\063\026\115\027\130\030" +
    "\043\031\075\032\116\062\055\066\125\067\117\070\051" +
    "\071\126\072\122\001\002\000\046\004\114\010\137\012" +
    "\350\013\076\023\041\024\064\025\063\026\115\027\130" +
    "\030\043\031\075\032\116\062\055\066\125\067\117\070" +
    "\051\071\126\072\122\001\002\000\102\005\uffe1\006\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065" +
    "\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1" +
    "\074\uffe1\075\uffe1\076\uffe1\077\uffe1\001\002\000\102\005" +
    "\uffe2\006\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072" +
    "\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\001\002" +
    "\000\006\005\352\012\351\001\002\000\006\005\uffe0\012" +
    "\uffe0\001\002\000\102\005\uffe4\006\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4" +
    "\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067" +
    "\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4" +
    "\076\uffe4\077\uffe4\001\002\000\102\005\uffe3\006\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057" +
    "\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3" +
    "\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074" +
    "\uffe3\075\uffe3\076\uffe3\077\uffe3\001\002\000\044\004\114" +
    "\010\137\013\076\023\041\024\064\025\063\026\115\027" +
    "\130\030\043\031\075\032\116\062\055\066\125\067\117" +
    "\070\051\071\126\072\122\001\002\000\006\005\uffdf\012" +
    "\uffdf\001\002\000\006\005\200\015\355\001\002\000\102" +
    "\005\uffe5\006\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063" +
    "\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5" +
    "\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\001" +
    "\002\000\100\003\uff52\004\uff52\006\uff52\007\uff52\010\uff52" +
    "\013\uff52\016\uff52\023\uff52\024\uff52\025\uff52\026\uff52\027" +
    "\uff52\030\uff52\031\uff52\032\uff52\034\uff52\035\uff52\036\uff52" +
    "\037\uff52\040\uff52\041\uff52\044\uff52\045\uff52\046\uff52\047" +
    "\uff52\062\uff52\066\uff52\067\uff52\070\uff52\071\uff52\072\uff52" +
    "\001\002\000\006\004\361\012\360\001\002\000\004\016" +
    "\364\001\002\000\004\012\362\001\002\000\004\016\363" +
    "\001\002\000\100\003\uff4f\004\uff4f\006\uff4f\007\uff4f\010" +
    "\uff4f\013\uff4f\016\uff4f\023\uff4f\024\uff4f\025\uff4f\026\uff4f" +
    "\027\uff4f\030\uff4f\031\uff4f\032\uff4f\034\uff4f\035\uff4f\036" +
    "\uff4f\037\uff4f\040\uff4f\041\uff4f\044\uff4f\045\uff4f\046\uff4f" +
    "\047\uff4f\062\uff4f\066\uff4f\067\uff4f\070\uff4f\071\uff4f\072" +
    "\uff4f\001\002\000\100\003\uff50\004\uff50\006\uff50\007\uff50" +
    "\010\uff50\013\uff50\016\uff50\023\uff50\024\uff50\025\uff50\026" +
    "\uff50\027\uff50\030\uff50\031\uff50\032\uff50\034\uff50\035\uff50" +
    "\036\uff50\037\uff50\040\uff50\041\uff50\044\uff50\045\uff50\046" +
    "\uff50\047\uff50\062\uff50\066\uff50\067\uff50\070\uff50\071\uff50" +
    "\072\uff50\001\002\000\076\003\276\004\114\007\040\010" +
    "\074\013\076\016\120\023\041\024\064\025\063\026\115" +
    "\027\130\030\043\031\075\032\116\034\121\035\052\036" +
    "\065\037\062\040\073\041\044\044\104\045\047\046\102" +
    "\047\053\062\055\066\125\067\117\070\051\071\126\072" +
    "\122\001\002\000\100\003\uff64\004\uff64\006\uff64\007\uff64" +
    "\010\uff64\013\uff64\016\uff64\023\uff64\024\uff64\025\uff64\026" +
    "\uff64\027\uff64\030\uff64\031\uff64\032\uff64\034\uff64\035\uff64" +
    "\036\uff64\037\uff64\040\uff64\041\uff64\044\uff64\045\uff64\046" +
    "\uff64\047\uff64\062\uff64\066\uff64\067\uff64\070\uff64\071\uff64" +
    "\072\uff64\001\002\000\044\004\114\010\074\013\076\023" +
    "\041\024\064\025\063\026\115\027\130\030\043\031\075" +
    "\032\116\062\055\066\125\067\117\070\051\071\126\072" +
    "\122\001\002\000\006\005\200\012\371\001\002\000\004" +
    "\007\040\001\002\000\102\003\uff59\004\uff59\006\uff59\007" +
    "\uff59\010\uff59\013\uff59\016\uff59\023\uff59\024\uff59\025\uff59" +
    "\026\uff59\027\uff59\030\uff59\031\uff59\032\uff59\034\uff59\035" +
    "\uff59\036\uff59\037\uff59\040\uff59\041\uff59\042\373\044\uff59" +
    "\045\uff59\046\uff59\047\uff59\062\uff59\066\uff59\067\uff59\070" +
    "\uff59\071\uff59\072\uff59\001\002\000\004\007\040\001\002" +
    "\000\100\003\uff58\004\uff58\006\uff58\007\uff58\010\uff58\013" +
    "\uff58\016\uff58\023\uff58\024\uff58\025\uff58\026\uff58\027\uff58" +
    "\030\uff58\031\uff58\032\uff58\034\uff58\035\uff58\036\uff58\037" +
    "\uff58\040\uff58\041\uff58\044\uff58\045\uff58\046\uff58\047\uff58" +
    "\062\uff58\066\uff58\067\uff58\070\uff58\071\uff58\072\uff58\001" +
    "\002\000\072\005\uffdb\006\uffdb\011\uffdb\012\uffdb\015\uffdb" +
    "\016\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb" +
    "\064\uffdb\065\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074" +
    "\uffdb\075\uffdb\076\uffdb\077\uffdb\001\002\000\046\004\114" +
    "\010\137\013\076\015\u0110\023\041\024\064\025\063\026" +
    "\115\027\130\030\043\031\075\032\116\062\055\066\125" +
    "\067\117\070\051\071\126\072\122\001\002\000\012\005" +
    "\uff83\012\uff83\013\213\014\211\001\002\000\006\005\uff82" +
    "\012\uff82\001\002\000\012\005\uff7c\012\uff7c\013\u0109\014" +
    "\u0108\001\002\000\024\004\205\012\u0105\013\u0102\014\376" +
    "\017\014\020\015\021\016\022\006\033\005\001\002\000" +
    "\004\012\u0107\001\002\000\004\012\u0106\001\002\000\012" +
    "\005\uff76\012\uff76\013\uff76\014\uff76\001\002\000\012\005" +
    "\uff7b\012\uff7b\013\uff7b\014\uff7b\001\002\000\012\005\uff75" +
    "\012\uff75\013\uff75\014\uff75\001\002\000\046\004\114\010" +
    "\137\013\076\015\u010d\023\041\024\064\025\063\026\115" +
    "\027\130\030\043\031\075\032\116\062\055\066\125\067" +
    "\117\070\051\071\126\072\122\001\002\000\016\012\u010a" +
    "\017\014\020\015\021\016\022\006\033\005\001\002\000" +
    "\012\005\uff74\012\uff74\013\uff74\014\uff74\001\002\000\004" +
    "\012\u010c\001\002\000\012\005\uff73\012\uff73\013\uff73\014" +
    "\uff73\001\002\000\012\005\uff78\012\uff78\013\uff78\014\uff78" +
    "\001\002\000\006\015\u010f\056\231\001\002\000\012\005" +
    "\uff77\012\uff77\013\uff77\014\uff77\001\002\000\012\005\uff7a" +
    "\012\uff7a\013\uff7a\014\uff7a\001\002\000\006\015\u0112\056" +
    "\231\001\002\000\012\005\uff79\012\uff79\013\uff79\014\uff79" +
    "\001\002\000\022\002\ufff5\003\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\033\ufff5\043\ufff5\001\002\000\022\002\ufff6" +
    "\003\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\033\ufff6\043" +
    "\ufff6\001\002\000\022\002\ufff7\003\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\033\ufff7\043\ufff7\001\002\000\014\005" +
    "\uff8d\013\ufffc\014\uff8d\016\uff8d\050\uff8d\001\002\000\004" +
    "\013\u0118\001\002\000\020\004\033\012\035\017\014\020" +
    "\015\021\016\022\006\033\005\001\002\000\022\002\ufffb" +
    "\003\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\033\ufffb\043" +
    "\ufffb\001\002\000\022\002\uffff\003\uffff\017\uffff\020\uffff" +
    "\021\uffff\022\uffff\033\uffff\043\uffff\001\002\000\004\002" +
    "\001\001\002\000\016\004\uff9e\005\uff9e\012\uff9e\013\uff9e" +
    "\014\uff9e\016\uff9e\001\002\000\016\004\uff9b\005\uff9b\012" +
    "\uff9b\013\uff9b\014\uff9b\016\uff9b\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\020\002\011\004\010\005\020\011\003\032" +
    "\012\034\007\036\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\u011c\034\007\036" +
    "\006\001\001\000\010\032\u011b\034\007\036\006\001\001" +
    "\000\002\001\001\000\016\004\010\005\020\011\u0119\032" +
    "\012\034\007\036\006\001\001\000\010\007\202\031\203" +
    "\033\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\023\001" +
    "\001\000\002\001\001\000\022\032\027\034\007\036\006" +
    "\040\025\041\033\042\026\062\031\063\030\001\001\000" +
    "\004\063\u0113\001\001\000\004\063\u0112\001\001\000\010" +
    "\007\376\044\377\045\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\067\035\001\001\000\004\051\036\001\001\000\002\001" +
    "\001\000\076\003\104\004\102\006\123\012\055\013\057" +
    "\015\107\016\126\017\053\020\066\021\130\022\070\023" +
    "\056\024\047\025\044\026\105\027\077\032\122\034\007" +
    "\036\006\047\045\050\076\051\060\052\112\053\110\054" +
    "\111\055\067\056\100\057\106\060\065\061\041\001\001" +
    "\000\002\001\001\000\014\003\104\012\055\013\057\015" +
    "\374\061\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\104\012\055\013\057\015\107\016\126" +
    "\017\053\020\066\021\130\022\070\023\056\024\047\025" +
    "\044\026\105\027\317\061\041\001\001\000\002\001\001" +
    "\000\042\003\104\006\315\012\055\013\057\015\107\016" +
    "\126\017\053\020\066\021\130\022\070\023\056\024\047" +
    "\025\044\026\105\027\077\061\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\104\012\055\013\057\015" +
    "\135\016\126\017\053\020\066\021\130\022\070\023\056" +
    "\024\047\025\044\026\311\061\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\303" +
    "\001\001\000\062\003\104\006\123\012\055\013\057\015" +
    "\107\016\126\017\053\020\066\021\130\022\070\023\056" +
    "\024\047\025\044\026\105\027\077\047\274\050\076\051" +
    "\060\054\111\055\067\056\100\057\106\060\065\061\041" +
    "\001\001\000\002\001\001\000\074\003\104\004\271\006" +
    "\123\012\055\013\057\015\107\016\126\017\053\020\066" +
    "\021\130\022\070\023\056\024\047\025\044\026\105\027" +
    "\077\032\122\034\007\036\006\047\045\050\076\051\060" +
    "\053\272\054\111\055\067\056\100\057\106\060\065\061" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\104\012\055\013\057\015\270\061" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\202\031\203\033\206\001\001\000" +
    "\002\001\001\000\014\003\104\012\055\013\057\015\175" +
    "\061\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\173\001\001\000\004\102\134\001\001\000\022\003" +
    "\104\012\055\013\057\015\135\016\126\017\053\020\137" +
    "\061\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\100\171\001\001\000\004\077\167" +
    "\001\001\000\004\075\165\001\001\000\004\076\144\001" +
    "\001\000\020\003\104\012\055\013\057\015\135\016\126" +
    "\017\145\061\041\001\001\000\002\001\001\000\004\074" +
    "\163\001\001\000\004\073\150\001\001\000\016\003\104" +
    "\012\055\013\057\015\135\016\151\061\041\001\001\000" +
    "\002\001\001\000\004\072\161\001\001\000\004\071\157" +
    "\001\001\000\004\070\155\001\001\000\014\003\104\012" +
    "\055\013\057\015\156\061\041\001\001\000\002\001\001" +
    "\000\014\003\104\012\055\013\057\015\160\061\041\001" +
    "\001\000\002\001\001\000\014\003\104\012\055\013\057" +
    "\015\162\061\041\001\001\000\002\001\001\000\016\003" +
    "\104\012\055\013\057\015\135\016\164\061\041\001\001" +
    "\000\002\001\001\000\020\003\104\012\055\013\057\015" +
    "\135\016\126\017\166\061\041\001\001\000\002\001\001" +
    "\000\020\003\104\012\055\013\057\015\135\016\126\017" +
    "\170\061\041\001\001\000\002\001\001\000\020\003\104" +
    "\012\055\013\057\015\135\016\126\017\172\061\041\001" +
    "\001\000\002\001\001\000\022\003\104\012\055\013\057" +
    "\015\135\016\126\017\053\020\174\061\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\104\012\055\013\057\015\107\016\126\017\053\020" +
    "\066\021\130\022\070\023\056\024\047\025\044\026\105" +
    "\027\200\061\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\104\012\055\013\057\015\135\016\126" +
    "\017\053\020\066\021\130\022\070\023\056\024\047\025" +
    "\044\026\226\061\041\001\001\000\002\001\001\000\020" +
    "\032\027\034\007\036\006\037\216\040\213\041\033\042" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\032\027" +
    "\034\007\036\006\041\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\107\231\001\001\000\034\003\104\012\055\013\057\015" +
    "\135\016\126\017\053\020\066\021\130\022\070\023\056" +
    "\024\047\025\232\061\041\001\001\000\002\001\001\000" +
    "\004\106\234\001\001\000\032\003\104\012\055\013\057" +
    "\015\135\016\126\017\053\020\066\021\130\022\070\023" +
    "\056\024\235\061\041\001\001\000\002\001\001\000\004" +
    "\105\237\001\001\000\030\003\104\012\055\013\057\015" +
    "\135\016\126\017\053\020\066\021\130\022\070\023\240" +
    "\061\041\001\001\000\002\001\001\000\004\104\242\001" +
    "\001\000\026\003\104\012\055\013\057\015\135\016\126" +
    "\017\053\020\066\021\130\022\243\061\041\001\001\000" +
    "\002\001\001\000\004\103\245\001\001\000\024\003\104" +
    "\012\055\013\057\015\135\016\126\017\053\020\066\021" +
    "\246\061\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\202\033\251\001\001\000\002\001\001\000" +
    "\042\003\104\010\254\012\055\013\057\015\107\016\126" +
    "\017\053\020\066\021\130\022\070\023\056\024\047\025" +
    "\044\026\105\027\253\061\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\104\010\257\012\055\013" +
    "\057\015\107\016\126\017\053\020\066\021\130\022\070" +
    "\023\056\024\047\025\044\026\105\027\253\046\256\061" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\104\010\263\012\055\013\057\015" +
    "\107\016\126\017\053\020\066\021\130\022\070\023\056" +
    "\024\047\025\044\026\105\027\253\061\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\104\006\265" +
    "\012\055\013\057\015\107\016\126\017\053\020\066\021" +
    "\130\022\070\023\056\024\047\025\044\026\105\027\077" +
    "\061\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\104\006\123\012\055\013\057\015\107\016\126\017" +
    "\053\020\066\021\130\022\070\023\056\024\047\025\044" +
    "\026\105\027\077\047\274\050\076\051\060\054\111\055" +
    "\067\056\100\057\106\060\065\061\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\104\012\055\013\057\015" +
    "\107\016\126\017\053\020\066\021\130\022\070\023\056" +
    "\024\047\025\044\026\105\027\310\061\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\104\006\123\012\055\013\057\015\107\016\126\017\053" +
    "\020\066\021\130\022\070\023\056\024\047\025\044\026" +
    "\105\027\077\047\313\050\076\051\060\054\111\055\067" +
    "\056\100\057\106\060\065\061\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\104\006\321\012\055\013" +
    "\057\015\107\016\126\017\053\020\066\021\130\022\070" +
    "\023\056\024\047\025\044\026\105\027\077\061\041\001" +
    "\001\000\002\001\001\000\004\051\323\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\104\006\123\012" +
    "\055\013\057\015\107\016\126\017\053\020\066\021\130" +
    "\022\070\023\056\024\047\025\044\026\105\027\077\054" +
    "\326\061\041\001\001\000\044\003\104\006\123\012\055" +
    "\013\057\015\107\016\126\017\053\020\066\021\130\022" +
    "\070\023\056\024\047\025\044\026\105\027\077\054\327" +
    "\061\041\001\001\000\042\003\104\006\331\012\055\013" +
    "\057\015\107\016\126\017\053\020\066\021\130\022\070" +
    "\023\056\024\047\025\044\026\105\027\077\061\041\001" +
    "\001\000\004\051\334\001\001\000\002\001\001\000\004" +
    "\051\333\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\104\006\336\012\055\013\057\015\107\016\126" +
    "\017\053\020\066\021\130\022\070\023\056\024\047\025" +
    "\044\026\105\027\077\061\041\001\001\000\002\001\001" +
    "\000\004\051\340\001\001\000\002\001\001\000\042\003" +
    "\104\006\353\012\055\013\057\015\107\016\126\017\053" +
    "\020\066\021\130\022\070\023\056\024\047\025\044\026" +
    "\105\027\077\061\041\001\001\000\042\003\104\012\055" +
    "\013\057\014\345\015\107\016\126\017\053\020\066\021" +
    "\130\022\070\023\056\024\047\025\044\026\105\027\346" +
    "\061\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\104\012\055\013\057\015\107\016" +
    "\126\017\053\020\066\021\130\022\070\023\056\024\047" +
    "\025\044\026\105\027\352\061\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\104\006\123\012\055\013\057\015\107\016\126\017" +
    "\053\020\066\021\130\022\070\023\056\024\047\025\044" +
    "\026\105\027\077\047\365\050\076\051\060\054\111\055" +
    "\067\056\100\057\106\060\065\061\041\001\001\000\002" +
    "\001\001\000\042\003\104\006\367\012\055\013\057\015" +
    "\107\016\126\017\053\020\066\021\130\022\070\023\056" +
    "\024\047\025\044\026\105\027\077\061\041\001\001\000" +
    "\002\001\001\000\004\051\371\001\001\000\002\001\001" +
    "\000\004\051\373\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\104\012\055\013\057\015\135\016\126" +
    "\017\053\020\066\021\130\022\070\023\056\024\047\025" +
    "\044\026\u0110\061\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\207\032\027\034" +
    "\007\036\006\037\u0102\040\213\041\033\044\u0103\045\u0100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\104" +
    "\012\055\013\057\015\135\016\126\017\053\020\066\021" +
    "\130\022\070\023\056\024\047\025\044\026\u010d\061\041" +
    "\001\001\000\016\032\027\034\007\036\006\037\u010a\040" +
    "\213\041\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\u0116\001\001\000\002\001\001\000\022" +
    "\032\027\034\007\036\006\040\025\041\033\042\026\062" +
    "\u0118\063\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido.");
    } 
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SENTENCIA_READ_WRITE ::= Read OperadorParentesisIz Identificador OperadorParentesisDer OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_READ_WRITE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SENTENCIA_READ_WRITE ::= Read OperadorParentesisIz OperadorParentesisDer OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_READ_WRITE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SENTENCIA_READ_WRITE ::= Write OperadorParentesisIz EXPRESION OperadorParentesisDer OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_READ_WRITE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTENCIA_SALTO ::= Break OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SALTO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SENTENCIA_SALTO ::= Continue OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SALTO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SENTENCIA_ITERACION ::= For OperadorParentesisIz SENTENCIA_EXPRESION SENTENCIA_EXPRESION EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ITERACION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTENCIA_ITERACION ::= For OperadorParentesisIz SENTENCIA_EXPRESION SENTENCIA_EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ITERACION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTENCIA_ITERACION ::= While OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ITERACION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTENCIA_SELECCION ::= Switch OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SENTENCIA_SELECCION ::= If OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA Else SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SENTENCIA_SELECCION ::= If OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SENTENCIA_EXPRESION ::= EXPRESION OperadorPuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		Traductor.evalExpression(eright,eleft);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EXPRESION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SENTENCIA_EXPRESION ::= OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EXPRESION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LISTA_DECLARACIONES ::= LISTA_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LISTA_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz LISTA_DECLARACIONES LISTA_SENTENCIAS OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz LISTA_DECLARACIONES OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz LISTA_SENTENCIAS OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCIA_ETIQUETADA ::= Default OperadorDoblePunto SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ETIQUETADA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIA_ETIQUETADA ::= Case EXPRESION_LAZY_OR OperadorDoblePunto SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ETIQUETADA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIA ::= error OperadorCorcheteDer 
            {
              Object RESULT =null;
		 errores.add(new ErrorSintactico(parser.getS(), "Sentencia no válida")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCIA ::= SENTENCIA_READ_WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SENTENCIA ::= SENTENCIA_SALTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTENCIA ::= SENTENCIA_ITERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTENCIA ::= SENTENCIA_SELECCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SENTENCIA ::= SENTENCIA_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIA ::= SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SENTENCIA ::= SENTENCIA_ETIQUETADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // LISTA_INICIALIZADORES ::= LISTA_INICIALIZADORES OperadorComa INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_INICIALIZADORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // LISTA_INICIALIZADORES ::= INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_INICIALIZADORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // INICIALIZADOR ::= OperadorCorcheteIz LISTA_INICIALIZADORES OperadorComa OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // INICIALIZADOR ::= OperadorCorcheteIz LISTA_INICIALIZADORES OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // INICIALIZADOR ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParCuadradoIz EXPRESION_LAZY_OR OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParCuadradoIz OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParCuadradoIz EXPRESION_LAZY_OR OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParCuadradoIz OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParentesisIz DECLARADOR_ABSTRACTO OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DECLARADOR_ABSTRACTO ::= DECLARADOR_ABSTRACTO_DIRECTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NOMBRE_TIPO ::= LISTA_CUALIFICADOR_ESPECIFICADOR DECLARADOR_ABSTRACTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOMBRE_TIPO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NOMBRE_TIPO ::= LISTA_CUALIFICADOR_ESPECIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOMBRE_TIPO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES OperadorComa Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LISTA_IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DECLARACION_PARAMETRO ::= ESPECIFICADORES_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DECLARACION_PARAMETRO ::= ESPECIFICADORES_DECLARACION DECLARADOR_ABSTRACTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DECLARACION_PARAMETRO ::= ESPECIFICADORES_DECLARACION DECLARADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LISTA_PARAMETROS ::= LISTA_PARAMETROS OperadorComa DECLARACION_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LISTA_PARAMETROS ::= DECLARACION_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LISTA_TIPOS_PARAMETROS ::= LISTA_PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_TIPOS_PARAMETROS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DECLARADOR ::= DECLARADOR OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECLARADOR ::= DECLARADOR OperadorParentesisIz LISTA_IDENTIFICADORES OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECLARADOR ::= DECLARADOR OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLARADOR ::= DECLARADOR OperadorParCuadradoIz OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLARADOR ::= DECLARADOR OperadorParCuadradoIz EXPRESION_LAZY_OR OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARADOR ::= OperadorParentesisIz DECLARADOR OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARADOR ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaId((String) id) ;  System.out.println("Encuentra: "+id); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CUALIFICADOR_TIPO ::= Const 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUALIFICADOR_TIPO",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= CUALIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= CUALIFICADOR_TIPO LISTA_CUALIFICADOR_ESPECIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= ESPECIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= ESPECIFICADOR_TIPO LISTA_CUALIFICADOR_ESPECIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ESPECIFICADOR_TIPO ::= Short 
            {
              Object RESULT =null;
		int short_tokenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int short_tokenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object short_token = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaTipo((String) short_token) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ESPECIFICADOR_TIPO ::= Long 
            {
              Object RESULT =null;
		int long_tokenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int long_tokenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object long_token = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaTipo((String) long_token) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ESPECIFICADOR_TIPO ::= Int 
            {
              Object RESULT =null;
		int int_tokenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int int_tokenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object int_token = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaTipo((String) int_token) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ESPECIFICADOR_TIPO ::= Char 
            {
              Object RESULT =null;
		int char_tokenleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int char_tokenright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object char_token = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaTipo((String) char_token) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARADOR_INICIALIZADOR ::= DECLARADOR OperadorIgual INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_INICIALIZADOR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARADOR_INICIALIZADOR ::= DECLARADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_INICIALIZADOR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LISTA_DECLARADORES_INICIALIZADORES ::= LISTA_DECLARADORES_INICIALIZADORES OperadorComa DECLARADOR_INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARADORES_INICIALIZADORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LISTA_DECLARADORES_INICIALIZADORES ::= DECLARADOR_INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARADORES_INICIALIZADORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ESPECIFICADORES_DECLARACION ::= CUALIFICADOR_TIPO ESPECIFICADORES_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ESPECIFICADORES_DECLARACION ::= CUALIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ESPECIFICADORES_DECLARACION ::= ESPECIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ESPECIFICADORES_DECLARACION ::= ESPECIFICADOR_TIPO ESPECIFICADORES_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION ::= error OperadorPuntoComa 
            {
              Object RESULT =null;
		 errores.add(new ErrorSintactico(parser.getS(), "Declaración no válida")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION ::= ESPECIFICADORES_DECLARACION LISTA_DECLARADORES_INICIALIZADORES OperadorPuntoComa 
            {
              Object RESULT =null;
		int OpPuntoComaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int OpPuntoComaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object OpPuntoComa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("Fin de declaración: ");  System.out.println("Insertando en ts: "); Traductor.insertarTS(OpPuntoComaright,OpPuntoComaleft); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION ::= ESPECIFICADORES_DECLARACION OperadorPuntoComa 
            {
              Object RESULT =null;
		int OpPuntoComaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int OpPuntoComaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object OpPuntoComa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("Fin de declaración: ");  System.out.println("Insertando en ts: "); Traductor.insertarTS(OpPuntoComaright,OpPuntoComaleft); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= OperadorNegacion EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= EXPRESION OperadorComa EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERADOR_ASIGNACION ::= OperadorModIgual 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERADOR_ASIGNACION ::= OperadorDivIgual 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERADOR_ASIGNACION ::= OperadorMultiIgual 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERADOR_ASIGNACION ::= OperadorMenosIgual 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERADOR_ASIGNACION ::= OperadorMasIgual 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERADOR_ASIGNACION ::= OperadorIgual 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION_ASIGNACION ::= EXPRESION_UNARIA OPERADOR_ASIGNACION EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION_ASIGNACION ::= EXPRESION_LAZY_OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION_LAZY_OR ::= EXPRESION_LAZY_OR OperadorORLazy NT$19 EXPRESION_LAZY_AND 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_OR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$19 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$19",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION_LAZY_OR ::= EXPRESION_LAZY_AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_OR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION_LAZY_AND ::= EXPRESION_LAZY_AND OperadorANDLazy NT$18 EXPRESION_OR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_AND",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$18 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$18",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION_LAZY_AND ::= EXPRESION_OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_AND",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION_OR ::= EXPRESION_OR OperadorOR NT$17 EXPRESION_XOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_OR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$17 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$17",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION_OR ::= EXPRESION_XOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_OR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION_XOR ::= EXPRESION_XOR OperadorXOR NT$16 EXPRESION_AND 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_XOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$16 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$16",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION_XOR ::= EXPRESION_AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_XOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION_AND ::= EXPRESION_AND OperadorAND NT$15 EXPRESION_IGUALDAD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AND",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$15 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$15",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION_AND ::= EXPRESION_IGUALDAD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AND",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION_IGUALDAD ::= EXPRESION_IGUALDAD OperadorDesigual NT$14 EXPRESION_RELACIONAL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_IGUALDAD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$14 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$14",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION_IGUALDAD ::= EXPRESION_IGUALDAD OperadorIgualIgual NT$13 EXPRESION_RELACIONAL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_IGUALDAD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$13 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$13",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION_IGUALDAD ::= EXPRESION_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_IGUALDAD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMayorIgual NT$12 EXPRESION_ADITIVA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$12 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMenorIgual NT$11 EXPRESION_ADITIVA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$11 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMayor NT$10 EXPRESION_ADITIVA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$10 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMenor NT$9 EXPRESION_ADITIVA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$9 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION_RELACIONAL ::= EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION_ADITIVA ::= EXPRESION_ADITIVA OperadorMenos NT$8 EXPRESION_MULTIPLICATIVA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ADITIVA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$8 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION_ADITIVA ::= EXPRESION_ADITIVA OperadorMas NT$7 EXPRESION_MULTIPLICATIVA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ADITIVA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$7 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION_ADITIVA ::= EXPRESION_MULTIPLICATIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ADITIVA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_MULTIPLICATIVA OperadorModulo NT$6 EXPRESION_UNARIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$6 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_MULTIPLICATIVA OperadorDivision NT$5 EXPRESION_UNARIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$5 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_MULTIPLICATIVA OperadorMultiplicacion NT$4 EXPRESION_UNARIA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$4 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERADOR_UNARIO ::= OperadorNegacion 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERADOR_UNARIO ::= OperadorMenos 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERADOR_UNARIO ::= OperadorMas 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERADOR_UNARIO ::= OperadorMultiplicacion 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERADOR_UNARIO ::= OperadorAND 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaOperador((String) op) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION_UNARIA ::= OPERADOR_UNARIO EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION_UNARIA ::= OperadorDecremental EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION_UNARIA ::= OperadorIncremental EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION_UNARIA ::= EXPRESION_POSTFIJA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_ARGUMENTOS_EXPRESIONES ::= LISTA_ARGUMENTOS_EXPRESIONES OperadorComa EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ARGUMENTOS_EXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_ARGUMENTOS_EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ARGUMENTOS_EXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorDecremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorIncremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorParentesisIz LISTA_ARGUMENTOS_EXPRESIONES OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorParCuadradoIz EXPRESION OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION_POSTFIJA ::= EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LITERAL ::= Caracter 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaConstante((String) c);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LITERAL ::= HexadecimalFlotante 
            {
              Object RESULT =null;
		int hfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int hfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object hf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaConstante((String) hf);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LITERAL ::= Hexadecimal 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaConstante((String) h);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LITERAL ::= OctalFlotante 
            {
              Object RESULT =null;
		int oeleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object oe = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaConstante((String) oe);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LITERAL ::= Octal 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaConstante((String) o);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LITERAL ::= FlotanteExponente 
            {
              Object RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fe = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaConstante((String) fe);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LITERAL ::= Flotante 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaConstante((String) f);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LITERAL ::= Entero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaConstante((String) e) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION_PRIMARIA ::= OperadorParentesisIz EXPRESION OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION_PRIMARIA ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESION_PRIMARIA ::= Identificador 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Traductor.recuerdaVariable((String) identificador, identificadorright, identificadorleft) ;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RESTO_RESTO_DECLARACIONF ::= OperadorParentesisDer NT$3 SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTO_RESTO_DECLARACIONF",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$3 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.insertarFuncion(opright,opleft); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RESTO_DECLARACIONF ::= RESTO_RESTO_DECLARACIONF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTO_DECLARACIONF",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RESTO_DECLARACIONF ::= LISTA_IDENTIFICADORES RESTO_RESTO_DECLARACIONF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTO_DECLARACIONF",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RESTO_DECLARACIONF ::= LISTA_PARAMETROS RESTO_RESTO_DECLARACIONF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESTO_DECLARACIONF",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION_FUNCION ::= error OperadorCorcheteDer 
            {
              Object RESULT =null;
		 errores.add(new ErrorSintactico(parser.getS(), "Declaración de función no válida")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_FUNCION ::= Void NT$1 Identificador NT$2 OperadorParentesisIz RESTO_DECLARACIONF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaFuncion((String) id); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaTipo((String) v); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION_FUNCION ::= ESPECIFICADORES_DECLARACION Identificador NT$0 OperadorParentesisIz RESTO_DECLARACIONF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 Traductor.recuerdaFuncion((String) id); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION_EXTERNA ::= DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_EXTERNA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION_EXTERNA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_EXTERNA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INICIO DECLARACION_EXTERNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DECLARACION_EXTERNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

