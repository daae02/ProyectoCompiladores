
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 16 20:33:24 CST 2022
//----------------------------------------------------

package Sintactico;

import static Sintactico.ListaErroresSintactico.errores;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 16 20:33:24 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\237\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\011\003\000\002\011\003\000\002\005\010" +
    "\000\002\005\010\000\002\005\010\000\002\005\010\000" +
    "\002\005\007\000\002\005\007\000\002\005\004\000\002" +
    "\012\003\000\002\012\003\000\002\012\005\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\013\003\000\002\013\006\000\002" +
    "\013\005\000\002\013\006\000\002\013\004\000\002\013" +
    "\004\000\002\014\003\000\002\014\005\000\002\015\003" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\016\003\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\017\003" +
    "\000\002\017\005\000\002\017\005\000\002\020\003\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\021\003\000\002\021\005\000\002\021" +
    "\005\000\002\022\003\000\002\022\005\000\002\023\003" +
    "\000\002\023\005\000\002\024\003\000\002\024\005\000" +
    "\002\025\003\000\002\025\005\000\002\026\003\000\002" +
    "\026\005\000\002\027\003\000\002\027\005\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\006\003\000" +
    "\002\006\005\000\002\006\004\000\002\004\004\000\002" +
    "\004\005\000\002\004\004\000\002\032\004\000\002\032" +
    "\003\000\002\032\003\000\002\032\004\000\002\031\003" +
    "\000\002\031\005\000\002\033\003\000\002\033\005\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\035\004\000\002\035\003\000\002\035" +
    "\004\000\002\035\003\000\002\036\003\000\002\007\003" +
    "\000\002\007\005\000\002\007\006\000\002\007\005\000" +
    "\002\007\006\000\002\007\006\000\002\007\005\000\002" +
    "\037\003\000\002\040\003\000\002\040\005\000\002\041" +
    "\004\000\002\041\004\000\002\041\003\000\002\042\003" +
    "\000\002\042\005\000\002\043\003\000\002\043\004\000" +
    "\002\044\003\000\002\045\005\000\002\045\004\000\002" +
    "\045\005\000\002\045\005\000\002\045\006\000\002\045" +
    "\004\000\002\045\005\000\002\045\005\000\002\045\006" +
    "\000\002\010\003\000\002\010\005\000\002\010\006\000" +
    "\002\046\003\000\002\046\005\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\004" +
    "\000\002\050\006\000\002\050\005\000\002\051\004\000" +
    "\002\051\005\000\002\051\005\000\002\051\006\000\002" +
    "\052\003\000\002\052\004\000\002\053\003\000\002\053" +
    "\004\000\002\054\003\000\002\054\004\000\002\055\007" +
    "\000\002\055\011\000\002\055\007\000\002\056\007\000" +
    "\002\056\010\000\002\056\011\000\002\057\004\000\002" +
    "\057\004\000\002\060\007\000\002\060\006\000\002\060" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\020\003\017\017\014\020\016\021\015\022" +
    "\006\033\007\043\020\001\002\000\022\002\000\003\000" +
    "\017\000\020\000\021\000\022\000\033\000\043\000\001" +
    "\002\000\030\004\uffb0\005\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\016\uffb0\017\014\020\016\021\015\022\006\033\007\001" +
    "\002\000\030\004\uffa7\005\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\033\uffa7\001" +
    "\002\000\030\004\uffa2\005\uffa2\012\uffa2\013\uffa2\014\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\033\uffa2\001" +
    "\002\000\030\004\uffb1\005\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\016\uffb1\017\014\020\016\021\015\022\006\033\007\001" +
    "\002\000\022\002\ufffe\003\ufffe\017\ufffe\020\ufffe\021\ufffe" +
    "\022\ufffe\033\ufffe\043\ufffe\001\002\000\022\002\u010e\003" +
    "\017\017\014\020\016\021\015\022\006\033\007\043\020" +
    "\001\002\000\010\004\u0103\013\166\016\162\001\002\000" +
    "\030\004\uffaa\005\uffaa\012\uffaa\013\uffaa\014\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\033\uffaa\001\002\000" +
    "\030\004\uffa8\005\uffa8\012\uffa8\013\uffa8\014\uffa8\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\022\uffa8\033\uffa8\001\002\000" +
    "\030\004\uffa9\005\uffa9\012\uffa9\013\uffa9\014\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\033\uffa9\001\002\000" +
    "\006\006\u0102\016\300\001\002\000\004\004\022\001\002" +
    "\000\022\002\ufffd\003\ufffd\017\ufffd\020\ufffd\021\ufffd\022" +
    "\ufffd\033\ufffd\043\ufffd\001\002\000\004\013\023\001\002" +
    "\000\020\004\027\012\031\017\014\020\016\021\015\022" +
    "\006\033\007\001\002\000\006\005\204\012\u0100\001\002" +
    "\000\006\005\202\012\376\001\002\000\014\004\165\005" +
    "\uff95\012\uff95\013\355\014\351\001\002\000\006\005\uff94" +
    "\012\uff94\001\002\000\006\005\uff99\012\uff99\001\002\000" +
    "\004\007\033\001\002\000\022\002\ufff7\003\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\033\ufff7\043\ufff7\001\002\000" +
    "\112\003\065\004\110\006\124\007\033\010\070\013\067" +
    "\016\114\017\014\020\016\021\015\022\006\023\034\024" +
    "\057\025\055\026\107\027\123\030\036\031\071\032\111" +
    "\033\007\034\113\035\046\036\060\037\056\040\066\041" +
    "\037\044\077\045\042\046\074\047\045\062\050\066\117" +
    "\067\112\070\044\071\121\072\116\001\002\000\102\005" +
    "\ufff2\006\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2" +
    "\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072" +
    "\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\001\002" +
    "\000\044\004\110\010\131\013\067\023\034\024\057\025" +
    "\055\026\107\027\123\030\036\031\071\032\111\062\050" +
    "\066\117\067\112\070\044\071\121\072\116\001\002\000" +
    "\102\005\uffed\006\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054" +
    "\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed" +
    "\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071" +
    "\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076\uffed\077\uffed" +
    "\001\002\000\004\013\342\001\002\000\022\005\uffc2\006" +
    "\uffc2\011\uffc2\012\uffc2\015\uffc2\016\uffc2\056\uffc2\057\213" +
    "\001\002\000\100\003\uff71\004\uff71\006\uff71\007\uff71\010" +
    "\uff71\013\uff71\016\uff71\023\uff71\024\uff71\025\uff71\026\uff71" +
    "\027\uff71\030\uff71\031\uff71\032\uff71\034\uff71\035\uff71\036" +
    "\uff71\037\uff71\040\uff71\041\uff71\044\uff71\045\uff71\046\uff71" +
    "\047\uff71\062\uff71\066\uff71\067\uff71\070\uff71\071\uff71\072" +
    "\uff71\001\002\000\004\011\340\001\002\000\024\005\uffc4" +
    "\006\uffc4\011\uffc4\012\uffc4\015\uffc4\016\uffc4\056\uffc4\057" +
    "\uffc4\061\215\001\002\000\044\004\uffdc\010\uffdc\013\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\062\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc" +
    "\072\uffdc\001\002\000\004\016\337\001\002\000\004\013" +
    "\331\001\002\000\050\005\uffd2\006\uffd2\011\uffd2\012\uffd2" +
    "\015\uffd2\016\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\070\141" +
    "\071\140\077\uffd2\001\002\000\044\004\uffde\010\uffde\013" +
    "\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\062\uffde\066\uffde\067\uffde\070\uffde\071" +
    "\uffde\072\uffde\001\002\000\102\005\uffea\006\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\050\uffea\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066" +
    "\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea" +
    "\075\uffea\076\uffea\077\uffea\001\002\000\100\003\uff80\004" +
    "\uff80\006\uff80\007\uff80\010\uff80\013\uff80\016\uff80\023\uff80" +
    "\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032" +
    "\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80" +
    "\044\uff80\045\uff80\046\uff80\047\uff80\062\uff80\066\uff80\067" +
    "\uff80\070\uff80\071\uff80\072\uff80\001\002\000\026\005\uffc6" +
    "\006\uffc6\011\uffc6\012\uffc6\015\uffc6\016\uffc6\056\uffc6\057" +
    "\uffc6\060\217\061\uffc6\001\002\000\102\005\uffe2\006\uffe2" +
    "\011\uffe2\012\uffe2\013\317\014\315\015\uffe2\016\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065" +
    "\uffe2\066\320\067\316\070\uffe2\071\uffe2\072\uffe2\073\uffe2" +
    "\074\uffe2\075\uffe2\076\uffe2\077\uffe2\001\002\000\102\005" +
    "\ufff0\006\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055" +
    "\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0" +
    "\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072" +
    "\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0\001\002" +
    "\000\004\013\311\001\002\000\102\005\ufff1\006\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1" +
    "\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074" +
    "\ufff1\075\ufff1\076\ufff1\077\ufff1\001\002\000\004\013\301" +
    "\001\002\000\044\005\uffcd\006\uffcd\011\uffcd\012\uffcd\015" +
    "\uffcd\016\uffcd\051\133\052\136\053\134\054\135\055\uffcd" +
    "\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\077\uffcd\001" +
    "\002\000\100\003\uff7b\004\uff7b\006\uff7b\007\uff7b\010\uff7b" +
    "\013\uff7b\016\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027" +
    "\uff7b\030\uff7b\031\uff7b\032\uff7b\034\uff7b\035\uff7b\036\uff7b" +
    "\037\uff7b\040\uff7b\041\uff7b\044\uff7b\045\uff7b\046\uff7b\047" +
    "\uff7b\062\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b" +
    "\001\002\000\100\003\uff7e\004\uff7e\006\uff7e\007\uff7e\010" +
    "\uff7e\013\uff7e\016\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e" +
    "\027\uff7e\030\uff7e\031\uff7e\032\uff7e\034\uff7e\035\uff7e\036" +
    "\uff7e\037\uff7e\040\uff7e\041\uff7e\044\uff7e\045\uff7e\046\uff7e" +
    "\047\uff7e\062\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072" +
    "\uff7e\001\002\000\030\005\uffc8\006\uffc8\011\uffc8\012\uffc8" +
    "\015\uffc8\016\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062" +
    "\221\001\002\000\006\006\253\016\300\001\002\000\004" +
    "\013\274\001\002\000\044\004\110\010\070\013\067\023" +
    "\034\024\057\025\055\026\107\027\123\030\036\031\071" +
    "\032\111\062\050\066\117\067\112\070\044\071\121\072" +
    "\116\001\002\000\044\004\uffda\010\uffda\013\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\062\050\066\uffda\067\uffda\070\044\071\121\072\116" +
    "\001\002\000\102\005\uffec\006\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061" +
    "\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec" +
    "\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075\uffec\076" +
    "\uffec\077\uffec\001\002\000\100\003\uff81\004\uff81\006\uff81" +
    "\007\uff81\010\uff81\013\uff81\016\uff81\023\uff81\024\uff81\025" +
    "\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81\034\uff81" +
    "\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\044\uff81\045" +
    "\uff81\046\uff81\047\uff81\062\uff81\066\uff81\067\uff81\070\uff81" +
    "\071\uff81\072\uff81\001\002\000\012\005\uffb8\012\uffb8\015" +
    "\uffb8\016\uffb8\001\002\000\004\016\270\001\002\000\100" +
    "\003\uff7d\004\uff7d\006\uff7d\007\uff7d\010\uff7d\013\uff7d\016" +
    "\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d" +
    "\031\uff7d\032\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040" +
    "\uff7d\041\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\062\uff7d" +
    "\066\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d\001\002\000" +
    "\112\003\uff73\004\uff73\006\uff73\007\uff73\010\uff73\013\uff73" +
    "\016\uff73\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024" +
    "\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73" +
    "\033\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041" +
    "\uff73\044\uff73\045\uff73\046\uff73\047\uff73\062\uff73\066\uff73" +
    "\067\uff73\070\uff73\071\uff73\072\uff73\001\002\000\044\004" +
    "\110\010\131\013\067\023\034\024\057\025\055\026\107" +
    "\027\123\030\036\031\071\032\111\062\050\066\117\067" +
    "\112\070\044\071\121\072\116\001\002\000\102\005\ufff4" +
    "\006\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4" +
    "\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4\001\002\000" +
    "\016\005\uffc0\006\uffc0\012\uffc0\015\uffc0\016\uffc0\056\211" +
    "\001\002\000\100\003\uff7c\004\uff7c\006\uff7c\007\uff7c\010" +
    "\uff7c\013\uff7c\016\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c" +
    "\027\uff7c\030\uff7c\031\uff7c\032\uff7c\034\uff7c\035\uff7c\036" +
    "\uff7c\037\uff7c\040\uff7c\041\uff7c\044\uff7c\045\uff7c\046\uff7c" +
    "\047\uff7c\062\uff7c\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072" +
    "\uff7c\001\002\000\070\005\uffd9\006\uffd9\012\uffd9\015\uffd9" +
    "\016\uffd9\050\255\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\260" +
    "\064\263\065\261\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074" +
    "\uffd9\075\262\076\256\077\uffd9\001\002\000\100\003\uff7f" +
    "\004\uff7f\006\uff7f\007\uff7f\010\uff7f\013\uff7f\016\uff7f\023" +
    "\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f" +
    "\032\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041" +
    "\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\062\uff7f\066\uff7f" +
    "\067\uff7f\070\uff7f\071\uff7f\072\uff7f\001\002\000\100\003" +
    "\251\004\110\006\254\007\033\010\070\013\067\016\114" +
    "\023\034\024\057\025\055\026\107\027\123\030\036\031" +
    "\071\032\111\034\113\035\046\036\060\037\056\040\066" +
    "\041\037\044\077\045\042\046\074\047\045\062\050\066" +
    "\117\067\112\070\044\071\121\072\116\001\002\000\112" +
    "\003\065\004\110\006\247\007\033\010\070\013\067\016" +
    "\114\017\014\020\016\021\015\022\006\023\034\024\057" +
    "\025\055\026\107\027\123\030\036\031\071\032\111\033" +
    "\007\034\113\035\046\036\060\037\056\040\066\041\037" +
    "\044\077\045\042\046\074\047\045\062\050\066\117\067" +
    "\112\070\044\071\121\072\116\001\002\000\102\005\uffef" +
    "\006\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef" +
    "\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064" +
    "\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\072\uffef" +
    "\073\uffef\074\uffef\075\uffef\076\uffef\077\uffef\001\002\000" +
    "\102\005\ufff5\006\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054" +
    "\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5" +
    "\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071" +
    "\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5" +
    "\001\002\000\102\005\uffeb\006\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb" +
    "\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\076" +
    "\uffeb\077\uffeb\001\002\000\044\004\110\010\131\013\067" +
    "\023\034\024\057\025\055\026\107\027\123\030\036\031" +
    "\071\032\111\062\050\066\117\067\112\070\044\071\121" +
    "\072\116\001\002\000\004\013\240\001\002\000\102\003" +
    "\uff6f\004\uff6f\006\uff6f\007\uff6f\010\uff6f\012\uff6f\013\uff6f" +
    "\016\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030" +
    "\uff6f\031\uff6f\032\uff6f\034\uff6f\035\uff6f\036\uff6f\037\uff6f" +
    "\040\uff6f\041\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f\062" +
    "\uff6f\066\uff6f\067\uff6f\070\uff6f\071\uff6f\072\uff6f\001\002" +
    "\000\010\004\165\013\166\016\162\001\002\000\044\004" +
    "\uffdd\010\uffdd\013\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\062\uffdd\066\uffdd\067" +
    "\uffdd\070\uffdd\071\uffdd\072\uffdd\001\002\000\044\004\110" +
    "\010\131\013\067\023\034\024\057\025\055\026\107\027" +
    "\123\030\036\031\071\032\111\062\050\066\117\067\112" +
    "\070\044\071\121\072\116\001\002\000\006\005\157\016" +
    "\156\001\002\000\044\004\uffdb\010\uffdb\013\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\062\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb" +
    "\001\002\000\056\005\uffd5\006\uffd5\011\uffd5\012\uffd5\015" +
    "\uffd5\016\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\070\uffd5\071" +
    "\uffd5\072\145\073\144\074\143\077\uffd5\001\002\000\102" +
    "\005\uffee\006\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee" +
    "\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063" +
    "\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee" +
    "\072\uffee\073\uffee\074\uffee\075\uffee\076\uffee\077\uffee\001" +
    "\002\000\120\002\uff77\003\uff77\004\uff77\006\uff77\007\uff77" +
    "\010\uff77\013\uff77\016\uff77\017\uff77\020\uff77\021\uff77\022" +
    "\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77\030\uff77" +
    "\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036\uff77\037" +
    "\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77" +
    "\046\uff77\047\uff77\062\uff77\066\uff77\067\uff77\070\uff77\071" +
    "\uff77\072\uff77\001\002\000\034\005\uffca\006\uffca\011\uffca" +
    "\012\uffca\015\uffca\016\uffca\055\127\056\uffca\057\uffca\060" +
    "\uffca\061\uffca\062\uffca\077\126\001\002\000\044\004\110" +
    "\010\131\013\067\023\034\024\057\025\055\026\107\027" +
    "\123\030\036\031\071\032\111\062\050\066\117\067\112" +
    "\070\044\071\121\072\116\001\002\000\044\004\110\010" +
    "\131\013\067\023\034\024\057\025\055\026\107\027\123" +
    "\030\036\031\071\032\111\062\050\066\117\067\112\070" +
    "\044\071\121\072\116\001\002\000\056\005\uffd9\006\uffd9" +
    "\011\uffd9\012\uffd9\015\uffd9\016\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9" +
    "\062\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\077" +
    "\uffd9\001\002\000\044\004\uffda\010\uffda\013\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\062\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda" +
    "\001\002\000\044\005\uffcb\006\uffcb\011\uffcb\012\uffcb\015" +
    "\uffcb\016\uffcb\051\133\052\136\053\134\054\135\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\077\uffcb\001" +
    "\002\000\044\004\110\010\131\013\067\023\034\024\057" +
    "\025\055\026\107\027\123\030\036\031\071\032\111\062" +
    "\050\066\117\067\112\070\044\071\121\072\116\001\002" +
    "\000\044\004\110\010\131\013\067\023\034\024\057\025" +
    "\055\026\107\027\123\030\036\031\071\032\111\062\050" +
    "\066\117\067\112\070\044\071\121\072\116\001\002\000" +
    "\044\004\110\010\131\013\067\023\034\024\057\025\055" +
    "\026\107\027\123\030\036\031\071\032\111\062\050\066" +
    "\117\067\112\070\044\071\121\072\116\001\002\000\044" +
    "\004\110\010\131\013\067\023\034\024\057\025\055\026" +
    "\107\027\123\030\036\031\071\032\111\062\050\066\117" +
    "\067\112\070\044\071\121\072\116\001\002\000\050\005" +
    "\uffd0\006\uffd0\011\uffd0\012\uffd0\015\uffd0\016\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\070\141\071\140\077\uffd0\001\002" +
    "\000\044\004\110\010\131\013\067\023\034\024\057\025" +
    "\055\026\107\027\123\030\036\031\071\032\111\062\050" +
    "\066\117\067\112\070\044\071\121\072\116\001\002\000" +
    "\044\004\110\010\131\013\067\023\034\024\057\025\055" +
    "\026\107\027\123\030\036\031\071\032\111\062\050\066" +
    "\117\067\112\070\044\071\121\072\116\001\002\000\056" +
    "\005\uffd4\006\uffd4\011\uffd4\012\uffd4\015\uffd4\016\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\070\uffd4\071\uffd4\072\145\073" +
    "\144\074\143\077\uffd4\001\002\000\044\004\110\010\131" +
    "\013\067\023\034\024\057\025\055\026\107\027\123\030" +
    "\036\031\071\032\111\062\050\066\117\067\112\070\044" +
    "\071\121\072\116\001\002\000\044\004\110\010\131\013" +
    "\067\023\034\024\057\025\055\026\107\027\123\030\036" +
    "\031\071\032\111\062\050\066\117\067\112\070\044\071" +
    "\121\072\116\001\002\000\044\004\110\010\131\013\067" +
    "\023\034\024\057\025\055\026\107\027\123\030\036\031" +
    "\071\032\111\062\050\066\117\067\112\070\044\071\121" +
    "\072\116\001\002\000\056\005\uffd8\006\uffd8\011\uffd8\012" +
    "\uffd8\015\uffd8\016\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\070" +
    "\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\077\uffd8\001\002" +
    "\000\056\005\uffd7\006\uffd7\011\uffd7\012\uffd7\015\uffd7\016" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\061\uffd7\062\uffd7\070\uffd7\071\uffd7\072" +
    "\uffd7\073\uffd7\074\uffd7\077\uffd7\001\002\000\056\005\uffd6" +
    "\006\uffd6\011\uffd6\012\uffd6\015\uffd6\016\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\061\uffd6\062\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074" +
    "\uffd6\077\uffd6\001\002\000\056\005\uffd3\006\uffd3\011\uffd3" +
    "\012\uffd3\015\uffd3\016\uffd3\051\uffd3\052\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3" +
    "\070\uffd3\071\uffd3\072\145\073\144\074\143\077\uffd3\001" +
    "\002\000\050\005\uffd1\006\uffd1\011\uffd1\012\uffd1\015\uffd1" +
    "\016\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\070\141\071\140" +
    "\077\uffd1\001\002\000\050\005\uffcf\006\uffcf\011\uffcf\012" +
    "\uffcf\015\uffcf\016\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\070" +
    "\141\071\140\077\uffcf\001\002\000\050\005\uffce\006\uffce" +
    "\011\uffce\012\uffce\015\uffce\016\uffce\051\uffce\052\uffce\053" +
    "\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce" +
    "\062\uffce\070\141\071\140\077\uffce\001\002\000\044\005" +
    "\uffcc\006\uffcc\011\uffcc\012\uffcc\015\uffcc\016\uffcc\051\133" +
    "\052\136\053\134\054\135\055\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\077\uffcc\001\002\000\102\003\uff6e" +
    "\004\uff6e\006\uff6e\007\uff6e\010\uff6e\012\uff6e\013\uff6e\016" +
    "\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e" +
    "\031\uff6e\032\uff6e\034\uff6e\035\uff6e\036\uff6e\037\uff6e\040" +
    "\uff6e\041\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\062\uff6e" +
    "\066\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e\001\002\000" +
    "\044\004\110\010\131\013\067\023\034\024\057\025\055" +
    "\026\107\027\123\030\036\031\071\032\111\062\050\066" +
    "\117\067\112\070\044\071\121\072\116\001\002\000\012" +
    "\005\uffb7\012\uffb7\015\uffb7\016\uffb7\001\002\000\072\005" +
    "\uffe1\006\uffe1\011\uffe1\012\uffe1\015\uffe1\016\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076" +
    "\uffe1\077\uffe1\001\002\000\116\002\uffb5\003\uffb5\004\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\013\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\043\uffb5\044\uffb5" +
    "\045\uffb5\046\uffb5\047\uffb5\062\uffb5\066\uffb5\067\uffb5\070" +
    "\uffb5\071\uffb5\072\uffb5\001\002\000\014\005\uffac\013\173" +
    "\014\171\016\uffac\050\226\001\002\000\006\005\224\016" +
    "\223\001\002\000\016\005\uffa1\012\uffa1\013\uffa1\014\uffa1" +
    "\016\uffa1\050\uffa1\001\002\000\006\004\165\013\166\001" +
    "\002\000\006\005\uffae\016\uffae\001\002\000\010\012\172" +
    "\013\173\014\171\001\002\000\046\004\110\010\131\013" +
    "\067\015\206\023\034\024\057\025\055\026\107\027\123" +
    "\030\036\031\071\032\111\062\050\066\117\067\112\070" +
    "\044\071\121\072\116\001\002\000\016\005\uffa0\012\uffa0" +
    "\013\uffa0\014\uffa0\016\uffa0\050\uffa0\001\002\000\020\004" +
    "\027\012\176\017\014\020\016\021\015\022\006\033\007" +
    "\001\002\000\006\005\204\012\uff9a\001\002\000\006\005" +
    "\202\012\201\001\002\000\016\005\uff9b\012\uff9b\013\uff9b" +
    "\014\uff9b\016\uff9b\050\uff9b\001\002\000\004\012\200\001" +
    "\002\000\016\005\uff9d\012\uff9d\013\uff9d\014\uff9d\016\uff9d" +
    "\050\uff9d\001\002\000\016\005\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\016\uff9c\050\uff9c\001\002\000\004\004\203\001\002" +
    "\000\006\005\uff93\012\uff93\001\002\000\014\017\014\020" +
    "\016\021\015\022\006\033\007\001\002\000\006\005\uff98" +
    "\012\uff98\001\002\000\016\005\uff9e\012\uff9e\013\uff9e\014" +
    "\uff9e\016\uff9e\050\uff9e\001\002\000\006\015\210\056\211" +
    "\001\002\000\016\005\uff9f\012\uff9f\013\uff9f\014\uff9f\016" +
    "\uff9f\050\uff9f\001\002\000\044\004\110\010\131\013\067" +
    "\023\034\024\057\025\055\026\107\027\123\030\036\031" +
    "\071\032\111\062\050\066\117\067\112\070\044\071\121" +
    "\072\116\001\002\000\022\005\uffc1\006\uffc1\011\uffc1\012" +
    "\uffc1\015\uffc1\016\uffc1\056\uffc1\057\213\001\002\000\044" +
    "\004\110\010\131\013\067\023\034\024\057\025\055\026" +
    "\107\027\123\030\036\031\071\032\111\062\050\066\117" +
    "\067\112\070\044\071\121\072\116\001\002\000\024\005" +
    "\uffc3\006\uffc3\011\uffc3\012\uffc3\015\uffc3\016\uffc3\056\uffc3" +
    "\057\uffc3\061\215\001\002\000\044\004\110\010\131\013" +
    "\067\023\034\024\057\025\055\026\107\027\123\030\036" +
    "\031\071\032\111\062\050\066\117\067\112\070\044\071" +
    "\121\072\116\001\002\000\026\005\uffc5\006\uffc5\011\uffc5" +
    "\012\uffc5\015\uffc5\016\uffc5\056\uffc5\057\uffc5\060\217\061" +
    "\uffc5\001\002\000\044\004\110\010\131\013\067\023\034" +
    "\024\057\025\055\026\107\027\123\030\036\031\071\032" +
    "\111\062\050\066\117\067\112\070\044\071\121\072\116" +
    "\001\002\000\030\005\uffc7\006\uffc7\011\uffc7\012\uffc7\015" +
    "\uffc7\016\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\221" +
    "\001\002\000\044\004\110\010\131\013\067\023\034\024" +
    "\057\025\055\026\107\027\123\030\036\031\071\032\111" +
    "\062\050\066\117\067\112\070\044\071\121\072\116\001" +
    "\002\000\034\005\uffc9\006\uffc9\011\uffc9\012\uffc9\015\uffc9" +
    "\016\uffc9\055\127\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\077\126\001\002\000\116\002\uffb4\003\uffb4\004\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\013\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\062\uffb4\066\uffb4\067\uffb4\070" +
    "\uffb4\071\uffb4\072\uffb4\001\002\000\006\004\165\013\166" +
    "\001\002\000\006\005\uffad\016\uffad\001\002\000\046\004" +
    "\110\007\231\010\131\013\067\023\034\024\057\025\055" +
    "\026\107\027\123\030\036\031\071\032\111\062\050\066" +
    "\117\067\112\070\044\071\121\072\116\001\002\000\010" +
    "\005\uff86\006\uff86\016\uff86\001\002\000\006\005\uffab\016" +
    "\uffab\001\002\000\046\004\110\007\231\010\131\013\067" +
    "\023\034\024\057\025\055\026\107\027\123\030\036\031" +
    "\071\032\111\062\050\066\117\067\112\070\044\071\121" +
    "\072\116\001\002\000\006\005\235\006\234\001\002\000" +
    "\006\005\uff83\006\uff83\001\002\000\010\005\uff85\006\uff85" +
    "\016\uff85\001\002\000\050\004\110\006\236\007\231\010" +
    "\131\013\067\023\034\024\057\025\055\026\107\027\123" +
    "\030\036\031\071\032\111\062\050\066\117\067\112\070" +
    "\044\071\121\072\116\001\002\000\010\005\uff84\006\uff84" +
    "\016\uff84\001\002\000\006\005\uff82\006\uff82\001\002\000" +
    "\044\004\110\010\070\013\067\023\034\024\057\025\055" +
    "\026\107\027\123\030\036\031\071\032\111\062\050\066" +
    "\117\067\112\070\044\071\121\072\116\001\002\000\006" +
    "\005\157\012\242\001\002\000\004\016\243\001\002\000" +
    "\100\003\uff65\004\uff65\006\uff65\007\uff65\010\uff65\013\uff65" +
    "\016\uff65\023\uff65\024\uff65\025\uff65\026\uff65\027\uff65\030" +
    "\uff65\031\uff65\032\uff65\034\uff65\035\uff65\036\uff65\037\uff65" +
    "\040\uff65\041\uff65\044\uff65\045\uff65\046\uff65\047\uff65\062" +
    "\uff65\066\uff65\067\uff65\070\uff65\071\uff65\072\uff65\001\002" +
    "\000\072\005\uffe0\006\uffe0\011\uffe0\012\uffe0\015\uffe0\016" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064" +
    "\uffe0\065\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0" +
    "\075\uffe0\076\uffe0\077\uffe0\001\002\000\112\003\uff72\004" +
    "\uff72\006\uff72\007\uff72\010\uff72\013\uff72\016\uff72\017\uff72" +
    "\020\uff72\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\026" +
    "\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72\034\uff72" +
    "\035\uff72\036\uff72\037\uff72\040\uff72\041\uff72\044\uff72\045" +
    "\uff72\046\uff72\047\uff72\062\uff72\066\uff72\067\uff72\070\uff72" +
    "\071\uff72\072\uff72\001\002\000\100\003\251\004\110\006" +
    "\252\007\033\010\070\013\067\016\114\023\034\024\057" +
    "\025\055\026\107\027\123\030\036\031\071\032\111\034" +
    "\113\035\046\036\060\037\056\040\066\041\037\044\077" +
    "\045\042\046\074\047\045\062\050\066\117\067\112\070" +
    "\044\071\121\072\116\001\002\000\120\002\uff75\003\uff75" +
    "\004\uff75\006\uff75\007\uff75\010\uff75\013\uff75\016\uff75\017" +
    "\uff75\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75\025\uff75" +
    "\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034" +
    "\uff75\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75" +
    "\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\062\uff75\066" +
    "\uff75\067\uff75\070\uff75\071\uff75\072\uff75\001\002\000\100" +
    "\003\uff70\004\uff70\006\uff70\007\uff70\010\uff70\013\uff70\016" +
    "\uff70\023\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70" +
    "\031\uff70\032\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040" +
    "\uff70\041\uff70\044\uff70\045\uff70\046\uff70\047\uff70\062\uff70" +
    "\066\uff70\067\uff70\070\uff70\071\uff70\072\uff70\001\002\000" +
    "\004\006\253\001\002\000\120\002\uff74\003\uff74\004\uff74" +
    "\006\uff74\007\uff74\010\uff74\013\uff74\016\uff74\017\uff74\020" +
    "\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74\026\uff74" +
    "\027\uff74\030\uff74\031\uff74\032\uff74\033\uff74\034\uff74\035" +
    "\uff74\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74" +
    "\044\uff74\045\uff74\046\uff74\047\uff74\062\uff74\066\uff74\067" +
    "\uff74\070\uff74\071\uff74\072\uff74\001\002\000\100\003\uff7a" +
    "\004\uff7a\006\uff7a\007\uff7a\010\uff7a\013\uff7a\016\uff7a\023" +
    "\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a" +
    "\032\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041" +
    "\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\062\uff7a\066\uff7a" +
    "\067\uff7a\070\uff7a\071\uff7a\072\uff7a\001\002\000\120\002" +
    "\uff76\003\uff76\004\uff76\006\uff76\007\uff76\010\uff76\013\uff76" +
    "\016\uff76\017\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024" +
    "\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76" +
    "\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041" +
    "\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76" +
    "\062\uff76\066\uff76\067\uff76\070\uff76\071\uff76\072\uff76\001" +
    "\002\000\044\004\uffbe\010\uffbe\013\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\062" +
    "\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\001\002" +
    "\000\044\004\uffbc\010\uffbc\013\uffbc\023\uffbc\024\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\062\uffbc" +
    "\066\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\001\002\000" +
    "\044\004\110\010\131\013\067\023\034\024\057\025\055" +
    "\026\107\027\123\030\036\031\071\032\111\062\050\066" +
    "\117\067\112\070\044\071\121\072\116\001\002\000\044" +
    "\004\uffbb\010\uffbb\013\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\062\uffbb\066\uffbb" +
    "\067\uffbb\070\uffbb\071\uffbb\072\uffbb\001\002\000\044\004" +
    "\uffb9\010\uffb9\013\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\032\uffb9\062\uffb9\066\uffb9\067" +
    "\uffb9\070\uffb9\071\uffb9\072\uffb9\001\002\000\044\004\uffbd" +
    "\010\uffbd\013\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\062\uffbd\066\uffbd\067\uffbd" +
    "\070\uffbd\071\uffbd\072\uffbd\001\002\000\044\004\uffba\010" +
    "\uffba\013\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\062\uffba\066\uffba\067\uffba\070" +
    "\uffba\071\uffba\072\uffba\001\002\000\014\005\uffbf\006\uffbf" +
    "\012\uffbf\015\uffbf\016\uffbf\001\002\000\006\011\266\056" +
    "\211\001\002\000\076\003\251\004\110\007\033\010\070" +
    "\013\067\016\114\023\034\024\057\025\055\026\107\027" +
    "\123\030\036\031\071\032\111\034\113\035\046\036\060" +
    "\037\056\040\066\041\037\044\077\045\042\046\074\047" +
    "\045\062\050\066\117\067\112\070\044\071\121\072\116" +
    "\001\002\000\100\003\uff79\004\uff79\006\uff79\007\uff79\010" +
    "\uff79\013\uff79\016\uff79\023\uff79\024\uff79\025\uff79\026\uff79" +
    "\027\uff79\030\uff79\031\uff79\032\uff79\034\uff79\035\uff79\036" +
    "\uff79\037\uff79\040\uff79\041\uff79\044\uff79\045\uff79\046\uff79" +
    "\047\uff79\062\uff79\066\uff79\067\uff79\070\uff79\071\uff79\072" +
    "\uff79\001\002\000\100\003\uff67\004\uff67\006\uff67\007\uff67" +
    "\010\uff67\013\uff67\016\uff67\023\uff67\024\uff67\025\uff67\026" +
    "\uff67\027\uff67\030\uff67\031\uff67\032\uff67\034\uff67\035\uff67" +
    "\036\uff67\037\uff67\040\uff67\041\uff67\044\uff67\045\uff67\046" +
    "\uff67\047\uff67\062\uff67\066\uff67\067\uff67\070\uff67\071\uff67" +
    "\072\uff67\001\002\000\012\005\uffb6\012\uffb6\015\uffb6\016" +
    "\uffb6\001\002\000\006\005\157\012\273\001\002\000\102" +
    "\005\ufff3\006\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063" +
    "\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3" +
    "\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\001" +
    "\002\000\044\004\110\010\070\013\067\023\034\024\057" +
    "\025\055\026\107\027\123\030\036\031\071\032\111\062" +
    "\050\066\117\067\112\070\044\071\121\072\116\001\002" +
    "\000\006\005\157\012\276\001\002\000\004\007\033\001" +
    "\002\000\100\003\uff6b\004\uff6b\006\uff6b\007\uff6b\010\uff6b" +
    "\013\uff6b\016\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027" +
    "\uff6b\030\uff6b\031\uff6b\032\uff6b\034\uff6b\035\uff6b\036\uff6b" +
    "\037\uff6b\040\uff6b\041\uff6b\044\uff6b\045\uff6b\046\uff6b\047" +
    "\uff6b\062\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b\072\uff6b" +
    "\001\002\000\116\002\uffb3\003\uffb3\004\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\013\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\043\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\062\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3" +
    "\072\uffb3\001\002\000\046\004\110\010\070\013\067\016" +
    "\114\023\034\024\057\025\055\026\107\027\123\030\036" +
    "\031\071\032\111\062\050\066\117\067\112\070\044\071" +
    "\121\072\116\001\002\000\046\004\110\010\070\013\067" +
    "\016\114\023\034\024\057\025\055\026\107\027\123\030" +
    "\036\031\071\032\111\062\050\066\117\067\112\070\044" +
    "\071\121\072\116\001\002\000\046\004\110\010\070\012" +
    "\304\013\067\023\034\024\057\025\055\026\107\027\123" +
    "\030\036\031\071\032\111\062\050\066\117\067\112\070" +
    "\044\071\121\072\116\001\002\000\004\007\033\001\002" +
    "\000\006\005\157\012\306\001\002\000\004\007\033\001" +
    "\002\000\100\003\uff68\004\uff68\006\uff68\007\uff68\010\uff68" +
    "\013\uff68\016\uff68\023\uff68\024\uff68\025\uff68\026\uff68\027" +
    "\uff68\030\uff68\031\uff68\032\uff68\034\uff68\035\uff68\036\uff68" +
    "\037\uff68\040\uff68\041\uff68\044\uff68\045\uff68\046\uff68\047" +
    "\uff68\062\uff68\066\uff68\067\uff68\070\uff68\071\uff68\072\uff68" +
    "\001\002\000\100\003\uff69\004\uff69\006\uff69\007\uff69\010" +
    "\uff69\013\uff69\016\uff69\023\uff69\024\uff69\025\uff69\026\uff69" +
    "\027\uff69\030\uff69\031\uff69\032\uff69\034\uff69\035\uff69\036" +
    "\uff69\037\uff69\040\uff69\041\uff69\044\uff69\045\uff69\046\uff69" +
    "\047\uff69\062\uff69\066\uff69\067\uff69\070\uff69\071\uff69\072" +
    "\uff69\001\002\000\044\004\110\010\070\013\067\023\034" +
    "\024\057\025\055\026\107\027\123\030\036\031\071\032" +
    "\111\062\050\066\117\067\112\070\044\071\121\072\116" +
    "\001\002\000\006\005\157\012\313\001\002\000\004\007" +
    "\033\001\002\000\100\003\uff6a\004\uff6a\006\uff6a\007\uff6a" +
    "\010\uff6a\013\uff6a\016\uff6a\023\uff6a\024\uff6a\025\uff6a\026" +
    "\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\034\uff6a\035\uff6a" +
    "\036\uff6a\037\uff6a\040\uff6a\041\uff6a\044\uff6a\045\uff6a\046" +
    "\uff6a\047\uff6a\062\uff6a\066\uff6a\067\uff6a\070\uff6a\071\uff6a" +
    "\072\uff6a\001\002\000\044\004\110\010\070\013\067\023" +
    "\034\024\057\025\055\026\107\027\123\030\036\031\071" +
    "\032\111\062\050\066\117\067\112\070\044\071\121\072" +
    "\116\001\002\000\102\005\uffe5\006\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067" +
    "\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5" +
    "\076\uffe5\077\uffe5\001\002\000\046\004\110\010\131\012" +
    "\323\013\067\023\034\024\057\025\055\026\107\027\123" +
    "\030\036\031\071\032\111\062\050\066\117\067\112\070" +
    "\044\071\121\072\116\001\002\000\102\005\uffe6\006\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6" +
    "\074\uffe6\075\uffe6\076\uffe6\077\uffe6\001\002\000\006\005" +
    "\325\012\324\001\002\000\006\005\uffe4\012\uffe4\001\002" +
    "\000\102\005\uffe8\006\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062" +
    "\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8" +
    "\071\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077" +
    "\uffe8\001\002\000\102\005\uffe7\006\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067" +
    "\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7" +
    "\076\uffe7\077\uffe7\001\002\000\044\004\110\010\131\013" +
    "\067\023\034\024\057\025\055\026\107\027\123\030\036" +
    "\031\071\032\111\062\050\066\117\067\112\070\044\071" +
    "\121\072\116\001\002\000\006\005\uffe3\012\uffe3\001\002" +
    "\000\006\005\157\015\330\001\002\000\102\005\uffe9\006" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073" +
    "\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\001\002\000\006" +
    "\004\333\012\332\001\002\000\004\016\336\001\002\000" +
    "\004\012\334\001\002\000\004\016\335\001\002\000\100" +
    "\003\uff63\004\uff63\006\uff63\007\uff63\010\uff63\013\uff63\016" +
    "\uff63\023\uff63\024\uff63\025\uff63\026\uff63\027\uff63\030\uff63" +
    "\031\uff63\032\uff63\034\uff63\035\uff63\036\uff63\037\uff63\040" +
    "\uff63\041\uff63\044\uff63\045\uff63\046\uff63\047\uff63\062\uff63" +
    "\066\uff63\067\uff63\070\uff63\071\uff63\072\uff63\001\002\000" +
    "\100\003\uff64\004\uff64\006\uff64\007\uff64\010\uff64\013\uff64" +
    "\016\uff64\023\uff64\024\uff64\025\uff64\026\uff64\027\uff64\030" +
    "\uff64\031\uff64\032\uff64\034\uff64\035\uff64\036\uff64\037\uff64" +
    "\040\uff64\041\uff64\044\uff64\045\uff64\046\uff64\047\uff64\062" +
    "\uff64\066\uff64\067\uff64\070\uff64\071\uff64\072\uff64\001\002" +
    "\000\100\003\uff66\004\uff66\006\uff66\007\uff66\010\uff66\013" +
    "\uff66\016\uff66\023\uff66\024\uff66\025\uff66\026\uff66\027\uff66" +
    "\030\uff66\031\uff66\032\uff66\034\uff66\035\uff66\036\uff66\037" +
    "\uff66\040\uff66\041\uff66\044\uff66\045\uff66\046\uff66\047\uff66" +
    "\062\uff66\066\uff66\067\uff66\070\uff66\071\uff66\072\uff66\001" +
    "\002\000\076\003\251\004\110\007\033\010\070\013\067" +
    "\016\114\023\034\024\057\025\055\026\107\027\123\030" +
    "\036\031\071\032\111\034\113\035\046\036\060\037\056" +
    "\040\066\041\037\044\077\045\042\046\074\047\045\062" +
    "\050\066\117\067\112\070\044\071\121\072\116\001\002" +
    "\000\100\003\uff78\004\uff78\006\uff78\007\uff78\010\uff78\013" +
    "\uff78\016\uff78\023\uff78\024\uff78\025\uff78\026\uff78\027\uff78" +
    "\030\uff78\031\uff78\032\uff78\034\uff78\035\uff78\036\uff78\037" +
    "\uff78\040\uff78\041\uff78\044\uff78\045\uff78\046\uff78\047\uff78" +
    "\062\uff78\066\uff78\067\uff78\070\uff78\071\uff78\072\uff78\001" +
    "\002\000\044\004\110\010\070\013\067\023\034\024\057" +
    "\025\055\026\107\027\123\030\036\031\071\032\111\062" +
    "\050\066\117\067\112\070\044\071\121\072\116\001\002" +
    "\000\006\005\157\012\344\001\002\000\004\007\033\001" +
    "\002\000\102\003\uff6d\004\uff6d\006\uff6d\007\uff6d\010\uff6d" +
    "\013\uff6d\016\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027" +
    "\uff6d\030\uff6d\031\uff6d\032\uff6d\034\uff6d\035\uff6d\036\uff6d" +
    "\037\uff6d\040\uff6d\041\uff6d\042\346\044\uff6d\045\uff6d\046" +
    "\uff6d\047\uff6d\062\uff6d\066\uff6d\067\uff6d\070\uff6d\071\uff6d" +
    "\072\uff6d\001\002\000\004\007\033\001\002\000\100\003" +
    "\uff6c\004\uff6c\006\uff6c\007\uff6c\010\uff6c\013\uff6c\016\uff6c" +
    "\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c\031" +
    "\uff6c\032\uff6c\034\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c" +
    "\041\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\062\uff6c\066" +
    "\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\001\002\000\072" +
    "\005\uffdf\006\uffdf\011\uffdf\012\uffdf\015\uffdf\016\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065" +
    "\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\075\uffdf" +
    "\076\uffdf\077\uffdf\001\002\000\046\004\110\010\131\013" +
    "\067\015\373\023\034\024\057\025\055\026\107\027\123" +
    "\030\036\031\071\032\111\062\050\066\117\067\112\070" +
    "\044\071\121\072\116\001\002\000\012\005\uff97\012\uff97" +
    "\013\173\014\171\001\002\000\006\005\uff96\012\uff96\001" +
    "\002\000\012\005\uff90\012\uff90\013\364\014\363\001\002" +
    "\000\024\004\165\012\360\013\355\014\351\017\014\020" +
    "\016\021\015\022\006\033\007\001\002\000\004\012\362" +
    "\001\002\000\004\012\361\001\002\000\012\005\uff8a\012" +
    "\uff8a\013\uff8a\014\uff8a\001\002\000\012\005\uff8f\012\uff8f" +
    "\013\uff8f\014\uff8f\001\002\000\012\005\uff89\012\uff89\013" +
    "\uff89\014\uff89\001\002\000\046\004\110\010\131\013\067" +
    "\015\370\023\034\024\057\025\055\026\107\027\123\030" +
    "\036\031\071\032\111\062\050\066\117\067\112\070\044" +
    "\071\121\072\116\001\002\000\016\012\365\017\014\020" +
    "\016\021\015\022\006\033\007\001\002\000\012\005\uff88" +
    "\012\uff88\013\uff88\014\uff88\001\002\000\004\012\367\001" +
    "\002\000\012\005\uff87\012\uff87\013\uff87\014\uff87\001\002" +
    "\000\012\005\uff8c\012\uff8c\013\uff8c\014\uff8c\001\002\000" +
    "\006\015\372\056\211\001\002\000\012\005\uff8b\012\uff8b" +
    "\013\uff8b\014\uff8b\001\002\000\012\005\uff8e\012\uff8e\013" +
    "\uff8e\014\uff8e\001\002\000\006\015\375\056\211\001\002" +
    "\000\012\005\uff8d\012\uff8d\013\uff8d\014\uff8d\001\002\000" +
    "\004\007\033\001\002\000\022\002\ufff9\003\ufff9\017\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\033\ufff9\043\ufff9\001\002\000" +
    "\004\007\033\001\002\000\022\002\ufffb\003\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\033\ufffb\043\ufffb\001\002\000" +
    "\022\002\ufff6\003\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\033\ufff6\043\ufff6\001\002\000\014\005\uffa1\013\u0104\014" +
    "\uffa1\016\uffa1\050\uffa1\001\002\000\020\004\027\012\u0107" +
    "\017\014\020\016\021\015\022\006\033\007\001\002\000" +
    "\006\005\204\012\u010b\001\002\000\006\005\202\012\u0109" +
    "\001\002\000\004\007\033\001\002\000\022\002\ufff8\003" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\033\ufff8\043\ufff8" +
    "\001\002\000\004\007\033\001\002\000\022\002\ufffa\003" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\033\ufffa\043\ufffa" +
    "\001\002\000\004\007\033\001\002\000\022\002\ufffc\003" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\033\ufffc\043\ufffc" +
    "\001\002\000\022\002\uffff\003\uffff\017\uffff\020\uffff\021" +
    "\uffff\022\uffff\033\uffff\043\uffff\001\002\000\004\002\001" +
    "\001\002\000\016\004\uffb2\005\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\016\uffb2\001\002\000\016\004\uffaf\005\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\016\uffaf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\020\002\011\004\010\005\020\011\003\032" +
    "\012\034\007\036\004\001\001\000\002\001\001\000\010" +
    "\032\u010f\034\007\036\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\u010e\034\007\036\004\001\001" +
    "\000\002\001\001\000\016\004\010\005\020\011\u010c\032" +
    "\012\034\007\036\004\001\001\000\010\007\162\031\163" +
    "\033\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\032\025\034\007\036" +
    "\004\040\023\041\027\042\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\351\044\352\045\353\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\031" +
    "\001\001\000\002\001\001\000\076\003\077\004\075\006" +
    "\117\012\050\013\053\015\102\016\121\017\046\020\060" +
    "\021\124\022\063\023\052\024\042\025\037\026\100\027" +
    "\072\032\114\034\007\036\004\047\040\050\071\051\051" +
    "\052\105\053\104\054\103\055\062\056\074\057\101\060" +
    "\061\061\034\001\001\000\002\001\001\000\014\003\077" +
    "\012\050\013\053\015\347\061\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\077\006\271\012" +
    "\050\013\053\015\102\016\121\017\046\020\060\021\124" +
    "\022\063\023\052\024\042\025\037\026\100\027\072\061" +
    "\034\001\001\000\040\003\077\012\050\013\053\015\102" +
    "\016\121\017\046\020\060\021\124\022\063\023\052\024" +
    "\042\025\037\026\100\027\270\061\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\077" +
    "\012\050\013\053\015\127\016\121\017\046\020\060\021" +
    "\124\022\063\023\052\024\042\025\037\026\264\061\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\256\001\001\000\002\001\001\000\062" +
    "\003\077\006\117\012\050\013\053\015\102\016\121\017" +
    "\046\020\060\021\124\022\063\023\052\024\042\025\037" +
    "\026\100\027\072\047\247\050\071\051\051\054\103\055" +
    "\062\056\074\057\101\060\061\061\034\001\001\000\074" +
    "\003\077\004\244\006\117\012\050\013\053\015\102\016" +
    "\121\017\046\020\060\021\124\022\063\023\052\024\042" +
    "\025\037\026\100\027\072\032\114\034\007\036\004\047" +
    "\040\050\071\051\051\053\245\054\103\055\062\056\074" +
    "\057\101\060\061\061\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\077\012\050" +
    "\013\053\015\243\061\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\162\031\163\033\166\001\001" +
    "\000\002\001\001\000\014\003\077\012\050\013\053\015" +
    "\160\061\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\077\012\050\013\053\015\127" +
    "\016\121\017\046\020\154\061\034\001\001\000\022\003" +
    "\077\012\050\013\053\015\127\016\121\017\046\020\131" +
    "\061\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\077\012\050\013\053\015\127" +
    "\016\121\017\153\061\034\001\001\000\020\003\077\012" +
    "\050\013\053\015\127\016\121\017\152\061\034\001\001" +
    "\000\020\003\077\012\050\013\053\015\127\016\121\017" +
    "\151\061\034\001\001\000\020\003\077\012\050\013\053" +
    "\015\127\016\121\017\136\061\034\001\001\000\002\001" +
    "\001\000\016\003\077\012\050\013\053\015\127\016\150" +
    "\061\034\001\001\000\016\003\077\012\050\013\053\015" +
    "\127\016\141\061\034\001\001\000\002\001\001\000\014" +
    "\003\077\012\050\013\053\015\147\061\034\001\001\000" +
    "\014\003\077\012\050\013\053\015\146\061\034\001\001" +
    "\000\014\003\077\012\050\013\053\015\145\061\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\077\012\050\013\053\015\102\016\121\017\046\020" +
    "\060\021\124\022\063\023\052\024\042\025\037\026\100" +
    "\027\157\061\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\077\012\050\013\053" +
    "\015\127\016\121\017\046\020\060\021\124\022\063\023" +
    "\052\024\042\025\037\026\206\061\034\001\001\000\002" +
    "\001\001\000\020\032\025\034\007\036\004\037\176\040" +
    "\173\041\027\042\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\032\025\034\007\036\004\041\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\077\012\050\013\053\015\127\016" +
    "\121\017\046\020\060\021\124\022\063\023\052\024\042" +
    "\025\211\061\034\001\001\000\002\001\001\000\032\003" +
    "\077\012\050\013\053\015\127\016\121\017\046\020\060" +
    "\021\124\022\063\023\052\024\213\061\034\001\001\000" +
    "\002\001\001\000\030\003\077\012\050\013\053\015\127" +
    "\016\121\017\046\020\060\021\124\022\063\023\215\061" +
    "\034\001\001\000\002\001\001\000\026\003\077\012\050" +
    "\013\053\015\127\016\121\017\046\020\060\021\124\022" +
    "\217\061\034\001\001\000\002\001\001\000\024\003\077" +
    "\012\050\013\053\015\127\016\121\017\046\020\060\021" +
    "\221\061\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\162\033\224\001\001\000\002\001\001\000" +
    "\042\003\077\010\227\012\050\013\053\015\102\016\121" +
    "\017\046\020\060\021\124\022\063\023\052\024\042\025" +
    "\037\026\100\027\226\061\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\077\010\232\012\050\013" +
    "\053\015\102\016\121\017\046\020\060\021\124\022\063" +
    "\023\052\024\042\025\037\026\100\027\226\046\231\061" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\077\010\236\012\050\013\053\015" +
    "\102\016\121\017\046\020\060\021\124\022\063\023\052" +
    "\024\042\025\037\026\100\027\226\061\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\077\006\240" +
    "\012\050\013\053\015\102\016\121\017\046\020\060\021" +
    "\124\022\063\023\052\024\042\025\037\026\100\027\072" +
    "\061\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\077\006\117\012\050\013\053\015\102\016\121\017" +
    "\046\020\060\021\124\022\063\023\052\024\042\025\037" +
    "\026\100\027\072\047\247\050\071\051\051\054\103\055" +
    "\062\056\074\057\101\060\061\061\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\077\012\050\013\053\015" +
    "\102\016\121\017\046\020\060\021\124\022\063\023\052" +
    "\024\042\025\037\026\100\027\263\061\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\077\006\117\012\050\013\053\015\102\016\121\017\046" +
    "\020\060\021\124\022\063\023\052\024\042\025\037\026" +
    "\100\027\072\047\266\050\071\051\051\054\103\055\062" +
    "\056\074\057\101\060\061\061\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\077\006\274\012\050\013" +
    "\053\015\102\016\121\017\046\020\060\021\124\022\063" +
    "\023\052\024\042\025\037\026\100\027\072\061\034\001" +
    "\001\000\002\001\001\000\004\051\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\077\006\117\012" +
    "\050\013\053\015\102\016\121\017\046\020\060\021\124" +
    "\022\063\023\052\024\042\025\037\026\100\027\072\054" +
    "\301\061\034\001\001\000\044\003\077\006\117\012\050" +
    "\013\053\015\102\016\121\017\046\020\060\021\124\022" +
    "\063\023\052\024\042\025\037\026\100\027\072\054\302" +
    "\061\034\001\001\000\042\003\077\006\304\012\050\013" +
    "\053\015\102\016\121\017\046\020\060\021\124\022\063" +
    "\023\052\024\042\025\037\026\100\027\072\061\034\001" +
    "\001\000\004\051\307\001\001\000\002\001\001\000\004" +
    "\051\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\077\006\311\012\050\013\053\015\102\016\121" +
    "\017\046\020\060\021\124\022\063\023\052\024\042\025" +
    "\037\026\100\027\072\061\034\001\001\000\002\001\001" +
    "\000\004\051\313\001\001\000\002\001\001\000\042\003" +
    "\077\006\326\012\050\013\053\015\102\016\121\017\046" +
    "\020\060\021\124\022\063\023\052\024\042\025\037\026" +
    "\100\027\072\061\034\001\001\000\002\001\001\000\042" +
    "\003\077\012\050\013\053\014\320\015\102\016\121\017" +
    "\046\020\060\021\124\022\063\023\052\024\042\025\037" +
    "\026\100\027\321\061\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\077\012\050\013\053\015\102\016" +
    "\121\017\046\020\060\021\124\022\063\023\052\024\042" +
    "\025\037\026\100\027\325\061\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\077\006\117\012\050\013\053\015\102\016\121\017" +
    "\046\020\060\021\124\022\063\023\052\024\042\025\037" +
    "\026\100\027\072\047\340\050\071\051\051\054\103\055" +
    "\062\056\074\057\101\060\061\061\034\001\001\000\002" +
    "\001\001\000\042\003\077\006\342\012\050\013\053\015" +
    "\102\016\121\017\046\020\060\021\124\022\063\023\052" +
    "\024\042\025\037\026\100\027\072\061\034\001\001\000" +
    "\002\001\001\000\004\051\344\001\001\000\002\001\001" +
    "\000\004\051\346\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\077\012\050\013\053\015\127\016\121" +
    "\017\046\020\060\021\124\022\063\023\052\024\042\025" +
    "\037\026\373\061\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\167\032\025\034" +
    "\007\036\004\037\355\040\173\041\027\044\356\045\353" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\077" +
    "\012\050\013\053\015\127\016\121\017\046\020\060\021" +
    "\124\022\063\023\052\024\042\025\037\026\370\061\034" +
    "\001\001\000\016\032\025\034\007\036\004\037\365\040" +
    "\173\041\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\376\001\001\000\002\001\001\000" +
    "\004\051\u0100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\032\025\034\007\036\004\040" +
    "\u0104\041\027\042\u0105\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\u0107\001\001\000\002\001\001\000" +
    "\004\051\u0109\001\001\000\002\001\001\000\004\051\u010b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido.");
    } 
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTENCIA_READ_WRITE ::= Read OperadorParentesisIz Identificador OperadorParentesisDer OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_READ_WRITE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCIA_READ_WRITE ::= Read OperadorParentesisIz OperadorParentesisDer OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_READ_WRITE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIA_READ_WRITE ::= Write OperadorParentesisIz EXPRESION OperadorParentesisDer OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_READ_WRITE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIA_SALTO ::= Break OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SALTO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCIA_SALTO ::= Continue OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SALTO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SENTENCIA_ITERACION ::= For OperadorParentesisIz SENTENCIA_EXPRESION SENTENCIA_EXPRESION EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ITERACION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTENCIA_ITERACION ::= For OperadorParentesisIz SENTENCIA_EXPRESION SENTENCIA_EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ITERACION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTENCIA_ITERACION ::= While OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ITERACION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SENTENCIA_SELECCION ::= Switch OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIA_SELECCION ::= If OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA Else SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SENTENCIA_SELECCION ::= If OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SENTENCIA_EXPRESION ::= EXPRESION OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EXPRESION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SENTENCIA_EXPRESION ::= OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EXPRESION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LISTA_DECLARACIONES ::= LISTA_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LISTA_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz LISTA_DECLARACIONES LISTA_SENTENCIAS OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz LISTA_DECLARACIONES OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz LISTA_SENTENCIAS OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIA_ETIQUETADA ::= Default OperadorDoblePunto SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ETIQUETADA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA_ETIQUETADA ::= Case EXPRESION_LAZY_OR OperadorDoblePunto SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ETIQUETADA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIA ::= error OperadorCorcheteDer 
            {
              Object RESULT =null;
		 errores.add(new ErrorSintactico(parser.getS(), "Sentencia no válida")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIA ::= SENTENCIA_READ_WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIA ::= SENTENCIA_SALTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SENTENCIA ::= SENTENCIA_ITERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIA ::= SENTENCIA_SELECCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIA ::= SENTENCIA_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIA ::= SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIA ::= SENTENCIA_ETIQUETADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LISTA_INICIALIZADORES ::= LISTA_INICIALIZADORES OperadorComa INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_INICIALIZADORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LISTA_INICIALIZADORES ::= INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_INICIALIZADORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // INICIALIZADOR ::= OperadorCorcheteIz LISTA_INICIALIZADORES OperadorComa OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // INICIALIZADOR ::= OperadorCorcheteIz LISTA_INICIALIZADORES OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INICIALIZADOR ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParCuadradoIz EXPRESION_LAZY_OR OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParCuadradoIz OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParCuadradoIz EXPRESION_LAZY_OR OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParCuadradoIz OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParentesisIz DECLARADOR_ABSTRACTO OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARADOR_ABSTRACTO ::= DECLARADOR_ABSTRACTO_DIRECTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NOMBRE_TIPO ::= LISTA_CUALIFICADOR_ESPECIFICADOR DECLARADOR_ABSTRACTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOMBRE_TIPO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NOMBRE_TIPO ::= LISTA_CUALIFICADOR_ESPECIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOMBRE_TIPO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES OperadorComa Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LISTA_IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION_PARAMETRO ::= ESPECIFICADORES_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACION_PARAMETRO ::= ESPECIFICADORES_DECLARACION DECLARADOR_ABSTRACTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACION_PARAMETRO ::= ESPECIFICADORES_DECLARACION DECLARADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LISTA_PARAMETROS ::= LISTA_PARAMETROS OperadorComa DECLARACION_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LISTA_PARAMETROS ::= DECLARACION_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LISTA_TIPOS_PARAMETROS ::= LISTA_PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_TIPOS_PARAMETROS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARADOR ::= DECLARADOR OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARADOR ::= DECLARADOR OperadorParentesisIz LISTA_IDENTIFICADORES OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARADOR ::= DECLARADOR OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARADOR ::= DECLARADOR OperadorParCuadradoIz OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARADOR ::= DECLARADOR OperadorParCuadradoIz EXPRESION_LAZY_OR OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARADOR ::= OperadorParentesisIz DECLARADOR OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARADOR ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		System.out.println("Encuentra: "+id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CUALIFICADOR_TIPO ::= Const 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUALIFICADOR_TIPO",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= CUALIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= CUALIFICADOR_TIPO LISTA_CUALIFICADOR_ESPECIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= ESPECIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= ESPECIFICADOR_TIPO LISTA_CUALIFICADOR_ESPECIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ESPECIFICADOR_TIPO ::= Short 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ESPECIFICADOR_TIPO ::= Long 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ESPECIFICADOR_TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ESPECIFICADOR_TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARADOR_INICIALIZADOR ::= DECLARADOR OperadorIgual INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_INICIALIZADOR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARADOR_INICIALIZADOR ::= DECLARADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_INICIALIZADOR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTA_DECLARADORES_INICIALIZADORES ::= LISTA_DECLARADORES_INICIALIZADORES OperadorComa DECLARADOR_INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARADORES_INICIALIZADORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_DECLARADORES_INICIALIZADORES ::= DECLARADOR_INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARADORES_INICIALIZADORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ESPECIFICADORES_DECLARACION ::= CUALIFICADOR_TIPO ESPECIFICADORES_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ESPECIFICADORES_DECLARACION ::= CUALIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ESPECIFICADORES_DECLARACION ::= ESPECIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ESPECIFICADORES_DECLARACION ::= ESPECIFICADOR_TIPO ESPECIFICADORES_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= error OperadorPuntoComa 
            {
              Object RESULT =null;
		 errores.add(new ErrorSintactico(parser.getS(), "Declaración no válida")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= ESPECIFICADORES_DECLARACION LISTA_DECLARADORES_INICIALIZADORES OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= ESPECIFICADORES_DECLARACION OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= OperadorNegacion EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= EXPRESION OperadorComa EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERADOR_ASIGNACION ::= OperadorModIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERADOR_ASIGNACION ::= OperadorDivIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERADOR_ASIGNACION ::= OperadorMultiIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERADOR_ASIGNACION ::= OperadorMenosIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERADOR_ASIGNACION ::= OperadorMasIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERADOR_ASIGNACION ::= OperadorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION_ASIGNACION ::= EXPRESION_UNARIA OPERADOR_ASIGNACION EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION_ASIGNACION ::= EXPRESION_LAZY_OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION_LAZY_OR ::= EXPRESION_LAZY_OR OperadorORLazy EXPRESION_LAZY_AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_OR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION_LAZY_OR ::= EXPRESION_LAZY_AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_OR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION_LAZY_AND ::= EXPRESION_LAZY_AND OperadorANDLazy EXPRESION_OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_AND",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION_LAZY_AND ::= EXPRESION_OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_AND",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION_OR ::= EXPRESION_OR OperadorOR EXPRESION_XOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_OR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION_OR ::= EXPRESION_XOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_OR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION_XOR ::= EXPRESION_XOR OperadorXOR EXPRESION_AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_XOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION_XOR ::= EXPRESION_AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_XOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION_AND ::= EXPRESION_AND OperadorAND EXPRESION_IGUALDAD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AND",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION_AND ::= EXPRESION_IGUALDAD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AND",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION_IGUALDAD ::= EXPRESION_IGUALDAD OperadorDesigual EXPRESION_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_IGUALDAD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION_IGUALDAD ::= EXPRESION_IGUALDAD OperadorIgualIgual EXPRESION_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_IGUALDAD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION_IGUALDAD ::= EXPRESION_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_IGUALDAD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMayorIgual EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMenorIgual EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMayor EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMenor EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION_RELACIONAL ::= EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION_ADITIVA ::= EXPRESION_ADITIVA OperadorMenos EXPRESION_MULTIPLICATIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ADITIVA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION_ADITIVA ::= EXPRESION_ADITIVA OperadorMas EXPRESION_MULTIPLICATIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ADITIVA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION_ADITIVA ::= EXPRESION_MULTIPLICATIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ADITIVA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_MULTIPLICATIVA OperadorModulo EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_MULTIPLICATIVA OperadorDivision EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_MULTIPLICATIVA OperadorMultiplicacion EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERADOR_UNARIO ::= OperadorNegacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERADOR_UNARIO ::= OperadorMenos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERADOR_UNARIO ::= OperadorMas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERADOR_UNARIO ::= OperadorMultiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERADOR_UNARIO ::= OperadorAND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION_UNARIA ::= OPERADOR_UNARIO EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION_UNARIA ::= OperadorDecremental EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION_UNARIA ::= OperadorIncremental EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION_UNARIA ::= EXPRESION_POSTFIJA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA_ARGUMENTOS_EXPRESIONES ::= LISTA_ARGUMENTOS_EXPRESIONES OperadorComa EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ARGUMENTOS_EXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTA_ARGUMENTOS_EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ARGUMENTOS_EXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorDecremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorIncremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorParentesisIz LISTA_ARGUMENTOS_EXPRESIONES OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorParCuadradoIz EXPRESION OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION_POSTFIJA ::= EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LITERAL ::= Caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LITERAL ::= HexadecimalFlotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LITERAL ::= Hexadecimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LITERAL ::= OctalFlotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LITERAL ::= Octal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LITERAL ::= FlotanteExponente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LITERAL ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LITERAL ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESION_PRIMARIA ::= OperadorParentesisIz EXPRESION OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESION_PRIMARIA ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRESION_PRIMARIA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION_FUNCION ::= error OperadorCorcheteDer 
            {
              Object RESULT =null;
		 errores.add(new ErrorSintactico(parser.getS(), "Declaración de función no válida")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION_FUNCION ::= Void Identificador OperadorParentesisIz OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_FUNCION ::= ESPECIFICADORES_DECLARACION Identificador OperadorParentesisIz OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION_FUNCION ::= Void Identificador OperadorParentesisIz LISTA_IDENTIFICADORES OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION_FUNCION ::= ESPECIFICADORES_DECLARACION Identificador OperadorParentesisIz LISTA_IDENTIFICADORES OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION_FUNCION ::= Void Identificador OperadorParentesisIz LISTA_PARAMETROS OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION_FUNCION ::= ESPECIFICADORES_DECLARACION Identificador OperadorParentesisIz LISTA_PARAMETROS OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION_EXTERNA ::= DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_EXTERNA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION_EXTERNA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_EXTERNA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INICIO DECLARACION_EXTERNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DECLARACION_EXTERNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

