
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Sintactico;

import static Sintactico.ListaErrores.errores;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\107\003\000\002\107\003\000\002\025\010" +
    "\000\002\025\004\000\002\113\003\000\002\113\003\000" +
    "\002\113\005\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\114\003" +
    "\000\002\114\006\000\002\114\005\000\002\114\006\000" +
    "\002\114\004\000\002\114\004\000\002\115\003\000\002" +
    "\115\005\000\002\116\003\000\002\116\004\000\002\116" +
    "\004\000\002\117\003\000\002\117\005\000\002\117\005" +
    "\000\002\117\005\000\002\120\003\000\002\120\005\000" +
    "\002\120\005\000\002\121\003\000\002\121\005\000\002" +
    "\121\005\000\002\121\005\000\002\121\005\000\002\122" +
    "\003\000\002\122\005\000\002\122\005\000\002\123\003" +
    "\000\002\123\005\000\002\124\003\000\002\124\005\000" +
    "\002\125\003\000\002\125\005\000\002\126\003\000\002" +
    "\126\005\000\002\127\003\000\002\127\005\000\002\130" +
    "\003\000\002\130\005\000\002\131\003\000\002\131\003" +
    "\000\002\131\003\000\002\131\003\000\002\131\003\000" +
    "\002\131\003\000\002\054\003\000\002\054\005\000\002" +
    "\054\004\000\002\032\004\000\002\032\005\000\002\032" +
    "\004\000\002\133\004\000\002\133\003\000\002\133\003" +
    "\000\002\133\004\000\002\132\003\000\002\132\005\000" +
    "\002\134\003\000\002\134\005\000\002\135\003\000\002" +
    "\135\003\000\002\135\003\000\002\135\003\000\002\135" +
    "\003\000\002\136\004\000\002\136\003\000\002\136\004" +
    "\000\002\136\003\000\002\137\003\000\002\077\003\000" +
    "\002\077\005\000\002\077\006\000\002\077\005\000\002" +
    "\077\006\000\002\077\006\000\002\077\005\000\002\140" +
    "\003\000\002\141\003\000\002\141\005\000\002\142\004" +
    "\000\002\142\004\000\002\142\003\000\002\143\003\000" +
    "\002\143\005\000\002\144\003\000\002\144\004\000\002" +
    "\145\003\000\002\146\005\000\002\146\004\000\002\146" +
    "\005\000\002\146\005\000\002\146\006\000\002\146\004" +
    "\000\002\146\005\000\002\146\005\000\002\146\006\000" +
    "\002\100\003\000\002\100\005\000\002\100\006\000\002" +
    "\147\003\000\002\147\005\000\002\150\003\000\002\150" +
    "\003\000\002\150\003\000\002\150\003\000\002\150\003" +
    "\000\002\150\003\000\002\150\004\000\002\151\005\000" +
    "\002\151\006\000\002\151\005\000\002\152\004\000\002" +
    "\152\005\000\002\152\005\000\002\152\006\000\002\153" +
    "\003\000\002\153\004\000\002\154\003\000\002\154\004" +
    "\000\002\155\003\000\002\155\004\000\002\156\007\000" +
    "\002\156\011\000\002\156\007\000\002\157\007\000\002" +
    "\157\010\000\002\157\011\000\002\160\004\000\002\160" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\020\003\017\017\014\020\016\021\015\022" +
    "\006\033\007\043\020\001\002\000\022\002\000\003\000" +
    "\017\000\020\000\021\000\022\000\033\000\043\000\001" +
    "\002\000\032\004\uffbb\005\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\016\uffbb\017\014\020\016\021\015\022\006\033\007\043" +
    "\020\001\002\000\032\004\uffb1\005\uffb1\012\uffb1\013\uffb1" +
    "\014\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\033" +
    "\uffb1\043\uffb1\001\002\000\032\004\uffac\005\uffac\012\uffac" +
    "\013\uffac\014\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022" +
    "\uffac\033\uffac\043\uffac\001\002\000\032\004\uffbc\005\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\016\uffbc\017\014\020\016\021" +
    "\015\022\006\033\007\043\020\001\002\000\022\002\ufffd" +
    "\003\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\033\ufffd\043" +
    "\ufffd\001\002\000\022\002\356\003\017\017\014\020\016" +
    "\021\015\022\006\033\007\043\020\001\002\000\010\004" +
    "\030\013\027\016\024\001\002\000\032\004\uffb4\005\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\033\uffb4\043\uffb4\001\002\000\032\004\uffb2" +
    "\005\uffb2\012\uffb2\013\uffb2\014\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\033\uffb2\043\uffb2\001\002\000\032" +
    "\004\uffb3\005\uffb3\012\uffb3\013\uffb3\014\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\033\uffb3\043\uffb3\001\002" +
    "\000\006\006\023\016\022\001\002\000\032\004\uffb5\005" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\033\uffb5\043\uffb5\001\002\000\022\002" +
    "\ufffe\003\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\033\ufffe" +
    "\043\ufffe\001\002\000\102\002\uffbe\003\uffbe\004\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\013\uffbe\016\uffbe\017\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\070\uffbe\071\uffbe\001\002\000\022\002\ufffb\003\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\033\ufffb\043\ufffb\001" +
    "\002\000\102\002\uffc0\003\uffc0\004\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\013\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\070\uffc0" +
    "\071\uffc0\001\002\000\014\005\uffb7\013\250\014\033\016" +
    "\uffb7\051\236\001\002\000\006\005\233\016\232\001\002" +
    "\000\006\004\030\013\027\001\002\000\016\005\uffab\012" +
    "\uffab\013\uffab\014\uffab\016\uffab\051\uffab\001\002\000\006" +
    "\005\uffb9\016\uffb9\001\002\000\010\012\034\013\035\014" +
    "\033\001\002\000\034\004\077\013\071\015\227\023\072" +
    "\024\076\025\107\026\103\027\067\030\074\031\102\032" +
    "\112\070\065\071\105\001\002\000\016\005\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\016\uffaa\051\uffaa\001\002\000\022\004" +
    "\042\012\043\017\014\020\016\021\015\022\006\033\007" +
    "\043\020\001\002\000\006\005\225\012\uffa4\001\002\000" +
    "\006\005\223\012\222\001\002\000\014\004\030\005\uff9f" +
    "\012\uff9f\013\052\014\046\001\002\000\006\005\uffa3\012" +
    "\uffa3\001\002\000\006\005\uff9e\012\uff9e\001\002\000\016" +
    "\005\uffa5\012\uffa5\013\uffa5\014\uffa5\016\uffa5\051\uffa5\001" +
    "\002\000\004\012\045\001\002\000\016\005\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\016\uffa7\051\uffa7\001\002\000\034\004" +
    "\077\013\071\015\217\023\072\024\076\025\107\026\103" +
    "\027\067\030\074\031\102\032\112\070\065\071\105\001" +
    "\002\000\012\005\uffa1\012\uffa1\013\035\014\033\001\002" +
    "\000\006\005\uffa0\012\uffa0\001\002\000\012\005\uff9a\012" +
    "\uff9a\013\061\014\060\001\002\000\026\004\030\012\055" +
    "\013\052\014\046\017\014\020\016\021\015\022\006\033" +
    "\007\043\020\001\002\000\004\012\057\001\002\000\004" +
    "\012\056\001\002\000\012\005\uff94\012\uff94\013\uff94\014" +
    "\uff94\001\002\000\012\005\uff99\012\uff99\013\uff99\014\uff99" +
    "\001\002\000\012\005\uff93\012\uff93\013\uff93\014\uff93\001" +
    "\002\000\034\004\077\013\071\015\110\023\072\024\076" +
    "\025\107\026\103\027\067\030\074\031\102\032\112\070" +
    "\065\071\105\001\002\000\020\012\062\017\014\020\016" +
    "\021\015\022\006\033\007\043\020\001\002\000\012\005" +
    "\uff92\012\uff92\013\uff92\014\uff92\001\002\000\004\012\064" +
    "\001\002\000\012\005\uff91\012\uff91\013\uff91\014\uff91\001" +
    "\002\000\032\004\077\013\071\023\072\024\076\025\107" +
    "\026\103\027\067\030\074\031\102\032\112\070\065\071" +
    "\105\001\002\000\056\005\uffe4\006\uffe4\011\uffe4\012\uffe4" +
    "\015\uffe4\016\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\072\uffe4" +
    "\073\uffe4\074\uffe4\075\uffe4\076\uffe4\101\uffe4\001\002\000" +
    "\102\005\ufff3\006\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055" +
    "\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\070\ufff3\071\ufff3\072\ufff3\073" +
    "\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3" +
    "\001\002\000\024\005\uffcf\006\uffcf\011\uffcf\012\uffcf\015" +
    "\uffcf\016\uffcf\057\uffcf\060\uffcf\062\154\001\002\000\034" +
    "\004\077\010\205\013\071\023\072\024\076\025\107\026" +
    "\103\027\067\030\074\031\102\032\112\070\065\071\105" +
    "\001\002\000\102\005\ufff7\006\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\070\ufff7\071\ufff7" +
    "\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\100" +
    "\ufff7\101\ufff7\001\002\000\022\005\uffcd\006\uffcd\011\uffcd" +
    "\012\uffcd\015\uffcd\016\uffcd\057\uffcd\060\152\001\002\000" +
    "\102\005\ufff2\006\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2" +
    "\064\ufff2\065\ufff2\066\ufff2\070\ufff2\071\ufff2\072\ufff2\073" +
    "\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2" +
    "\001\002\000\102\005\uffe7\006\uffe7\011\uffe7\012\uffe7\013" +
    "\163\014\161\015\uffe7\016\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062" +
    "\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\070\164\071\162" +
    "\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7\100" +
    "\uffe7\101\uffe7\001\002\000\102\005\ufff6\006\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\070" +
    "\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6" +
    "\077\ufff6\100\ufff6\101\ufff6\001\002\000\102\005\ufffa\006" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa" +
    "\066\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075" +
    "\ufffa\076\ufffa\077\ufffa\100\ufffa\101\ufffa\001\002\000\102" +
    "\005\ufff9\006\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9" +
    "\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064" +
    "\ufff9\065\ufff9\066\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9" +
    "\074\ufff9\075\ufff9\076\ufff9\077\ufff9\100\ufff9\101\ufff9\001" +
    "\002\000\056\005\uffe0\006\uffe0\011\uffe0\012\uffe0\015\uffe0" +
    "\016\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\072\uffe0\073\uffe0" +
    "\074\136\075\135\076\134\101\uffe0\001\002\000\102\005" +
    "\ufff1\006\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1" +
    "\065\ufff1\066\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074" +
    "\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\001\002" +
    "\000\102\005\ufff4\006\ufff4\011\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063" +
    "\ufff4\064\ufff4\065\ufff4\066\ufff4\070\ufff4\071\ufff4\072\ufff4" +
    "\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101" +
    "\ufff4\001\002\000\044\005\uffd8\006\uffd8\011\uffd8\012\uffd8" +
    "\015\uffd8\016\uffd8\052\124\053\127\054\125\055\126\056" +
    "\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\101\uffd8" +
    "\001\002\000\032\004\077\013\071\023\072\024\076\025" +
    "\107\026\103\027\067\030\074\031\102\032\112\070\065" +
    "\071\105\001\002\000\026\005\uffd1\006\uffd1\011\uffd1\012" +
    "\uffd1\015\uffd1\016\uffd1\057\uffd1\060\uffd1\061\156\062\uffd1" +
    "\001\002\000\102\005\ufff5\006\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062" +
    "\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\070\ufff5\071\ufff5" +
    "\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\100" +
    "\ufff5\101\ufff5\001\002\000\012\005\uff96\012\uff96\013\uff96" +
    "\014\uff96\001\002\000\034\005\uffd5\006\uffd5\011\uffd5\012" +
    "\uffd5\015\uffd5\016\uffd5\056\122\057\uffd5\060\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\101\121\001\002\000\102\005\ufff0\006" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0" +
    "\066\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075" +
    "\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\001\002\000\050" +
    "\005\uffdd\006\uffdd\011\uffdd\012\uffdd\015\uffdd\016\uffdd\052" +
    "\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd" +
    "\061\uffdd\062\uffdd\063\uffdd\072\132\073\131\101\uffdd\001" +
    "\002\000\102\005\uffef\006\uffef\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\016\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef" +
    "\063\uffef\064\uffef\065\uffef\066\uffef\070\uffef\071\uffef\072" +
    "\uffef\073\uffef\074\uffef\075\uffef\076\uffef\077\uffef\100\uffef" +
    "\101\uffef\001\002\000\006\015\147\057\150\001\002\000" +
    "\030\005\uffd3\006\uffd3\011\uffd3\012\uffd3\015\uffd3\016\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\117\001\002\000" +
    "\032\004\077\013\071\023\072\024\076\025\107\026\103" +
    "\027\067\030\074\031\102\032\112\070\065\071\105\001" +
    "\002\000\034\005\uffd4\006\uffd4\011\uffd4\012\uffd4\015\uffd4" +
    "\016\uffd4\056\122\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063" +
    "\uffd4\101\121\001\002\000\032\004\077\013\071\023\072" +
    "\024\076\025\107\026\103\027\067\030\074\031\102\032" +
    "\112\070\065\071\105\001\002\000\032\004\077\013\071" +
    "\023\072\024\076\025\107\026\103\027\067\030\074\031" +
    "\102\032\112\070\065\071\105\001\002\000\044\005\uffd6" +
    "\006\uffd6\011\uffd6\012\uffd6\015\uffd6\016\uffd6\052\124\053" +
    "\127\054\125\055\126\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\101\uffd6\001\002\000\032\004\077\013" +
    "\071\023\072\024\076\025\107\026\103\027\067\030\074" +
    "\031\102\032\112\070\065\071\105\001\002\000\032\004" +
    "\077\013\071\023\072\024\076\025\107\026\103\027\067" +
    "\030\074\031\102\032\112\070\065\071\105\001\002\000" +
    "\032\004\077\013\071\023\072\024\076\025\107\026\103" +
    "\027\067\030\074\031\102\032\112\070\065\071\105\001" +
    "\002\000\032\004\077\013\071\023\072\024\076\025\107" +
    "\026\103\027\067\030\074\031\102\032\112\070\065\071" +
    "\105\001\002\000\050\005\uffdb\006\uffdb\011\uffdb\012\uffdb" +
    "\015\uffdb\016\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056" +
    "\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\072\132" +
    "\073\131\101\uffdb\001\002\000\032\004\077\013\071\023" +
    "\072\024\076\025\107\026\103\027\067\030\074\031\102" +
    "\032\112\070\065\071\105\001\002\000\032\004\077\013" +
    "\071\023\072\024\076\025\107\026\103\027\067\030\074" +
    "\031\102\032\112\070\065\071\105\001\002\000\056\005" +
    "\uffdf\006\uffdf\011\uffdf\012\uffdf\015\uffdf\016\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\063\uffdf\072\uffdf\073\uffdf\074\136\075\135" +
    "\076\134\101\uffdf\001\002\000\032\004\077\013\071\023" +
    "\072\024\076\025\107\026\103\027\067\030\074\031\102" +
    "\032\112\070\065\071\105\001\002\000\032\004\077\013" +
    "\071\023\072\024\076\025\107\026\103\027\067\030\074" +
    "\031\102\032\112\070\065\071\105\001\002\000\032\004" +
    "\077\013\071\023\072\024\076\025\107\026\103\027\067" +
    "\030\074\031\102\032\112\070\065\071\105\001\002\000" +
    "\056\005\uffe3\006\uffe3\011\uffe3\012\uffe3\015\uffe3\016\uffe3" +
    "\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060" +
    "\uffe3\061\uffe3\062\uffe3\063\uffe3\072\uffe3\073\uffe3\074\uffe3" +
    "\075\uffe3\076\uffe3\101\uffe3\001\002\000\056\005\uffe2\006" +
    "\uffe2\011\uffe2\012\uffe2\015\uffe2\016\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\063\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2" +
    "\101\uffe2\001\002\000\056\005\uffe1\006\uffe1\011\uffe1\012" +
    "\uffe1\015\uffe1\016\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\072" +
    "\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\101\uffe1\001\002" +
    "\000\056\005\uffde\006\uffde\011\uffde\012\uffde\015\uffde\016" +
    "\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde" +
    "\060\uffde\061\uffde\062\uffde\063\uffde\072\uffde\073\uffde\074" +
    "\136\075\135\076\134\101\uffde\001\002\000\050\005\uffdc" +
    "\006\uffdc\011\uffdc\012\uffdc\015\uffdc\016\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc" +
    "\062\uffdc\063\uffdc\072\132\073\131\101\uffdc\001\002\000" +
    "\050\005\uffda\006\uffda\011\uffda\012\uffda\015\uffda\016\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\061\uffda\062\uffda\063\uffda\072\132\073\131\101\uffda" +
    "\001\002\000\050\005\uffd9\006\uffd9\011\uffd9\012\uffd9\015" +
    "\uffd9\016\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\072\132\073" +
    "\131\101\uffd9\001\002\000\044\005\uffd7\006\uffd7\011\uffd7" +
    "\012\uffd7\015\uffd7\016\uffd7\052\124\053\127\054\125\055" +
    "\126\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7" +
    "\101\uffd7\001\002\000\012\005\uff95\012\uff95\013\uff95\014" +
    "\uff95\001\002\000\032\004\077\013\071\023\072\024\076" +
    "\025\107\026\103\027\067\030\074\031\102\032\112\070" +
    "\065\071\105\001\002\000\022\005\uffcc\006\uffcc\011\uffcc" +
    "\012\uffcc\015\uffcc\016\uffcc\057\uffcc\060\152\001\002\000" +
    "\032\004\077\013\071\023\072\024\076\025\107\026\103" +
    "\027\067\030\074\031\102\032\112\070\065\071\105\001" +
    "\002\000\024\005\uffce\006\uffce\011\uffce\012\uffce\015\uffce" +
    "\016\uffce\057\uffce\060\uffce\062\154\001\002\000\032\004" +
    "\077\013\071\023\072\024\076\025\107\026\103\027\067" +
    "\030\074\031\102\032\112\070\065\071\105\001\002\000" +
    "\026\005\uffd0\006\uffd0\011\uffd0\012\uffd0\015\uffd0\016\uffd0" +
    "\057\uffd0\060\uffd0\061\156\062\uffd0\001\002\000\032\004" +
    "\077\013\071\023\072\024\076\025\107\026\103\027\067" +
    "\030\074\031\102\032\112\070\065\071\105\001\002\000" +
    "\030\005\uffd2\006\uffd2\011\uffd2\012\uffd2\015\uffd2\016\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\117\001\002\000" +
    "\072\005\uffe5\006\uffe5\011\uffe5\012\uffe5\015\uffe5\016\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077" +
    "\uffe5\100\uffe5\101\uffe5\001\002\000\034\004\077\010\205" +
    "\013\071\023\072\024\076\025\107\026\103\027\067\030" +
    "\074\031\102\032\112\070\065\071\105\001\002\000\102" +
    "\005\uffea\006\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea" +
    "\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064" +
    "\uffea\065\uffea\066\uffea\070\uffea\071\uffea\072\uffea\073\uffea" +
    "\074\uffea\075\uffea\076\uffea\077\uffea\100\uffea\101\uffea\001" +
    "\002\000\034\004\077\012\170\013\071\023\072\024\076" +
    "\025\107\026\103\027\067\030\074\031\102\032\112\070" +
    "\065\071\105\001\002\000\102\005\uffeb\006\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb" +
    "\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\070" +
    "\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb" +
    "\077\uffeb\100\uffeb\101\uffeb\001\002\000\070\005\uffe4\006" +
    "\uffe4\012\uffe4\015\uffe4\016\uffe4\051\175\052\uffe4\053\uffe4" +
    "\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\064\200\065\203\066\201\072\uffe4\073\uffe4" +
    "\074\uffe4\075\uffe4\076\uffe4\077\202\100\176\101\uffe4\001" +
    "\002\000\006\005\173\012\172\001\002\000\006\005\uffe9" +
    "\012\uffe9\001\002\000\102\005\uffed\006\uffed\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\051\uffed\052\uffed" +
    "\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061" +
    "\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\070\uffed" +
    "\071\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076\uffed\077" +
    "\uffed\100\uffed\101\uffed\001\002\000\016\005\uffcb\006\uffcb" +
    "\012\uffcb\015\uffcb\016\uffcb\057\150\001\002\000\102\005" +
    "\uffec\006\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056" +
    "\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec" +
    "\065\uffec\066\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074" +
    "\uffec\075\uffec\076\uffec\077\uffec\100\uffec\101\uffec\001\002" +
    "\000\032\004\077\013\071\023\072\024\076\025\107\026" +
    "\103\027\067\030\074\031\102\032\112\070\065\071\105" +
    "\001\002\000\006\005\uffe8\012\uffe8\001\002\000\032\004" +
    "\uffc9\013\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\070\uffc9\071\uffc9\001\002\000" +
    "\032\004\uffc7\013\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\070\uffc7\071\uffc7\001" +
    "\002\000\032\004\077\013\071\023\072\024\076\025\107" +
    "\026\103\027\067\030\074\031\102\032\112\070\065\071" +
    "\105\001\002\000\032\004\uffc6\013\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\070" +
    "\uffc6\071\uffc6\001\002\000\032\004\uffc4\013\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\070\uffc4\071\uffc4\001\002\000\032\004\uffc8\013\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\070\uffc8\071\uffc8\001\002\000\032\004\uffc5" +
    "\013\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\070\uffc5\071\uffc5\001\002\000\014" +
    "\005\uffca\006\uffca\012\uffca\015\uffca\016\uffca\001\002\000" +
    "\032\004\077\013\071\023\072\024\076\025\107\026\103" +
    "\027\067\030\074\031\102\032\112\070\065\071\105\001" +
    "\002\000\012\005\uffc3\012\uffc3\015\uffc3\016\uffc3\001\002" +
    "\000\006\005\211\015\210\001\002\000\102\005\uffee\006" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057" +
    "\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee" +
    "\066\uffee\070\uffee\071\uffee\072\uffee\073\uffee\074\uffee\075" +
    "\uffee\076\uffee\077\uffee\100\uffee\101\uffee\001\002\000\032" +
    "\004\077\013\071\023\072\024\076\025\107\026\103\027" +
    "\067\030\074\031\102\032\112\070\065\071\105\001\002" +
    "\000\012\005\uffc2\012\uffc2\015\uffc2\016\uffc2\001\002\000" +
    "\012\005\uffc1\012\uffc1\015\uffc1\016\uffc1\001\002\000\006" +
    "\005\211\012\215\001\002\000\102\005\ufff8\006\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\051\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8" +
    "\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\076" +
    "\ufff8\077\ufff8\100\ufff8\101\ufff8\001\002\000\072\005\uffe6" +
    "\006\uffe6\011\uffe6\012\uffe6\015\uffe6\016\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\072" +
    "\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6" +
    "\101\uffe6\001\002\000\012\005\uff98\012\uff98\013\uff98\014" +
    "\uff98\001\002\000\006\015\221\057\150\001\002\000\012" +
    "\005\uff97\012\uff97\013\uff97\014\uff97\001\002\000\016\005" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\016\uffa6\051\uffa6\001\002" +
    "\000\004\004\224\001\002\000\006\005\uff9d\012\uff9d\001" +
    "\002\000\016\017\014\020\016\021\015\022\006\033\007" +
    "\043\020\001\002\000\006\005\uffa2\012\uffa2\001\002\000" +
    "\016\005\uffa8\012\uffa8\013\uffa8\014\uffa8\016\uffa8\051\uffa8" +
    "\001\002\000\006\015\231\057\150\001\002\000\016\005" +
    "\uffa9\012\uffa9\013\uffa9\014\uffa9\016\uffa9\051\uffa9\001\002" +
    "\000\102\002\uffbf\003\uffbf\004\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\013\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\070\uffbf\071" +
    "\uffbf\001\002\000\006\004\030\013\027\001\002\000\014" +
    "\005\uffb7\013\035\014\033\016\uffb7\051\236\001\002\000" +
    "\006\005\uffb8\016\uffb8\001\002\000\034\004\077\007\241" +
    "\013\071\023\072\024\076\025\107\026\103\027\067\030" +
    "\074\031\102\032\112\070\065\071\105\001\002\000\010" +
    "\005\uff90\006\uff90\016\uff90\001\002\000\006\005\uffb6\016" +
    "\uffb6\001\002\000\034\004\077\007\241\013\071\023\072" +
    "\024\076\025\107\026\103\027\067\030\074\031\102\032" +
    "\112\070\065\071\105\001\002\000\006\005\245\006\244" +
    "\001\002\000\006\005\uff8d\006\uff8d\001\002\000\010\005" +
    "\uff8f\006\uff8f\016\uff8f\001\002\000\036\004\077\006\246" +
    "\007\241\013\071\023\072\024\076\025\107\026\103\027" +
    "\067\030\074\031\102\032\112\070\065\071\105\001\002" +
    "\000\010\005\uff8e\006\uff8e\016\uff8e\001\002\000\006\005" +
    "\uff8c\006\uff8c\001\002\000\022\004\042\012\043\017\014" +
    "\020\016\021\015\022\006\033\007\043\020\001\002\000" +
    "\004\012\252\001\002\000\016\005\uffa7\007\254\013\uffa7" +
    "\014\uffa7\016\uffa7\051\uffa7\001\002\000\022\002\ufffc\003" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\033\ufffc\043\ufffc" +
    "\001\002\000\100\003\265\004\300\006\304\007\254\010" +
    "\205\013\071\016\301\017\014\020\016\021\015\022\006" +
    "\023\072\024\076\025\107\026\103\027\067\030\074\031" +
    "\102\032\112\033\007\036\263\037\262\040\266\041\255" +
    "\043\020\044\273\045\257\046\270\047\260\070\065\071" +
    "\105\001\002\000\004\013\347\001\002\000\064\003\uff7b" +
    "\004\uff7b\006\uff7b\007\uff7b\010\uff7b\013\uff7b\016\uff7b\023" +
    "\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b" +
    "\032\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\044\uff7b\045" +
    "\uff7b\046\uff7b\047\uff7b\070\uff7b\071\uff7b\001\002\000\004" +
    "\011\345\001\002\000\004\016\344\001\002\000\066\003" +
    "\uff8a\004\uff8a\006\uff8a\007\uff8a\010\uff8a\013\uff8a\016\uff8a" +
    "\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031" +
    "\uff8a\032\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a" +
    "\044\uff8a\045\uff8a\046\uff8a\047\uff8a\070\uff8a\071\uff8a\001" +
    "\002\000\004\013\340\001\002\000\004\013\330\001\002" +
    "\000\066\003\uff88\004\uff88\006\uff88\007\uff88\010\uff88\013" +
    "\uff88\016\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88" +
    "\030\uff88\031\uff88\032\uff88\036\uff88\037\uff88\040\uff88\041" +
    "\uff88\042\uff88\044\uff88\045\uff88\046\uff88\047\uff88\070\uff88" +
    "\071\uff88\001\002\000\006\006\311\016\022\001\002\000" +
    "\004\013\324\001\002\000\066\003\uff8b\004\uff8b\006\uff8b" +
    "\007\uff8b\010\uff8b\013\uff8b\016\uff8b\023\uff8b\024\uff8b\025" +
    "\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\036\uff8b" +
    "\037\uff8b\040\uff8b\041\uff8b\042\uff8b\044\uff8b\045\uff8b\046" +
    "\uff8b\047\uff8b\070\uff8b\071\uff8b\001\002\000\004\016\323" +
    "\001\002\000\066\003\uff87\004\uff87\006\uff87\007\uff87\010" +
    "\uff87\013\uff87\016\uff87\023\uff87\024\uff87\025\uff87\026\uff87" +
    "\027\uff87\030\uff87\031\uff87\032\uff87\036\uff87\037\uff87\040" +
    "\uff87\041\uff87\042\uff87\044\uff87\045\uff87\046\uff87\047\uff87" +
    "\070\uff87\071\uff87\001\002\000\100\003\uff7d\004\uff7d\006" +
    "\uff7d\007\uff7d\010\uff7d\013\uff7d\016\uff7d\017\uff7d\020\uff7d" +
    "\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027" +
    "\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\036\uff7d\037\uff7d" +
    "\040\uff7d\041\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047" +
    "\uff7d\070\uff7d\071\uff7d\001\002\000\032\004\077\013\071" +
    "\023\072\024\076\025\107\026\103\027\067\030\074\031" +
    "\102\032\112\070\065\071\105\001\002\000\066\003\uff86" +
    "\004\uff86\006\uff86\007\uff86\010\uff86\013\uff86\016\uff86\023" +
    "\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86" +
    "\032\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\044" +
    "\uff86\045\uff86\046\uff86\047\uff86\070\uff86\071\uff86\001\002" +
    "\000\066\003\uff89\004\uff89\006\uff89\007\uff89\010\uff89\013" +
    "\uff89\016\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89" +
    "\030\uff89\031\uff89\032\uff89\036\uff89\037\uff89\040\uff89\041" +
    "\uff89\042\uff89\044\uff89\045\uff89\046\uff89\047\uff89\070\uff89" +
    "\071\uff89\001\002\000\064\003\310\004\300\006\317\007" +
    "\254\010\205\013\071\016\301\023\072\024\076\025\107" +
    "\026\103\027\067\030\074\031\102\032\112\036\263\037" +
    "\262\040\266\041\255\044\273\045\257\046\270\047\260" +
    "\070\065\071\105\001\002\000\100\003\265\004\300\006" +
    "\314\007\254\010\205\013\071\016\301\017\014\020\016" +
    "\021\015\022\006\023\072\024\076\025\107\026\103\027" +
    "\067\030\074\031\102\032\112\033\007\036\263\037\262" +
    "\040\266\041\255\043\020\044\273\045\257\046\270\047" +
    "\260\070\065\071\105\001\002\000\074\005\ufffa\011\306" +
    "\013\ufffa\014\ufffa\016\ufffa\051\ufffa\052\ufffa\053\ufffa\054" +
    "\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\065\ufffa\066\ufffa\070\ufffa\071\ufffa\072" +
    "\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa" +
    "\101\ufffa\001\002\000\070\003\uff79\004\uff79\006\uff79\007" +
    "\uff79\010\uff79\012\uff79\013\uff79\016\uff79\023\uff79\024\uff79" +
    "\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032\uff79\036" +
    "\uff79\037\uff79\040\uff79\041\uff79\042\uff79\044\uff79\045\uff79" +
    "\046\uff79\047\uff79\070\uff79\071\uff79\001\002\000\010\004" +
    "\030\013\027\016\024\001\002\000\006\005\211\016\305" +
    "\001\002\000\104\002\uff81\003\uff81\004\uff81\006\uff81\007" +
    "\uff81\010\uff81\013\uff81\016\uff81\017\uff81\020\uff81\021\uff81" +
    "\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030" +
    "\uff81\031\uff81\032\uff81\033\uff81\036\uff81\037\uff81\040\uff81" +
    "\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047" +
    "\uff81\070\uff81\071\uff81\001\002\000\070\003\uff78\004\uff78" +
    "\006\uff78\007\uff78\010\uff78\012\uff78\013\uff78\016\uff78\023" +
    "\uff78\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78" +
    "\032\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78\044" +
    "\uff78\045\uff78\046\uff78\047\uff78\070\uff78\071\uff78\001\002" +
    "\000\062\003\310\004\300\007\254\010\205\013\071\016" +
    "\301\023\072\024\076\025\107\026\103\027\067\030\074" +
    "\031\102\032\112\036\263\037\262\040\266\041\255\044" +
    "\273\045\257\046\270\047\260\070\065\071\105\001\002" +
    "\000\066\003\uff84\004\uff84\006\uff84\007\uff84\010\uff84\013" +
    "\uff84\016\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84" +
    "\030\uff84\031\uff84\032\uff84\036\uff84\037\uff84\040\uff84\041" +
    "\uff84\042\uff84\044\uff84\045\uff84\046\uff84\047\uff84\070\uff84" +
    "\071\uff84\001\002\000\004\006\311\001\002\000\066\003" +
    "\uff85\004\uff85\006\uff85\007\uff85\010\uff85\013\uff85\016\uff85" +
    "\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031" +
    "\uff85\032\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85" +
    "\044\uff85\045\uff85\046\uff85\047\uff85\070\uff85\071\uff85\001" +
    "\002\000\100\003\uff7c\004\uff7c\006\uff7c\007\uff7c\010\uff7c" +
    "\013\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\023" +
    "\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c" +
    "\032\uff7c\033\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\043" +
    "\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\070\uff7c\071\uff7c" +
    "\001\002\000\064\003\310\004\300\006\316\007\254\010" +
    "\205\013\071\016\301\023\072\024\076\025\107\026\103" +
    "\027\067\030\074\031\102\032\112\036\263\037\262\040" +
    "\266\041\255\044\273\045\257\046\270\047\260\070\065" +
    "\071\105\001\002\000\104\002\uff7f\003\uff7f\004\uff7f\006" +
    "\uff7f\007\uff7f\010\uff7f\013\uff7f\016\uff7f\017\uff7f\020\uff7f" +
    "\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027" +
    "\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\036\uff7f\037\uff7f" +
    "\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046" +
    "\uff7f\047\uff7f\070\uff7f\071\uff7f\001\002\000\064\003\uff7a" +
    "\004\uff7a\006\uff7a\007\uff7a\010\uff7a\013\uff7a\016\uff7a\023" +
    "\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a" +
    "\032\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\044\uff7a\045" +
    "\uff7a\046\uff7a\047\uff7a\070\uff7a\071\uff7a\001\002\000\104" +
    "\002\uff7e\003\uff7e\004\uff7e\006\uff7e\007\uff7e\010\uff7e\013" +
    "\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e" +
    "\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032" +
    "\uff7e\033\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e" +
    "\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\070\uff7e\071" +
    "\uff7e\001\002\000\104\002\uff80\003\uff80\004\uff80\006\uff80" +
    "\007\uff80\010\uff80\013\uff80\016\uff80\017\uff80\020\uff80\021" +
    "\uff80\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80" +
    "\030\uff80\031\uff80\032\uff80\033\uff80\036\uff80\037\uff80\040" +
    "\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80" +
    "\047\uff80\070\uff80\071\uff80\001\002\000\006\011\321\057" +
    "\150\001\002\000\062\003\310\004\300\007\254\010\205" +
    "\013\071\016\301\023\072\024\076\025\107\026\103\027" +
    "\067\030\074\031\102\032\112\036\263\037\262\040\266" +
    "\041\255\044\273\045\257\046\270\047\260\070\065\071" +
    "\105\001\002\000\066\003\uff83\004\uff83\006\uff83\007\uff83" +
    "\010\uff83\013\uff83\016\uff83\023\uff83\024\uff83\025\uff83\026" +
    "\uff83\027\uff83\030\uff83\031\uff83\032\uff83\036\uff83\037\uff83" +
    "\040\uff83\041\uff83\042\uff83\044\uff83\045\uff83\046\uff83\047" +
    "\uff83\070\uff83\071\uff83\001\002\000\066\003\uff71\004\uff71" +
    "\006\uff71\007\uff71\010\uff71\013\uff71\016\uff71\023\uff71\024" +
    "\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71" +
    "\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71\044\uff71\045" +
    "\uff71\046\uff71\047\uff71\070\uff71\071\uff71\001\002\000\034" +
    "\004\077\010\205\013\071\023\072\024\076\025\107\026" +
    "\103\027\067\030\074\031\102\032\112\070\065\071\105" +
    "\001\002\000\006\005\211\012\326\001\002\000\062\003" +
    "\310\004\300\007\254\010\205\013\071\016\301\023\072" +
    "\024\076\025\107\026\103\027\067\030\074\031\102\032" +
    "\112\036\263\037\262\040\266\041\255\044\273\045\257" +
    "\046\270\047\260\070\065\071\105\001\002\000\066\003" +
    "\uff75\004\uff75\006\uff75\007\uff75\010\uff75\013\uff75\016\uff75" +
    "\023\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031" +
    "\uff75\032\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75" +
    "\044\uff75\045\uff75\046\uff75\047\uff75\070\uff75\071\uff75\001" +
    "\002\000\036\004\077\010\205\013\071\016\301\023\072" +
    "\024\076\025\107\026\103\027\067\030\074\031\102\032" +
    "\112\070\065\071\105\001\002\000\036\004\077\010\205" +
    "\013\071\016\301\023\072\024\076\025\107\026\103\027" +
    "\067\030\074\031\102\032\112\070\065\071\105\001\002" +
    "\000\036\004\077\010\205\012\333\013\071\023\072\024" +
    "\076\025\107\026\103\027\067\030\074\031\102\032\112" +
    "\070\065\071\105\001\002\000\062\003\310\004\300\007" +
    "\254\010\205\013\071\016\301\023\072\024\076\025\107" +
    "\026\103\027\067\030\074\031\102\032\112\036\263\037" +
    "\262\040\266\041\255\044\273\045\257\046\270\047\260" +
    "\070\065\071\105\001\002\000\006\005\211\012\335\001" +
    "\002\000\062\003\310\004\300\007\254\010\205\013\071" +
    "\016\301\023\072\024\076\025\107\026\103\027\067\030" +
    "\074\031\102\032\112\036\263\037\262\040\266\041\255" +
    "\044\273\045\257\046\270\047\260\070\065\071\105\001" +
    "\002\000\066\003\uff72\004\uff72\006\uff72\007\uff72\010\uff72" +
    "\013\uff72\016\uff72\023\uff72\024\uff72\025\uff72\026\uff72\027" +
    "\uff72\030\uff72\031\uff72\032\uff72\036\uff72\037\uff72\040\uff72" +
    "\041\uff72\042\uff72\044\uff72\045\uff72\046\uff72\047\uff72\070" +
    "\uff72\071\uff72\001\002\000\066\003\uff73\004\uff73\006\uff73" +
    "\007\uff73\010\uff73\013\uff73\016\uff73\023\uff73\024\uff73\025" +
    "\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\036\uff73" +
    "\037\uff73\040\uff73\041\uff73\042\uff73\044\uff73\045\uff73\046" +
    "\uff73\047\uff73\070\uff73\071\uff73\001\002\000\034\004\077" +
    "\010\205\013\071\023\072\024\076\025\107\026\103\027" +
    "\067\030\074\031\102\032\112\070\065\071\105\001\002" +
    "\000\006\005\211\012\342\001\002\000\062\003\310\004" +
    "\300\007\254\010\205\013\071\016\301\023\072\024\076" +
    "\025\107\026\103\027\067\030\074\031\102\032\112\036" +
    "\263\037\262\040\266\041\255\044\273\045\257\046\270" +
    "\047\260\070\065\071\105\001\002\000\066\003\uff74\004" +
    "\uff74\006\uff74\007\uff74\010\uff74\013\uff74\016\uff74\023\uff74" +
    "\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74\032" +
    "\uff74\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74\044\uff74" +
    "\045\uff74\046\uff74\047\uff74\070\uff74\071\uff74\001\002\000" +
    "\066\003\uff70\004\uff70\006\uff70\007\uff70\010\uff70\013\uff70" +
    "\016\uff70\023\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030" +
    "\uff70\031\uff70\032\uff70\036\uff70\037\uff70\040\uff70\041\uff70" +
    "\042\uff70\044\uff70\045\uff70\046\uff70\047\uff70\070\uff70\071" +
    "\uff70\001\002\000\062\003\310\004\300\007\254\010\205" +
    "\013\071\016\301\023\072\024\076\025\107\026\103\027" +
    "\067\030\074\031\102\032\112\036\263\037\262\040\266" +
    "\041\255\044\273\045\257\046\270\047\260\070\065\071" +
    "\105\001\002\000\066\003\uff82\004\uff82\006\uff82\007\uff82" +
    "\010\uff82\013\uff82\016\uff82\023\uff82\024\uff82\025\uff82\026" +
    "\uff82\027\uff82\030\uff82\031\uff82\032\uff82\036\uff82\037\uff82" +
    "\040\uff82\041\uff82\042\uff82\044\uff82\045\uff82\046\uff82\047" +
    "\uff82\070\uff82\071\uff82\001\002\000\034\004\077\010\205" +
    "\013\071\023\072\024\076\025\107\026\103\027\067\030" +
    "\074\031\102\032\112\070\065\071\105\001\002\000\006" +
    "\005\211\012\351\001\002\000\062\003\310\004\300\007" +
    "\254\010\205\013\071\016\301\023\072\024\076\025\107" +
    "\026\103\027\067\030\074\031\102\032\112\036\263\037" +
    "\262\040\266\041\255\044\273\045\257\046\270\047\260" +
    "\070\065\071\105\001\002\000\066\003\uff77\004\uff77\006" +
    "\uff77\007\uff77\010\uff77\013\uff77\016\uff77\023\uff77\024\uff77" +
    "\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77\036" +
    "\uff77\037\uff77\040\uff77\041\uff77\042\uff77\044\uff77\045\uff77" +
    "\046\uff77\047\uff77\070\uff77\071\uff77\001\002\000\062\003" +
    "\310\004\300\007\254\010\205\013\071\016\301\023\072" +
    "\024\076\025\107\026\103\027\067\030\074\031\102\032" +
    "\112\036\263\037\262\040\266\041\255\044\273\045\257" +
    "\046\270\047\260\070\065\071\105\001\002\000\066\003" +
    "\uff76\004\uff76\006\uff76\007\uff76\010\uff76\013\uff76\016\uff76" +
    "\023\uff76\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031" +
    "\uff76\032\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76" +
    "\044\uff76\045\uff76\046\uff76\047\uff76\070\uff76\071\uff76\001" +
    "\002\000\022\002\uffff\003\uffff\017\uffff\020\uffff\021\uffff" +
    "\022\uffff\033\uffff\043\uffff\001\002\000\004\002\001\001" +
    "\002\000\016\004\uffbd\005\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\016\uffbd\001\002\000\016\004\uffba\005\uffba\012\uffba\013" +
    "\uffba\014\uffba\016\uffba\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\020\002\011\025\020\032\010\107\003\133" +
    "\012\135\007\137\004\001\001\000\002\001\001\000\010" +
    "\133\357\135\007\137\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\133\356\135\007\137\004\001\001" +
    "\000\002\001\001\000\016\025\020\032\010\107\354\133" +
    "\012\135\007\137\004\001\001\000\010\077\024\132\025" +
    "\134\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\017\077\113\113\114\074\116\065\117\100" +
    "\120\112\121\103\122\110\123\115\124\105\125\067\126" +
    "\072\127\227\001\001\000\002\001\001\000\020\133\037" +
    "\135\007\137\004\140\043\141\035\142\040\143\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\077\046" +
    "\145\047\146\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\017\077\113\113\114\074\116\065\117\100\120" +
    "\112\121\103\122\110\123\115\124\105\125\067\126\072" +
    "\127\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\077\031\133\037\135\007\137\004" +
    "\140\052\141\035\142\040\145\053\146\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\017\077\113\113\114" +
    "\074\116\065\117\100\120\112\121\103\122\110\123\115" +
    "\124\105\125\067\126\072\127\114\001\001\000\016\133" +
    "\037\135\007\137\004\140\062\141\035\142\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\077\113\113\114\074\116\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\017" +
    "\077\054\213\113\113\114\074\116\164\117\100\120\112" +
    "\121\103\122\110\123\115\124\105\125\067\126\072\127" +
    "\170\130\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\077\113\113\114\074\116\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\017\077\113\113\114" +
    "\074\116\065\117\100\120\112\121\103\122\117\001\001" +
    "\000\002\001\001\000\020\017\077\113\113\114\074\116" +
    "\065\117\100\120\112\121\145\001\001\000\020\017\077" +
    "\113\113\114\074\116\065\117\100\120\112\121\122\001" +
    "\001\000\002\001\001\000\016\017\077\113\113\114\074" +
    "\116\065\117\100\120\144\001\001\000\016\017\077\113" +
    "\113\114\074\116\065\117\100\120\143\001\001\000\016" +
    "\017\077\113\113\114\074\116\065\117\100\120\142\001" +
    "\001\000\016\017\077\113\113\114\074\116\065\117\100" +
    "\120\127\001\001\000\002\001\001\000\014\017\077\113" +
    "\113\114\074\116\065\117\141\001\001\000\014\017\077" +
    "\113\113\114\074\116\065\117\132\001\001\000\002\001" +
    "\001\000\012\017\077\113\113\114\074\116\140\001\001" +
    "\000\012\017\077\113\113\114\074\116\137\001\001\000" +
    "\012\017\077\113\113\114\074\116\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\017\077\113" +
    "\113\114\074\116\065\117\100\120\112\121\103\122\110" +
    "\123\115\124\105\125\067\126\150\001\001\000\002\001" +
    "\001\000\030\017\077\113\113\114\074\116\065\117\100" +
    "\120\112\121\103\122\110\123\115\124\105\125\152\001" +
    "\001\000\002\001\001\000\026\017\077\113\113\114\074" +
    "\116\065\117\100\120\112\121\103\122\110\123\115\124" +
    "\154\001\001\000\002\001\001\000\024\017\077\113\113" +
    "\114\074\116\065\117\100\120\112\121\103\122\110\123" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\017\077\054\206\113\113\114\074\116\164\117\100\120" +
    "\112\121\103\122\110\123\115\124\105\125\067\126\072" +
    "\127\170\130\205\001\001\000\002\001\001\000\040\017" +
    "\077\113\113\114\074\115\165\116\164\117\100\120\112" +
    "\121\103\122\110\123\115\124\105\125\067\126\072\127" +
    "\170\130\166\001\001\000\002\001\001\000\004\131\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\017\077" +
    "\113\113\114\074\116\164\117\100\120\112\121\103\122" +
    "\110\123\115\124\105\125\067\126\072\127\170\130\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\017\077\113\113\114\074\116\164\117\100" +
    "\120\112\121\103\122\110\123\115\124\105\125\067\126" +
    "\072\127\170\130\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\017\077\113\113\114\074\116\164\117\100" +
    "\120\112\121\103\122\110\123\115\124\105\125\067\126" +
    "\072\127\170\130\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\017\077\113\113\114" +
    "\074\116\164\117\100\120\112\121\103\122\110\123\115" +
    "\124\105\125\067\126\072\127\170\130\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\133\037\135\007\137\004\142" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\077" +
    "\233\134\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\017\077\100\237\113\113\114\074\116\164\117" +
    "\100\120\112\121\103\122\110\123\115\124\105\125\067" +
    "\126\072\127\170\130\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\017\077\100\242\113\113\114\074" +
    "\116\164\117\100\120\112\121\103\122\110\123\115\124" +
    "\105\125\067\126\072\127\170\130\236\147\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\017\077\100\246\113\113\114\074\116\164\117\100" +
    "\120\112\121\103\122\110\123\115\124\105\125\067\126" +
    "\072\127\170\130\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\133\037\135\007\137\004\140\250\141" +
    "\035\142\040\143\036\001\001\000\002\001\001\000\004" +
    "\152\252\001\001\000\002\001\001\000\072\017\077\032" +
    "\271\054\302\113\113\114\074\116\164\117\100\120\112" +
    "\121\103\122\110\123\115\124\105\125\067\126\072\127" +
    "\170\130\205\133\301\135\007\137\004\150\255\151\266" +
    "\152\260\153\276\154\275\155\274\156\263\157\270\160" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\017\077\113\113" +
    "\114\074\116\065\117\100\120\112\121\103\122\110\123" +
    "\115\124\105\125\067\126\072\127\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\017\077\054\302\113" +
    "\113\114\074\116\164\117\100\120\112\121\103\122\110" +
    "\123\115\124\105\125\067\126\072\127\170\130\205\150" +
    "\314\151\266\152\260\155\274\156\263\157\270\160\273" +
    "\001\001\000\070\017\077\032\311\054\302\113\113\114" +
    "\074\116\164\117\100\120\112\121\103\122\110\123\115" +
    "\124\105\125\067\126\072\127\170\130\205\133\301\135" +
    "\007\137\004\150\255\151\266\152\260\154\312\155\274" +
    "\156\263\157\270\160\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\077\233\132\025\134\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\017\077\054\302\113\113\114\074\116\164\117\100" +
    "\120\112\121\103\122\110\123\115\124\105\125\067\126" +
    "\072\127\170\130\205\150\306\151\266\152\260\155\274" +
    "\156\263\157\270\160\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\017\077\054\302\113\113\114\074\116\164\117\100\120" +
    "\112\121\103\122\110\123\115\124\105\125\067\126\072" +
    "\127\170\130\205\150\314\151\266\152\260\155\274\156" +
    "\263\157\270\160\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\017\077\054\302\113\113\114\074\116\164" +
    "\117\100\120\112\121\103\122\110\123\115\124\105\125" +
    "\067\126\072\127\170\130\205\150\321\151\266\152\260" +
    "\155\274\156\263\157\270\160\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\017\077\054\324\113\113" +
    "\114\074\116\164\117\100\120\112\121\103\122\110\123" +
    "\115\124\105\125\067\126\072\127\170\130\205\001\001" +
    "\000\002\001\001\000\056\017\077\054\302\113\113\114" +
    "\074\116\164\117\100\120\112\121\103\122\110\123\115" +
    "\124\105\125\067\126\072\127\170\130\205\150\326\151" +
    "\266\152\260\155\274\156\263\157\270\160\273\001\001" +
    "\000\002\001\001\000\042\017\077\054\302\113\113\114" +
    "\074\116\164\117\100\120\112\121\103\122\110\123\115" +
    "\124\105\125\067\126\072\127\170\130\205\155\330\001" +
    "\001\000\042\017\077\054\302\113\113\114\074\116\164" +
    "\117\100\120\112\121\103\122\110\123\115\124\105\125" +
    "\067\126\072\127\170\130\205\155\331\001\001\000\040" +
    "\017\077\054\333\113\113\114\074\116\164\117\100\120" +
    "\112\121\103\122\110\123\115\124\105\125\067\126\072" +
    "\127\170\130\205\001\001\000\056\017\077\054\302\113" +
    "\113\114\074\116\164\117\100\120\112\121\103\122\110" +
    "\123\115\124\105\125\067\126\072\127\170\130\205\150" +
    "\336\151\266\152\260\155\274\156\263\157\270\160\273" +
    "\001\001\000\002\001\001\000\056\017\077\054\302\113" +
    "\113\114\074\116\164\117\100\120\112\121\103\122\110" +
    "\123\115\124\105\125\067\126\072\127\170\130\205\150" +
    "\335\151\266\152\260\155\274\156\263\157\270\160\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\017" +
    "\077\054\340\113\113\114\074\116\164\117\100\120\112" +
    "\121\103\122\110\123\115\124\105\125\067\126\072\127" +
    "\170\130\205\001\001\000\002\001\001\000\056\017\077" +
    "\054\302\113\113\114\074\116\164\117\100\120\112\121" +
    "\103\122\110\123\115\124\105\125\067\126\072\127\170" +
    "\130\205\150\342\151\266\152\260\155\274\156\263\157" +
    "\270\160\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\017\077\054\302\113\113\114\074\116\164\117" +
    "\100\120\112\121\103\122\110\123\115\124\105\125\067" +
    "\126\072\127\170\130\205\150\345\151\266\152\260\155" +
    "\274\156\263\157\270\160\273\001\001\000\002\001\001" +
    "\000\040\017\077\054\347\113\113\114\074\116\164\117" +
    "\100\120\112\121\103\122\110\123\115\124\105\125\067" +
    "\126\072\127\170\130\205\001\001\000\002\001\001\000" +
    "\056\017\077\054\302\113\113\114\074\116\164\117\100" +
    "\120\112\121\103\122\110\123\115\124\105\125\067\126" +
    "\072\127\170\130\205\150\351\151\266\152\260\155\274" +
    "\156\263\157\270\160\273\001\001\000\002\001\001\000" +
    "\056\017\077\054\302\113\113\114\074\116\164\117\100" +
    "\120\112\121\103\122\110\123\115\124\105\125\067\126" +
    "\072\127\170\130\205\150\353\151\266\152\260\155\274" +
    "\156\263\157\270\160\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    } 
    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DECLARACION_EXTERNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INICIO DECLARACION_EXTERNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION_EXTERNA ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_EXTERNA",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION_EXTERNA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_EXTERNA",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION ::= ESPECIFICADORES_DECLARACION DECLARADOR OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCION ::= error OperadorCorcheteDer 
            {
              Object RESULT =null;
		 errores.add(new ErrorSintactico(parser.getS(), "Declaración de función no válida")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPRESION_PRIMARIA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXPRESION_PRIMARIA ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPRESION_PRIMARIA ::= OperadorParentesisIz EXPRESION OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LITERAL ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LITERAL ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LITERAL ::= FlotanteExponente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LITERAL ::= Octal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LITERAL ::= OctalFlotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LITERAL ::= Hexadecimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LITERAL ::= HexadecimalFlotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LITERAL ::= Caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION_POSTFIJA ::= EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorParCuadradoIz EXPRESION OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorParentesisIz LISTA_ARGUMENTOS_EXPRESIONES OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorIncremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorDecremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA_ARGUMENTOS_EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ARGUMENTOS_EXPRESIONES",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_ARGUMENTOS_EXPRESIONES ::= LISTA_ARGUMENTOS_EXPRESIONES OperadorComa EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ARGUMENTOS_EXPRESIONES",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION_UNARIA ::= EXPRESION_POSTFIJA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION_UNARIA ::= OperadorIncremental EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION_UNARIA ::= OperadorDecremental EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_MULTIPLICATIVA OperadorMultiplicacion EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_MULTIPLICATIVA OperadorDivision EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_MULTIPLICATIVA OperadorModulo EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION_ADITIVA ::= EXPRESION_MULTIPLICATIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ADITIVA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION_ADITIVA ::= EXPRESION_ADITIVA OperadorMas EXPRESION_MULTIPLICATIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ADITIVA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION_ADITIVA ::= EXPRESION_ADITIVA OperadorMenos EXPRESION_MULTIPLICATIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ADITIVA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION_RELACIONAL ::= EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMenor EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMayor EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMenorIgual EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMayorIgual EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION_IGUALDAD ::= EXPRESION_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_IGUALDAD",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION_IGUALDAD ::= EXPRESION_IGUALDAD OperadorIgualIgual EXPRESION_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_IGUALDAD",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION_IGUALDAD ::= EXPRESION_IGUALDAD OperadorDesigual EXPRESION_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_IGUALDAD",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION_AND ::= EXPRESION_IGUALDAD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AND",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION_AND ::= EXPRESION_AND OperadorAND EXPRESION_IGUALDAD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AND",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION_XOR ::= EXPRESION_AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_XOR",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION_XOR ::= EXPRESION_XOR OperadorXOR EXPRESION_AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_XOR",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION_OR ::= EXPRESION_XOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_OR",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION_OR ::= EXPRESION_OR OperadorOR EXPRESION_XOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_OR",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION_LAZY_AND ::= EXPRESION_OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_AND",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION_LAZY_AND ::= EXPRESION_LAZY_AND OperadorANDLazy EXPRESION_OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_AND",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION_LAZY_OR ::= EXPRESION_LAZY_AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_OR",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION_LAZY_OR ::= EXPRESION_LAZY_OR OperadorORLazy EXPRESION_LAZY_AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_OR",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION_ASIGNACION ::= EXPRESION_LAZY_OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION_ASIGNACION ::= EXPRESION_UNARIA OPERADOR_ASIGNACION EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERADOR_ASIGNACION ::= OperadorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERADOR_ASIGNACION ::= OperadorMasIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERADOR_ASIGNACION ::= OperadorMenosIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERADOR_ASIGNACION ::= OperadorMultiIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERADOR_ASIGNACION ::= OperadorDivIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERADOR_ASIGNACION ::= OperadorModIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION OperadorComa EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= OperadorNegacion EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= ESPECIFICADORES_DECLARACION OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= ESPECIFICADORES_DECLARACION LISTA_DECLARADORES_INICIALIZADORES OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= error OperadorPuntoComa 
            {
              Object RESULT =null;
		 errores.add(new ErrorSintactico(parser.getS(), "Declaración no válida")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ESPECIFICADORES_DECLARACION ::= ESPECIFICADOR_TIPO ESPECIFICADORES_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ESPECIFICADORES_DECLARACION ::= ESPECIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ESPECIFICADORES_DECLARACION ::= CUALIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ESPECIFICADORES_DECLARACION ::= CUALIFICADOR_TIPO ESPECIFICADORES_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LISTA_DECLARADORES_INICIALIZADORES ::= DECLARADOR_INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARADORES_INICIALIZADORES",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LISTA_DECLARADORES_INICIALIZADORES ::= LISTA_DECLARADORES_INICIALIZADORES OperadorComa DECLARADOR_INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARADORES_INICIALIZADORES",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARADOR_INICIALIZADOR ::= DECLARADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_INICIALIZADOR",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARADOR_INICIALIZADOR ::= DECLARADOR OperadorIgual INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_INICIALIZADOR",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ESPECIFICADOR_TIPO ::= Void 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ESPECIFICADOR_TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ESPECIFICADOR_TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ESPECIFICADOR_TIPO ::= Long 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ESPECIFICADOR_TIPO ::= Short 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= ESPECIFICADOR_TIPO LISTA_CUALIFICADOR_ESPECIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= ESPECIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= CUALIFICADOR_TIPO LISTA_CUALIFICADOR_ESPECIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= CUALIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CUALIFICADOR_TIPO ::= Const 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUALIFICADOR_TIPO",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARADOR ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		System.out.println("Encuentra: "+id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARADOR ::= OperadorParentesisIz DECLARADOR OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARADOR ::= DECLARADOR OperadorParCuadradoIz EXPRESION_LAZY_OR OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARADOR ::= DECLARADOR OperadorParCuadradoIz OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARADOR ::= DECLARADOR OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARADOR ::= DECLARADOR OperadorParentesisIz LISTA_IDENTIFICADORES OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARADOR ::= DECLARADOR OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LISTA_TIPOS_PARAMETROS ::= LISTA_PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_TIPOS_PARAMETROS",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LISTA_PARAMETROS ::= DECLARACION_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LISTA_PARAMETROS ::= LISTA_PARAMETROS OperadorComa DECLARACION_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION_PARAMETRO ::= ESPECIFICADORES_DECLARACION DECLARADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION_PARAMETRO ::= ESPECIFICADORES_DECLARACION DECLARADOR_ABSTRACTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION_PARAMETRO ::= ESPECIFICADORES_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LISTA_IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES OperadorComa Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NOMBRE_TIPO ::= LISTA_CUALIFICADOR_ESPECIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOMBRE_TIPO",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NOMBRE_TIPO ::= LISTA_CUALIFICADOR_ESPECIFICADOR DECLARADOR_ABSTRACTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOMBRE_TIPO",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECLARADOR_ABSTRACTO ::= DECLARADOR_ABSTRACTO_DIRECTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParentesisIz DECLARADOR_ABSTRACTO OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParCuadradoIz OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParCuadradoIz EXPRESION_LAZY_OR OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParCuadradoIz OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParCuadradoIz EXPRESION_LAZY_OR OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INICIALIZADOR ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INICIALIZADOR ::= OperadorCorcheteIz LISTA_INICIALIZADORES OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INICIALIZADOR ::= OperadorCorcheteIz LISTA_INICIALIZADORES OperadorComa OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LISTA_INICIALIZADORES ::= INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_INICIALIZADORES",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LISTA_INICIALIZADORES ::= LISTA_INICIALIZADORES OperadorComa INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_INICIALIZADORES",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA ::= SENTENCIA_ETIQUETADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA ::= SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA ::= SENTENCIA_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA ::= SENTENCIA_SELECCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA ::= SENTENCIA_ITERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA ::= SENTENCIA_SALTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA ::= error OperadorCorcheteDer 
            {
              Object RESULT =null;
		 errores.add(new ErrorSintactico(parser.getS(), "Declaracion de sentencia no válida")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIA_ETIQUETADA ::= Identificador OperadorDoblePunto SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ETIQUETADA",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCIA_ETIQUETADA ::= Case EXPRESION_LAZY_OR OperadorDoblePunto SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ETIQUETADA",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA_ETIQUETADA ::= Default OperadorDoblePunto SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ETIQUETADA",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz LISTA_SENTENCIAS OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz LISTA_DECLARACIONES OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz LISTA_DECLARACIONES LISTA_SENTENCIAS OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // LISTA_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LISTA_DECLARACIONES ::= LISTA_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA_EXPRESION ::= OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EXPRESION",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIA_EXPRESION ::= EXPRESION OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EXPRESION",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIA_SELECCION ::= If OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA_SELECCION ::= If OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA Else SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA_SELECCION ::= Switch OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA_ITERACION ::= While OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ITERACION",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIA_ITERACION ::= For OperadorParentesisIz SENTENCIA_EXPRESION SENTENCIA_EXPRESION OperadorParentesisDer SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ITERACION",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIA_ITERACION ::= For OperadorParentesisIz SENTENCIA_EXPRESION SENTENCIA_EXPRESION EXPRESION OperadorParentesisDer SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ITERACION",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SENTENCIA_SALTO ::= Continue OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SALTO",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SENTENCIA_SALTO ::= Break OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SALTO",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
