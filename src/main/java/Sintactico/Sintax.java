
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Sintactico;

import static Sintactico.ListaErrores.errores;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\233\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\011\003\000\002\011\003\000\002\005\010" +
    "\000\002\005\010\000\002\005\004\000\002\012\003\000" +
    "\002\012\003\000\002\012\005\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\013\003\000\002\013\006\000\002\013\005\000" +
    "\002\013\006\000\002\013\004\000\002\013\004\000\002" +
    "\014\003\000\002\014\005\000\002\015\003\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\016\003\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\017\003\000\002\017" +
    "\005\000\002\017\005\000\002\020\003\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\021\003\000\002\021\005\000\002\021\005\000\002" +
    "\022\003\000\002\022\005\000\002\023\003\000\002\023" +
    "\005\000\002\024\003\000\002\024\005\000\002\025\003" +
    "\000\002\025\005\000\002\026\003\000\002\026\005\000" +
    "\002\027\003\000\002\027\005\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\006\003\000\002\006\005" +
    "\000\002\006\004\000\002\004\004\000\002\004\005\000" +
    "\002\004\004\000\002\032\004\000\002\032\003\000\002" +
    "\032\003\000\002\032\004\000\002\031\003\000\002\031" +
    "\005\000\002\033\003\000\002\033\005\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\004\000\002\035\003\000\002\035\004\000\002" +
    "\035\003\000\002\036\003\000\002\007\003\000\002\007" +
    "\005\000\002\007\006\000\002\007\005\000\002\007\006" +
    "\000\002\007\006\000\002\007\005\000\002\037\003\000" +
    "\002\040\003\000\002\040\005\000\002\041\004\000\002" +
    "\041\004\000\002\041\003\000\002\042\003\000\002\042" +
    "\005\000\002\043\003\000\002\043\004\000\002\044\003" +
    "\000\002\045\005\000\002\045\004\000\002\045\005\000" +
    "\002\045\005\000\002\045\006\000\002\045\004\000\002" +
    "\045\005\000\002\045\005\000\002\045\006\000\002\010" +
    "\003\000\002\010\005\000\002\010\006\000\002\046\003" +
    "\000\002\046\005\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\004\000\002\050" +
    "\006\000\002\050\005\000\002\051\004\000\002\051\005" +
    "\000\002\051\005\000\002\051\006\000\002\052\003\000" +
    "\002\052\004\000\002\053\003\000\002\053\004\000\002" +
    "\054\003\000\002\054\004\000\002\055\007\000\002\055" +
    "\011\000\002\055\007\000\002\056\007\000\002\056\010" +
    "\000\002\056\011\000\002\057\004\000\002\057\004\000" +
    "\002\060\007\000\002\060\006\000\002\060\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\020\003\017\017\014\020\015\021\016\022" +
    "\006\033\005\043\020\001\002\000\022\002\000\003\000" +
    "\017\000\020\000\021\000\022\000\033\000\043\000\001" +
    "\002\000\030\004\uffa6\005\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\033\uffa6\001" +
    "\002\000\030\004\uffab\005\uffab\012\uffab\013\uffab\014\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\033\uffab\001" +
    "\002\000\030\004\uffb4\005\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\016\uffb4\017\014\020\015\021\016\022\006\033\005\001" +
    "\002\000\030\004\uffb5\005\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\016\uffb5\017\014\020\015\021\016\022\006\033\005\001" +
    "\002\000\022\002\ufffe\003\ufffe\017\ufffe\020\ufffe\021\ufffe" +
    "\022\ufffe\033\ufffe\043\ufffe\001\002\000\022\002\u0104\003" +
    "\017\017\014\020\015\021\016\022\006\033\005\043\020" +
    "\001\002\000\010\004\023\013\024\016\274\001\002\000" +
    "\030\004\uffae\005\uffae\012\uffae\013\uffae\014\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\033\uffae\001\002\000" +
    "\030\004\uffad\005\uffad\012\uffad\013\uffad\014\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\033\uffad\001\002\000" +
    "\030\004\uffac\005\uffac\012\uffac\013\uffac\014\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\022\uffac\033\uffac\001\002\000" +
    "\006\006\375\016\341\001\002\000\006\004\023\013\024" +
    "\001\002\000\022\002\ufffd\003\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\022\ufffd\033\ufffd\043\ufffd\001\002\000\006\013\234" +
    "\014\026\001\002\000\016\005\uffa5\012\uffa5\013\uffa5\014" +
    "\uffa5\016\uffa5\050\uffa5\001\002\000\006\004\023\013\024" +
    "\001\002\000\010\012\027\013\030\014\026\001\002\000" +
    "\046\004\066\010\074\013\060\015\231\023\061\024\067" +
    "\025\101\026\073\027\056\030\063\031\071\032\106\062" +
    "\102\066\054\067\077\070\105\071\053\072\064\001\002" +
    "\000\016\005\uffa4\012\uffa4\013\uffa4\014\uffa4\016\uffa4\050" +
    "\uffa4\001\002\000\020\004\034\012\036\017\014\020\015" +
    "\021\016\022\006\033\005\001\002\000\006\005\227\012" +
    "\uff9e\001\002\000\006\005\225\012\224\001\002\000\014" +
    "\004\023\005\uff99\012\uff99\013\044\014\041\001\002\000" +
    "\006\005\uff98\012\uff98\001\002\000\006\005\uff9d\012\uff9d" +
    "\001\002\000\016\005\uff9f\012\uff9f\013\uff9f\014\uff9f\016" +
    "\uff9f\050\uff9f\001\002\000\004\012\040\001\002\000\016" +
    "\005\uffa1\012\uffa1\013\uffa1\014\uffa1\016\uffa1\050\uffa1\001" +
    "\002\000\046\004\066\010\074\013\060\015\221\023\061" +
    "\024\067\025\101\026\073\027\056\030\063\031\071\032" +
    "\106\062\102\066\054\067\077\070\105\071\053\072\064" +
    "\001\002\000\012\005\uff9b\012\uff9b\013\030\014\026\001" +
    "\002\000\006\005\uff9a\012\uff9a\001\002\000\024\004\023" +
    "\012\216\013\044\014\041\017\014\020\015\021\016\022" +
    "\006\033\005\001\002\000\012\005\uff94\012\uff94\013\047" +
    "\014\046\001\002\000\046\004\066\010\074\013\060\015" +
    "\103\023\061\024\067\025\101\026\073\027\056\030\063" +
    "\031\071\032\106\062\102\066\054\067\077\070\105\071" +
    "\053\072\064\001\002\000\016\012\050\017\014\020\015" +
    "\021\016\022\006\033\005\001\002\000\012\005\uff8c\012" +
    "\uff8c\013\uff8c\014\uff8c\001\002\000\004\012\052\001\002" +
    "\000\012\005\uff8b\012\uff8b\013\uff8b\014\uff8b\001\002\000" +
    "\044\004\uffdf\010\uffdf\013\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\062\uffdf\066" +
    "\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf\001\002\000\044" +
    "\004\066\010\074\013\060\023\061\024\067\025\101\026" +
    "\073\027\056\030\063\031\071\032\106\062\102\066\054" +
    "\067\077\070\105\071\053\072\064\001\002\000\056\005" +
    "\uffdd\006\uffdd\011\uffdd\012\uffdd\015\uffdd\016\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060" +
    "\uffdd\061\uffdd\062\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd" +
    "\074\uffdd\077\uffdd\001\002\000\102\005\ufff2\006\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074" +
    "\ufff2\075\ufff2\076\ufff2\077\ufff2\001\002\000\024\005\uffc8" +
    "\006\uffc8\011\uffc8\012\uffc8\015\uffc8\016\uffc8\056\uffc8\057" +
    "\uffc8\061\150\001\002\000\044\004\066\010\202\013\060" +
    "\023\061\024\067\025\101\026\073\027\056\030\063\031" +
    "\071\032\106\062\102\066\054\067\077\070\105\071\053" +
    "\072\064\001\002\000\102\005\ufff6\006\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6" +
    "\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075" +
    "\ufff6\076\ufff6\077\ufff6\001\002\000\022\005\uffc6\006\uffc6" +
    "\011\uffc6\012\uffc6\015\uffc6\016\uffc6\056\uffc6\057\146\001" +
    "\002\000\102\005\ufff1\006\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\050\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1" +
    "\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070" +
    "\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1" +
    "\077\ufff1\001\002\000\044\004\uffe1\010\uffe1\013\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\062\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072" +
    "\uffe1\001\002\000\102\005\uffe6\006\uffe6\011\uffe6\012\uffe6" +
    "\013\157\014\156\015\uffe6\016\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\161\067" +
    "\160\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6" +
    "\076\uffe6\077\uffe6\001\002\000\102\005\ufff9\006\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057" +
    "\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9" +
    "\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074" +
    "\ufff9\075\ufff9\076\ufff9\077\ufff9\001\002\000\102\005\ufff5" +
    "\006\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064" +
    "\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5" +
    "\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\001\002\000" +
    "\102\005\ufff8\006\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8" +
    "\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071" +
    "\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8" +
    "\001\002\000\102\005\ufff0\006\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\050\ufff0\051\ufff0\052\ufff0" +
    "\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061" +
    "\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0" +
    "\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076" +
    "\ufff0\077\ufff0\001\002\000\056\005\uffd9\006\uffd9\011\uffd9" +
    "\012\uffd9\015\uffd9\016\uffd9\051\uffd9\052\uffd9\053\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9" +
    "\070\uffd9\071\uffd9\072\132\073\131\074\130\077\uffd9\001" +
    "\002\000\102\005\ufff3\006\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\050\ufff3\051\ufff3\052\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3" +
    "\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070" +
    "\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3" +
    "\077\ufff3\001\002\000\044\004\uffde\010\uffde\013\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\062\uffde\066\uffde\067\uffde\070\uffde\071\uffde\072" +
    "\uffde\001\002\000\044\004\066\010\074\013\060\023\061" +
    "\024\067\025\101\026\073\027\056\030\063\031\071\032" +
    "\106\062\102\066\054\067\077\070\105\071\053\072\064" +
    "\001\002\000\044\005\uffd1\006\uffd1\011\uffd1\012\uffd1\015" +
    "\uffd1\016\uffd1\051\120\052\123\053\121\054\122\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\077\uffd1\001" +
    "\002\000\044\004\066\010\074\013\060\023\061\024\067" +
    "\025\101\026\073\027\056\030\063\031\071\032\106\062" +
    "\102\066\054\067\077\070\105\071\053\072\064\001\002" +
    "\000\026\005\uffca\006\uffca\011\uffca\012\uffca\015\uffca\016" +
    "\uffca\056\uffca\057\uffca\060\152\061\uffca\001\002\000\102" +
    "\005\ufff4\006\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063" +
    "\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4" +
    "\072\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4\001" +
    "\002\000\044\004\uffe2\010\uffe2\013\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\062" +
    "\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\001\002" +
    "\000\012\005\uff90\012\uff90\013\uff90\014\uff90\001\002\000" +
    "\034\005\uffce\006\uffce\011\uffce\012\uffce\015\uffce\016\uffce" +
    "\055\116\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\077" +
    "\115\001\002\000\044\004\uffe0\010\uffe0\013\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\062\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0" +
    "\001\002\000\102\005\uffef\006\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\016\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061" +
    "\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef" +
    "\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef\075\uffef\076" +
    "\uffef\077\uffef\001\002\000\050\005\uffd6\006\uffd6\011\uffd6" +
    "\012\uffd6\015\uffd6\016\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\070\126\071\125\077\uffd6\001\002\000\102\005\uffee\006" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056" +
    "\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee" +
    "\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee\073" +
    "\uffee\074\uffee\075\uffee\076\uffee\077\uffee\001\002\000\006" +
    "\015\143\056\144\001\002\000\030\005\uffcc\006\uffcc\011" +
    "\uffcc\012\uffcc\015\uffcc\016\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\062\113\001\002\000\044\004\066\010\074\013" +
    "\060\023\061\024\067\025\101\026\073\027\056\030\063" +
    "\031\071\032\106\062\102\066\054\067\077\070\105\071" +
    "\053\072\064\001\002\000\034\005\uffcd\006\uffcd\011\uffcd" +
    "\012\uffcd\015\uffcd\016\uffcd\055\116\056\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\062\uffcd\077\115\001\002\000\044\004\066" +
    "\010\074\013\060\023\061\024\067\025\101\026\073\027" +
    "\056\030\063\031\071\032\106\062\102\066\054\067\077" +
    "\070\105\071\053\072\064\001\002\000\044\004\066\010" +
    "\074\013\060\023\061\024\067\025\101\026\073\027\056" +
    "\030\063\031\071\032\106\062\102\066\054\067\077\070" +
    "\105\071\053\072\064\001\002\000\044\005\uffcf\006\uffcf" +
    "\011\uffcf\012\uffcf\015\uffcf\016\uffcf\051\120\052\123\053" +
    "\121\054\122\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\077\uffcf\001\002\000\044\004\066\010\074\013" +
    "\060\023\061\024\067\025\101\026\073\027\056\030\063" +
    "\031\071\032\106\062\102\066\054\067\077\070\105\071" +
    "\053\072\064\001\002\000\044\004\066\010\074\013\060" +
    "\023\061\024\067\025\101\026\073\027\056\030\063\031" +
    "\071\032\106\062\102\066\054\067\077\070\105\071\053" +
    "\072\064\001\002\000\044\004\066\010\074\013\060\023" +
    "\061\024\067\025\101\026\073\027\056\030\063\031\071" +
    "\032\106\062\102\066\054\067\077\070\105\071\053\072" +
    "\064\001\002\000\044\004\066\010\074\013\060\023\061" +
    "\024\067\025\101\026\073\027\056\030\063\031\071\032" +
    "\106\062\102\066\054\067\077\070\105\071\053\072\064" +
    "\001\002\000\050\005\uffd4\006\uffd4\011\uffd4\012\uffd4\015" +
    "\uffd4\016\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\070\126\071" +
    "\125\077\uffd4\001\002\000\044\004\066\010\074\013\060" +
    "\023\061\024\067\025\101\026\073\027\056\030\063\031" +
    "\071\032\106\062\102\066\054\067\077\070\105\071\053" +
    "\072\064\001\002\000\044\004\066\010\074\013\060\023" +
    "\061\024\067\025\101\026\073\027\056\030\063\031\071" +
    "\032\106\062\102\066\054\067\077\070\105\071\053\072" +
    "\064\001\002\000\056\005\uffd8\006\uffd8\011\uffd8\012\uffd8" +
    "\015\uffd8\016\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\070\uffd8" +
    "\071\uffd8\072\132\073\131\074\130\077\uffd8\001\002\000" +
    "\044\004\066\010\074\013\060\023\061\024\067\025\101" +
    "\026\073\027\056\030\063\031\071\032\106\062\102\066" +
    "\054\067\077\070\105\071\053\072\064\001\002\000\044" +
    "\004\066\010\074\013\060\023\061\024\067\025\101\026" +
    "\073\027\056\030\063\031\071\032\106\062\102\066\054" +
    "\067\077\070\105\071\053\072\064\001\002\000\044\004" +
    "\066\010\074\013\060\023\061\024\067\025\101\026\073" +
    "\027\056\030\063\031\071\032\106\062\102\066\054\067" +
    "\077\070\105\071\053\072\064\001\002\000\056\005\uffdc" +
    "\006\uffdc\011\uffdc\012\uffdc\015\uffdc\016\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc" +
    "\061\uffdc\062\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074" +
    "\uffdc\077\uffdc\001\002\000\056\005\uffdb\006\uffdb\011\uffdb" +
    "\012\uffdb\015\uffdb\016\uffdb\051\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb" +
    "\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\077\uffdb\001" +
    "\002\000\056\005\uffda\006\uffda\011\uffda\012\uffda\015\uffda" +
    "\016\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\070\uffda\071\uffda" +
    "\072\uffda\073\uffda\074\uffda\077\uffda\001\002\000\056\005" +
    "\uffd7\006\uffd7\011\uffd7\012\uffd7\015\uffd7\016\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\070\uffd7\071\uffd7\072\132\073\131" +
    "\074\130\077\uffd7\001\002\000\050\005\uffd5\006\uffd5\011" +
    "\uffd5\012\uffd5\015\uffd5\016\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062" +
    "\uffd5\070\126\071\125\077\uffd5\001\002\000\050\005\uffd3" +
    "\006\uffd3\011\uffd3\012\uffd3\015\uffd3\016\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3" +
    "\061\uffd3\062\uffd3\070\126\071\125\077\uffd3\001\002\000" +
    "\050\005\uffd2\006\uffd2\011\uffd2\012\uffd2\015\uffd2\016\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\062\uffd2\070\126\071\125\077\uffd2" +
    "\001\002\000\044\005\uffd0\006\uffd0\011\uffd0\012\uffd0\015" +
    "\uffd0\016\uffd0\051\120\052\123\053\121\054\122\055\uffd0" +
    "\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\077\uffd0\001" +
    "\002\000\012\005\uff8f\012\uff8f\013\uff8f\014\uff8f\001\002" +
    "\000\044\004\066\010\074\013\060\023\061\024\067\025" +
    "\101\026\073\027\056\030\063\031\071\032\106\062\102" +
    "\066\054\067\077\070\105\071\053\072\064\001\002\000" +
    "\022\005\uffc5\006\uffc5\011\uffc5\012\uffc5\015\uffc5\016\uffc5" +
    "\056\uffc5\057\146\001\002\000\044\004\066\010\074\013" +
    "\060\023\061\024\067\025\101\026\073\027\056\030\063" +
    "\031\071\032\106\062\102\066\054\067\077\070\105\071" +
    "\053\072\064\001\002\000\024\005\uffc7\006\uffc7\011\uffc7" +
    "\012\uffc7\015\uffc7\016\uffc7\056\uffc7\057\uffc7\061\150\001" +
    "\002\000\044\004\066\010\074\013\060\023\061\024\067" +
    "\025\101\026\073\027\056\030\063\031\071\032\106\062" +
    "\102\066\054\067\077\070\105\071\053\072\064\001\002" +
    "\000\026\005\uffc9\006\uffc9\011\uffc9\012\uffc9\015\uffc9\016" +
    "\uffc9\056\uffc9\057\uffc9\060\152\061\uffc9\001\002\000\044" +
    "\004\066\010\074\013\060\023\061\024\067\025\101\026" +
    "\073\027\056\030\063\031\071\032\106\062\102\066\054" +
    "\067\077\070\105\071\053\072\064\001\002\000\030\005" +
    "\uffcb\006\uffcb\011\uffcb\012\uffcb\015\uffcb\016\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\061\uffcb\062\113\001\002\000\072\005" +
    "\uffe4\006\uffe4\011\uffe4\012\uffe4\015\uffe4\016\uffe4\050\uffe4" +
    "\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076" +
    "\uffe4\077\uffe4\001\002\000\072\005\uffe3\006\uffe3\011\uffe3" +
    "\012\uffe3\015\uffe3\016\uffe3\050\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3" +
    "\062\uffe3\063\uffe3\064\uffe3\065\uffe3\070\uffe3\071\uffe3\072" +
    "\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\001\002" +
    "\000\044\004\066\010\202\013\060\023\061\024\067\025" +
    "\101\026\073\027\056\030\063\031\071\032\106\062\102" +
    "\066\054\067\077\070\105\071\053\072\064\001\002\000" +
    "\046\004\066\010\074\012\165\013\060\023\061\024\067" +
    "\025\101\026\073\027\056\030\063\031\071\032\106\062" +
    "\102\066\054\067\077\070\105\071\053\072\064\001\002" +
    "\000\102\005\uffe9\006\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9" +
    "\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077" +
    "\uffe9\001\002\000\102\005\uffea\006\uffea\011\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\016\uffea\050\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea" +
    "\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067" +
    "\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea" +
    "\076\uffea\077\uffea\001\002\000\070\005\uffdd\006\uffdd\012" +
    "\uffdd\015\uffdd\016\uffdd\050\172\051\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\175\064\200\065\177\070\uffdd\071\uffdd\072\uffdd" +
    "\073\uffdd\074\uffdd\075\176\076\173\077\uffdd\001\002\000" +
    "\006\005\170\012\167\001\002\000\006\005\uffe8\012\uffe8" +
    "\001\002\000\102\005\uffec\006\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061" +
    "\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec" +
    "\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075\uffec\076" +
    "\uffec\077\uffec\001\002\000\016\005\uffc4\006\uffc4\012\uffc4" +
    "\015\uffc4\016\uffc4\056\144\001\002\000\102\005\uffeb\006" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb" +
    "\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073" +
    "\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\001\002\000\044" +
    "\004\066\010\074\013\060\023\061\024\067\025\101\026" +
    "\073\027\056\030\063\031\071\032\106\062\102\066\054" +
    "\067\077\070\105\071\053\072\064\001\002\000\006\005" +
    "\uffe7\012\uffe7\001\002\000\044\004\uffc2\010\uffc2\013\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\062\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2" +
    "\072\uffc2\001\002\000\044\004\uffc0\010\uffc0\013\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\062\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072" +
    "\uffc0\001\002\000\044\004\066\010\074\013\060\023\061" +
    "\024\067\025\101\026\073\027\056\030\063\031\071\032" +
    "\106\062\102\066\054\067\077\070\105\071\053\072\064" +
    "\001\002\000\044\004\uffbf\010\uffbf\013\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\062\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\001" +
    "\002\000\044\004\uffc1\010\uffc1\013\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\062" +
    "\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\001\002" +
    "\000\044\004\uffbd\010\uffbd\013\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\062\uffbd" +
    "\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\001\002\000" +
    "\044\004\uffbe\010\uffbe\013\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\062\uffbe\066" +
    "\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\001\002\000\014" +
    "\005\uffc3\006\uffc3\012\uffc3\015\uffc3\016\uffc3\001\002\000" +
    "\044\004\uffde\010\uffde\013\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\062\102\066" +
    "\uffde\067\uffde\070\105\071\053\072\064\001\002\000\012" +
    "\005\uffbc\012\uffbc\015\uffbc\016\uffbc\001\002\000\006\005" +
    "\206\015\205\001\002\000\102\005\uffed\006\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\050\uffed\051" +
    "\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed" +
    "\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066" +
    "\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed" +
    "\075\uffed\076\uffed\077\uffed\001\002\000\044\004\066\010" +
    "\074\013\060\023\061\024\067\025\101\026\073\027\056" +
    "\030\063\031\071\032\106\062\102\066\054\067\077\070" +
    "\105\071\053\072\064\001\002\000\012\005\uffbb\012\uffbb" +
    "\015\uffbb\016\uffbb\001\002\000\012\005\uffba\012\uffba\015" +
    "\uffba\016\uffba\001\002\000\006\005\206\012\212\001\002" +
    "\000\102\005\ufff7\006\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\016\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7" +
    "\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077" +
    "\ufff7\001\002\000\072\005\uffe5\006\uffe5\011\uffe5\012\uffe5" +
    "\015\uffe5\016\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5" +
    "\063\uffe5\064\uffe5\065\uffe5\070\uffe5\071\uffe5\072\uffe5\073" +
    "\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\001\002\000\004" +
    "\012\220\001\002\000\004\012\217\001\002\000\012\005" +
    "\uff8e\012\uff8e\013\uff8e\014\uff8e\001\002\000\012\005\uff93" +
    "\012\uff93\013\uff93\014\uff93\001\002\000\012\005\uff8d\012" +
    "\uff8d\013\uff8d\014\uff8d\001\002\000\012\005\uff92\012\uff92" +
    "\013\uff92\014\uff92\001\002\000\006\015\223\056\144\001" +
    "\002\000\012\005\uff91\012\uff91\013\uff91\014\uff91\001\002" +
    "\000\016\005\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0\050" +
    "\uffa0\001\002\000\004\004\226\001\002\000\006\005\uff97" +
    "\012\uff97\001\002\000\014\017\014\020\015\021\016\022" +
    "\006\033\005\001\002\000\006\005\uff9c\012\uff9c\001\002" +
    "\000\016\005\uffa2\012\uffa2\013\uffa2\014\uffa2\016\uffa2\050" +
    "\uffa2\001\002\000\006\015\233\056\144\001\002\000\016" +
    "\005\uffa3\012\uffa3\013\uffa3\014\uffa3\016\uffa3\050\uffa3\001" +
    "\002\000\020\004\034\012\036\017\014\020\015\021\016" +
    "\022\006\033\005\001\002\000\004\012\236\001\002\000" +
    "\010\007\240\013\uffa1\014\uffa1\001\002\000\022\002\ufffb" +
    "\003\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\033\ufffb\043" +
    "\ufffb\001\002\000\112\003\253\004\066\006\272\007\240" +
    "\010\202\013\060\016\267\017\014\020\015\021\016\022" +
    "\006\023\061\024\067\025\101\026\073\027\056\030\063" +
    "\031\071\032\106\033\005\034\266\035\244\036\250\037" +
    "\247\040\254\041\241\044\261\045\243\046\257\047\245" +
    "\062\102\066\054\067\077\070\105\071\053\072\064\001" +
    "\002\000\004\013\367\001\002\000\100\003\uff75\004\uff75" +
    "\006\uff75\007\uff75\010\uff75\013\uff75\016\uff75\023\uff75\024" +
    "\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75" +
    "\034\uff75\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75\044" +
    "\uff75\045\uff75\046\uff75\047\uff75\062\uff75\066\uff75\067\uff75" +
    "\070\uff75\071\uff75\072\uff75\001\002\000\004\011\365\001" +
    "\002\000\004\013\357\001\002\000\004\016\356\001\002" +
    "\000\100\003\uff84\004\uff84\006\uff84\007\uff84\010\uff84\013" +
    "\uff84\016\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84" +
    "\030\uff84\031\uff84\032\uff84\034\uff84\035\uff84\036\uff84\037" +
    "\uff84\040\uff84\041\uff84\044\uff84\045\uff84\046\uff84\047\uff84" +
    "\062\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84\001" +
    "\002\000\004\013\352\001\002\000\004\013\342\001\002" +
    "\000\100\003\uff7f\004\uff7f\006\uff7f\007\uff7f\010\uff7f\013" +
    "\uff7f\016\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f" +
    "\030\uff7f\031\uff7f\032\uff7f\034\uff7f\035\uff7f\036\uff7f\037" +
    "\uff7f\040\uff7f\041\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f" +
    "\062\uff7f\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\001" +
    "\002\000\100\003\uff82\004\uff82\006\uff82\007\uff82\010\uff82" +
    "\013\uff82\016\uff82\023\uff82\024\uff82\025\uff82\026\uff82\027" +
    "\uff82\030\uff82\031\uff82\032\uff82\034\uff82\035\uff82\036\uff82" +
    "\037\uff82\040\uff82\041\uff82\044\uff82\045\uff82\046\uff82\047" +
    "\uff82\062\uff82\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82" +
    "\001\002\000\006\006\327\016\341\001\002\000\004\013" +
    "\335\001\002\000\100\003\uff85\004\uff85\006\uff85\007\uff85" +
    "\010\uff85\013\uff85\016\uff85\023\uff85\024\uff85\025\uff85\026" +
    "\uff85\027\uff85\030\uff85\031\uff85\032\uff85\034\uff85\035\uff85" +
    "\036\uff85\037\uff85\040\uff85\041\uff85\044\uff85\045\uff85\046" +
    "\uff85\047\uff85\062\uff85\066\uff85\067\uff85\070\uff85\071\uff85" +
    "\072\uff85\001\002\000\100\003\uff81\004\uff81\006\uff81\007" +
    "\uff81\010\uff81\013\uff81\016\uff81\023\uff81\024\uff81\025\uff81" +
    "\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81\034\uff81\035" +
    "\uff81\036\uff81\037\uff81\040\uff81\041\uff81\044\uff81\045\uff81" +
    "\046\uff81\047\uff81\062\uff81\066\uff81\067\uff81\070\uff81\071" +
    "\uff81\072\uff81\001\002\000\004\016\334\001\002\000\112" +
    "\003\uff77\004\uff77\006\uff77\007\uff77\010\uff77\013\uff77\016" +
    "\uff77\017\uff77\020\uff77\021\uff77\022\uff77\023\uff77\024\uff77" +
    "\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033" +
    "\uff77\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77" +
    "\044\uff77\045\uff77\046\uff77\047\uff77\062\uff77\066\uff77\067" +
    "\uff77\070\uff77\071\uff77\072\uff77\001\002\000\044\004\066" +
    "\010\074\013\060\023\061\024\067\025\101\026\073\027" +
    "\056\030\063\031\071\032\106\062\102\066\054\067\077" +
    "\070\105\071\053\072\064\001\002\000\100\003\uff80\004" +
    "\uff80\006\uff80\007\uff80\010\uff80\013\uff80\016\uff80\023\uff80" +
    "\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032" +
    "\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80" +
    "\044\uff80\045\uff80\046\uff80\047\uff80\062\uff80\066\uff80\067" +
    "\uff80\070\uff80\071\uff80\072\uff80\001\002\000\100\003\uff83" +
    "\004\uff83\006\uff83\007\uff83\010\uff83\013\uff83\016\uff83\023" +
    "\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83" +
    "\032\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041" +
    "\uff83\044\uff83\045\uff83\046\uff83\047\uff83\062\uff83\066\uff83" +
    "\067\uff83\070\uff83\071\uff83\072\uff83\001\002\000\100\003" +
    "\325\004\066\006\330\007\240\010\202\013\060\016\267" +
    "\023\061\024\067\025\101\026\073\027\056\030\063\031" +
    "\071\032\106\034\266\035\244\036\250\037\247\040\254" +
    "\041\241\044\261\045\243\046\257\047\245\062\102\066" +
    "\054\067\077\070\105\071\053\072\064\001\002\000\112" +
    "\003\253\004\066\006\323\007\240\010\202\013\060\016" +
    "\267\017\014\020\015\021\016\022\006\023\061\024\067" +
    "\025\101\026\073\027\056\030\063\031\071\032\106\033" +
    "\005\034\266\035\244\036\250\037\247\040\254\041\241" +
    "\044\261\045\243\046\257\047\245\062\102\066\054\067" +
    "\077\070\105\071\053\072\064\001\002\000\004\013\315" +
    "\001\002\000\102\003\uff73\004\uff73\006\uff73\007\uff73\010" +
    "\uff73\012\uff73\013\uff73\016\uff73\023\uff73\024\uff73\025\uff73" +
    "\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\034\uff73\035" +
    "\uff73\036\uff73\037\uff73\040\uff73\041\uff73\044\uff73\045\uff73" +
    "\046\uff73\047\uff73\062\uff73\066\uff73\067\uff73\070\uff73\071" +
    "\uff73\072\uff73\001\002\000\010\004\023\013\024\016\274" +
    "\001\002\000\006\005\206\016\273\001\002\000\120\002" +
    "\uff7b\003\uff7b\004\uff7b\006\uff7b\007\uff7b\010\uff7b\013\uff7b" +
    "\016\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b\024" +
    "\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b" +
    "\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041" +
    "\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b" +
    "\062\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\001" +
    "\002\000\102\003\uff72\004\uff72\006\uff72\007\uff72\010\uff72" +
    "\012\uff72\013\uff72\016\uff72\023\uff72\024\uff72\025\uff72\026" +
    "\uff72\027\uff72\030\uff72\031\uff72\032\uff72\034\uff72\035\uff72" +
    "\036\uff72\037\uff72\040\uff72\041\uff72\044\uff72\045\uff72\046" +
    "\uff72\047\uff72\062\uff72\066\uff72\067\uff72\070\uff72\071\uff72" +
    "\072\uff72\001\002\000\116\002\uffb9\003\uffb9\004\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\013\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\043\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\062\uffb9\066\uffb9\067\uffb9\070\uffb9" +
    "\071\uffb9\072\uffb9\001\002\000\014\005\uffb0\013\030\014" +
    "\026\016\uffb0\050\303\001\002\000\006\005\301\016\300" +
    "\001\002\000\006\005\uffb2\016\uffb2\001\002\000\116\002" +
    "\uffb8\003\uffb8\004\uffb8\006\uffb8\007\uffb8\010\uffb8\013\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\062\uffb8" +
    "\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\001\002\000" +
    "\006\004\023\013\024\001\002\000\006\005\uffb1\016\uffb1" +
    "\001\002\000\046\004\066\007\306\010\074\013\060\023" +
    "\061\024\067\025\101\026\073\027\056\030\063\031\071" +
    "\032\106\062\102\066\054\067\077\070\105\071\053\072" +
    "\064\001\002\000\010\005\uff8a\006\uff8a\016\uff8a\001\002" +
    "\000\006\005\uffaf\016\uffaf\001\002\000\046\004\066\007" +
    "\306\010\074\013\060\023\061\024\067\025\101\026\073" +
    "\027\056\030\063\031\071\032\106\062\102\066\054\067" +
    "\077\070\105\071\053\072\064\001\002\000\006\005\312" +
    "\006\311\001\002\000\006\005\uff87\006\uff87\001\002\000" +
    "\010\005\uff89\006\uff89\016\uff89\001\002\000\050\004\066" +
    "\006\313\007\306\010\074\013\060\023\061\024\067\025" +
    "\101\026\073\027\056\030\063\031\071\032\106\062\102" +
    "\066\054\067\077\070\105\071\053\072\064\001\002\000" +
    "\010\005\uff88\006\uff88\016\uff88\001\002\000\006\005\uff86" +
    "\006\uff86\001\002\000\044\004\066\010\202\013\060\023" +
    "\061\024\067\025\101\026\073\027\056\030\063\031\071" +
    "\032\106\062\102\066\054\067\077\070\105\071\053\072" +
    "\064\001\002\000\006\005\206\012\317\001\002\000\004" +
    "\016\320\001\002\000\100\003\uff69\004\uff69\006\uff69\007" +
    "\uff69\010\uff69\013\uff69\016\uff69\023\uff69\024\uff69\025\uff69" +
    "\026\uff69\027\uff69\030\uff69\031\uff69\032\uff69\034\uff69\035" +
    "\uff69\036\uff69\037\uff69\040\uff69\041\uff69\044\uff69\045\uff69" +
    "\046\uff69\047\uff69\062\uff69\066\uff69\067\uff69\070\uff69\071" +
    "\uff69\072\uff69\001\002\000\112\003\uff76\004\uff76\006\uff76" +
    "\007\uff76\010\uff76\013\uff76\016\uff76\017\uff76\020\uff76\021" +
    "\uff76\022\uff76\023\uff76\024\uff76\025\uff76\026\uff76\027\uff76" +
    "\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76\036" +
    "\uff76\037\uff76\040\uff76\041\uff76\044\uff76\045\uff76\046\uff76" +
    "\047\uff76\062\uff76\066\uff76\067\uff76\070\uff76\071\uff76\072" +
    "\uff76\001\002\000\100\003\325\004\066\006\326\007\240" +
    "\010\202\013\060\016\267\023\061\024\067\025\101\026" +
    "\073\027\056\030\063\031\071\032\106\034\266\035\244" +
    "\036\250\037\247\040\254\041\241\044\261\045\243\046" +
    "\257\047\245\062\102\066\054\067\077\070\105\071\053" +
    "\072\064\001\002\000\120\002\uff79\003\uff79\004\uff79\006" +
    "\uff79\007\uff79\010\uff79\013\uff79\016\uff79\017\uff79\020\uff79" +
    "\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027" +
    "\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035\uff79" +
    "\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044" +
    "\uff79\045\uff79\046\uff79\047\uff79\062\uff79\066\uff79\067\uff79" +
    "\070\uff79\071\uff79\072\uff79\001\002\000\100\003\uff74\004" +
    "\uff74\006\uff74\007\uff74\010\uff74\013\uff74\016\uff74\023\uff74" +
    "\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74\032" +
    "\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74\041\uff74" +
    "\044\uff74\045\uff74\046\uff74\047\uff74\062\uff74\066\uff74\067" +
    "\uff74\070\uff74\071\uff74\072\uff74\001\002\000\004\006\327" +
    "\001\002\000\120\002\uff78\003\uff78\004\uff78\006\uff78\007" +
    "\uff78\010\uff78\013\uff78\016\uff78\017\uff78\020\uff78\021\uff78" +
    "\022\uff78\023\uff78\024\uff78\025\uff78\026\uff78\027\uff78\030" +
    "\uff78\031\uff78\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78" +
    "\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045" +
    "\uff78\046\uff78\047\uff78\062\uff78\066\uff78\067\uff78\070\uff78" +
    "\071\uff78\072\uff78\001\002\000\100\003\uff7e\004\uff7e\006" +
    "\uff7e\007\uff7e\010\uff7e\013\uff7e\016\uff7e\023\uff7e\024\uff7e" +
    "\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\034" +
    "\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\044\uff7e" +
    "\045\uff7e\046\uff7e\047\uff7e\062\uff7e\066\uff7e\067\uff7e\070" +
    "\uff7e\071\uff7e\072\uff7e\001\002\000\120\002\uff7a\003\uff7a" +
    "\004\uff7a\006\uff7a\007\uff7a\010\uff7a\013\uff7a\016\uff7a\017" +
    "\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a" +
    "\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034" +
    "\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a" +
    "\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\062\uff7a\066" +
    "\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a\001\002\000\006" +
    "\011\332\056\144\001\002\000\076\003\325\004\066\007" +
    "\240\010\202\013\060\016\267\023\061\024\067\025\101" +
    "\026\073\027\056\030\063\031\071\032\106\034\266\035" +
    "\244\036\250\037\247\040\254\041\241\044\261\045\243" +
    "\046\257\047\245\062\102\066\054\067\077\070\105\071" +
    "\053\072\064\001\002\000\100\003\uff7d\004\uff7d\006\uff7d" +
    "\007\uff7d\010\uff7d\013\uff7d\016\uff7d\023\uff7d\024\uff7d\025" +
    "\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\034\uff7d" +
    "\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\044\uff7d\045" +
    "\uff7d\046\uff7d\047\uff7d\062\uff7d\066\uff7d\067\uff7d\070\uff7d" +
    "\071\uff7d\072\uff7d\001\002\000\100\003\uff6b\004\uff6b\006" +
    "\uff6b\007\uff6b\010\uff6b\013\uff6b\016\uff6b\023\uff6b\024\uff6b" +
    "\025\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\034" +
    "\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b\044\uff6b" +
    "\045\uff6b\046\uff6b\047\uff6b\062\uff6b\066\uff6b\067\uff6b\070" +
    "\uff6b\071\uff6b\072\uff6b\001\002\000\044\004\066\010\202" +
    "\013\060\023\061\024\067\025\101\026\073\027\056\030" +
    "\063\031\071\032\106\062\102\066\054\067\077\070\105" +
    "\071\053\072\064\001\002\000\006\005\206\012\337\001" +
    "\002\000\004\007\240\001\002\000\100\003\uff6f\004\uff6f" +
    "\006\uff6f\007\uff6f\010\uff6f\013\uff6f\016\uff6f\023\uff6f\024" +
    "\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f\032\uff6f" +
    "\034\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f\044" +
    "\uff6f\045\uff6f\046\uff6f\047\uff6f\062\uff6f\066\uff6f\067\uff6f" +
    "\070\uff6f\071\uff6f\072\uff6f\001\002\000\116\002\uffb7\003" +
    "\uffb7\004\uffb7\006\uffb7\007\uffb7\010\uffb7\013\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\062\uffb7\066\uffb7" +
    "\067\uffb7\070\uffb7\071\uffb7\072\uffb7\001\002\000\046\004" +
    "\066\010\202\013\060\016\267\023\061\024\067\025\101" +
    "\026\073\027\056\030\063\031\071\032\106\062\102\066" +
    "\054\067\077\070\105\071\053\072\064\001\002\000\046" +
    "\004\066\010\202\013\060\016\267\023\061\024\067\025" +
    "\101\026\073\027\056\030\063\031\071\032\106\062\102" +
    "\066\054\067\077\070\105\071\053\072\064\001\002\000" +
    "\046\004\066\010\202\012\345\013\060\023\061\024\067" +
    "\025\101\026\073\027\056\030\063\031\071\032\106\062" +
    "\102\066\054\067\077\070\105\071\053\072\064\001\002" +
    "\000\076\003\325\004\066\007\240\010\202\013\060\016" +
    "\267\023\061\024\067\025\101\026\073\027\056\030\063" +
    "\031\071\032\106\034\266\035\244\036\250\037\247\040" +
    "\254\041\241\044\261\045\243\046\257\047\245\062\102" +
    "\066\054\067\077\070\105\071\053\072\064\001\002\000" +
    "\006\005\206\012\347\001\002\000\076\003\325\004\066" +
    "\007\240\010\202\013\060\016\267\023\061\024\067\025" +
    "\101\026\073\027\056\030\063\031\071\032\106\034\266" +
    "\035\244\036\250\037\247\040\254\041\241\044\261\045" +
    "\243\046\257\047\245\062\102\066\054\067\077\070\105" +
    "\071\053\072\064\001\002\000\100\003\uff6c\004\uff6c\006" +
    "\uff6c\007\uff6c\010\uff6c\013\uff6c\016\uff6c\023\uff6c\024\uff6c" +
    "\025\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\034" +
    "\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\044\uff6c" +
    "\045\uff6c\046\uff6c\047\uff6c\062\uff6c\066\uff6c\067\uff6c\070" +
    "\uff6c\071\uff6c\072\uff6c\001\002\000\100\003\uff6d\004\uff6d" +
    "\006\uff6d\007\uff6d\010\uff6d\013\uff6d\016\uff6d\023\uff6d\024" +
    "\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d" +
    "\034\uff6d\035\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\044" +
    "\uff6d\045\uff6d\046\uff6d\047\uff6d\062\uff6d\066\uff6d\067\uff6d" +
    "\070\uff6d\071\uff6d\072\uff6d\001\002\000\044\004\066\010" +
    "\202\013\060\023\061\024\067\025\101\026\073\027\056" +
    "\030\063\031\071\032\106\062\102\066\054\067\077\070" +
    "\105\071\053\072\064\001\002\000\006\005\206\012\354" +
    "\001\002\000\076\003\325\004\066\007\240\010\202\013" +
    "\060\016\267\023\061\024\067\025\101\026\073\027\056" +
    "\030\063\031\071\032\106\034\266\035\244\036\250\037" +
    "\247\040\254\041\241\044\261\045\243\046\257\047\245" +
    "\062\102\066\054\067\077\070\105\071\053\072\064\001" +
    "\002\000\100\003\uff6e\004\uff6e\006\uff6e\007\uff6e\010\uff6e" +
    "\013\uff6e\016\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\027" +
    "\uff6e\030\uff6e\031\uff6e\032\uff6e\034\uff6e\035\uff6e\036\uff6e" +
    "\037\uff6e\040\uff6e\041\uff6e\044\uff6e\045\uff6e\046\uff6e\047" +
    "\uff6e\062\uff6e\066\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e" +
    "\001\002\000\100\003\uff6a\004\uff6a\006\uff6a\007\uff6a\010" +
    "\uff6a\013\uff6a\016\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a" +
    "\027\uff6a\030\uff6a\031\uff6a\032\uff6a\034\uff6a\035\uff6a\036" +
    "\uff6a\037\uff6a\040\uff6a\041\uff6a\044\uff6a\045\uff6a\046\uff6a" +
    "\047\uff6a\062\uff6a\066\uff6a\067\uff6a\070\uff6a\071\uff6a\072" +
    "\uff6a\001\002\000\006\004\361\012\360\001\002\000\004" +
    "\016\364\001\002\000\004\012\362\001\002\000\004\016" +
    "\363\001\002\000\100\003\uff67\004\uff67\006\uff67\007\uff67" +
    "\010\uff67\013\uff67\016\uff67\023\uff67\024\uff67\025\uff67\026" +
    "\uff67\027\uff67\030\uff67\031\uff67\032\uff67\034\uff67\035\uff67" +
    "\036\uff67\037\uff67\040\uff67\041\uff67\044\uff67\045\uff67\046" +
    "\uff67\047\uff67\062\uff67\066\uff67\067\uff67\070\uff67\071\uff67" +
    "\072\uff67\001\002\000\100\003\uff68\004\uff68\006\uff68\007" +
    "\uff68\010\uff68\013\uff68\016\uff68\023\uff68\024\uff68\025\uff68" +
    "\026\uff68\027\uff68\030\uff68\031\uff68\032\uff68\034\uff68\035" +
    "\uff68\036\uff68\037\uff68\040\uff68\041\uff68\044\uff68\045\uff68" +
    "\046\uff68\047\uff68\062\uff68\066\uff68\067\uff68\070\uff68\071" +
    "\uff68\072\uff68\001\002\000\076\003\325\004\066\007\240" +
    "\010\202\013\060\016\267\023\061\024\067\025\101\026" +
    "\073\027\056\030\063\031\071\032\106\034\266\035\244" +
    "\036\250\037\247\040\254\041\241\044\261\045\243\046" +
    "\257\047\245\062\102\066\054\067\077\070\105\071\053" +
    "\072\064\001\002\000\100\003\uff7c\004\uff7c\006\uff7c\007" +
    "\uff7c\010\uff7c\013\uff7c\016\uff7c\023\uff7c\024\uff7c\025\uff7c" +
    "\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\034\uff7c\035" +
    "\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\044\uff7c\045\uff7c" +
    "\046\uff7c\047\uff7c\062\uff7c\066\uff7c\067\uff7c\070\uff7c\071" +
    "\uff7c\072\uff7c\001\002\000\044\004\066\010\202\013\060" +
    "\023\061\024\067\025\101\026\073\027\056\030\063\031" +
    "\071\032\106\062\102\066\054\067\077\070\105\071\053" +
    "\072\064\001\002\000\006\005\206\012\371\001\002\000" +
    "\004\007\240\001\002\000\102\003\uff71\004\uff71\006\uff71" +
    "\007\uff71\010\uff71\013\uff71\016\uff71\023\uff71\024\uff71\025" +
    "\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\034\uff71" +
    "\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71\042\373\044" +
    "\uff71\045\uff71\046\uff71\047\uff71\062\uff71\066\uff71\067\uff71" +
    "\070\uff71\071\uff71\072\uff71\001\002\000\004\007\240\001" +
    "\002\000\100\003\uff70\004\uff70\006\uff70\007\uff70\010\uff70" +
    "\013\uff70\016\uff70\023\uff70\024\uff70\025\uff70\026\uff70\027" +
    "\uff70\030\uff70\031\uff70\032\uff70\034\uff70\035\uff70\036\uff70" +
    "\037\uff70\040\uff70\041\uff70\044\uff70\045\uff70\046\uff70\047" +
    "\uff70\062\uff70\066\uff70\067\uff70\070\uff70\071\uff70\072\uff70" +
    "\001\002\000\022\002\ufffa\003\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\033\ufffa\043\ufffa\001\002\000\014\005\uffb0" +
    "\013\377\014\026\016\uffb0\050\303\001\002\000\020\004" +
    "\034\012\036\017\014\020\015\021\016\022\006\033\005" +
    "\001\002\000\004\012\u0101\001\002\000\016\005\uffa1\007" +
    "\240\013\uffa1\014\uffa1\016\uffa1\050\uffa1\001\002\000\022" +
    "\002\ufffc\003\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\033" +
    "\ufffc\043\ufffc\001\002\000\022\002\uffff\003\uffff\017\uffff" +
    "\020\uffff\021\uffff\022\uffff\033\uffff\043\uffff\001\002\000" +
    "\004\002\001\001\002\000\016\004\uffb6\005\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\016\uffb6\001\002\000\016\004\uffb3\005" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\016\uffb3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\020\002\011\004\010\005\020\011\003\032" +
    "\012\034\007\036\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\u0105\034\007\036" +
    "\006\001\001\000\010\032\u0104\034\007\036\006\001\001" +
    "\000\002\001\001\000\016\004\010\005\020\011\u0102\032" +
    "\012\034\007\036\006\001\001\000\010\007\375\031\275" +
    "\033\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\024\001\001\000\002\001\001\000\036\003\067" +
    "\012\107\013\064\015\054\016\071\017\106\020\075\021" +
    "\103\022\111\023\077\024\056\025\061\026\231\061\074" +
    "\001\001\000\002\001\001\000\020\032\032\034\007\036" +
    "\006\037\036\040\030\041\034\042\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\041\044\042\045" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\067\012\107\013\064\015\054\016\071\017\106\020\075" +
    "\021\103\022\111\023\077\024\056\025\061\026\221\061" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\024\032\032\034\007\036\006\037\213\040\030\041" +
    "\034\044\214\045\044\001\001\000\002\001\001\000\036" +
    "\003\067\012\107\013\064\015\054\016\071\017\106\020" +
    "\075\021\103\022\111\023\077\024\056\025\061\026\110" +
    "\061\074\001\001\000\016\032\032\034\007\036\006\037" +
    "\050\040\030\041\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\067\012\107\013\064\015\212\061\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\067\006\210\012\107\013\064\015\161\016\071\017\106" +
    "\020\075\021\103\022\111\023\077\024\056\025\061\026" +
    "\165\027\202\061\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\067\012\107\013\064\015\154" +
    "\061\074\001\001\000\002\001\001\000\014\003\067\012" +
    "\107\013\064\015\153\061\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\067\012\107\013\064\015\054\016\071" +
    "\017\106\020\075\021\113\061\074\001\001\000\002\001" +
    "\001\000\022\003\067\012\107\013\064\015\054\016\071" +
    "\017\106\020\141\061\074\001\001\000\022\003\067\012" +
    "\107\013\064\015\054\016\071\017\106\020\116\061\074" +
    "\001\001\000\002\001\001\000\020\003\067\012\107\013" +
    "\064\015\054\016\071\017\140\061\074\001\001\000\020" +
    "\003\067\012\107\013\064\015\054\016\071\017\137\061" +
    "\074\001\001\000\020\003\067\012\107\013\064\015\054" +
    "\016\071\017\136\061\074\001\001\000\020\003\067\012" +
    "\107\013\064\015\054\016\071\017\123\061\074\001\001" +
    "\000\002\001\001\000\016\003\067\012\107\013\064\015" +
    "\054\016\135\061\074\001\001\000\016\003\067\012\107" +
    "\013\064\015\054\016\126\061\074\001\001\000\002\001" +
    "\001\000\014\003\067\012\107\013\064\015\134\061\074" +
    "\001\001\000\014\003\067\012\107\013\064\015\133\061" +
    "\074\001\001\000\014\003\067\012\107\013\064\015\132" +
    "\061\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\067\012\107\013\064\015\054\016\071" +
    "\017\106\020\075\021\103\022\111\023\077\024\056\025" +
    "\144\061\074\001\001\000\002\001\001\000\032\003\067" +
    "\012\107\013\064\015\054\016\071\017\106\020\075\021" +
    "\103\022\111\023\077\024\146\061\074\001\001\000\002" +
    "\001\001\000\030\003\067\012\107\013\064\015\054\016" +
    "\071\017\106\020\075\021\103\022\111\023\150\061\074" +
    "\001\001\000\002\001\001\000\026\003\067\012\107\013" +
    "\064\015\054\016\071\017\106\020\075\021\103\022\152" +
    "\061\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\067\006\203\012\107\013\064" +
    "\015\161\016\071\017\106\020\075\021\103\022\111\023" +
    "\077\024\056\025\061\026\165\027\202\061\074\001\001" +
    "\000\042\003\067\012\107\013\064\014\162\015\161\016" +
    "\071\017\106\020\075\021\103\022\111\023\077\024\056" +
    "\025\061\026\165\027\163\061\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\067\012\107\013\064" +
    "\015\161\016\071\017\106\020\075\021\103\022\111\023" +
    "\077\024\056\025\061\026\165\027\170\061\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\067\012\107\013\064\015\161\016\071\017\106" +
    "\020\075\021\103\022\111\023\077\024\056\025\061\026" +
    "\165\027\200\061\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\067\012\107\013\064\015\161\016\071" +
    "\017\106\020\075\021\103\022\111\023\077\024\056\025" +
    "\061\026\165\027\207\061\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\067\012" +
    "\107\013\064\015\161\016\071\017\106\020\075\021\103" +
    "\022\111\023\077\024\056\025\061\026\165\027\206\061" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\032\032\034\007\036\006\041\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\032\032\034\007\036\006\037" +
    "\234\040\030\041\034\042\031\001\001\000\002\001\001" +
    "\000\004\051\236\001\001\000\002\001\001\000\076\003" +
    "\067\004\257\006\270\012\107\013\064\015\161\016\071" +
    "\017\106\020\075\021\103\022\111\023\077\024\056\025" +
    "\061\026\165\027\202\032\267\034\007\036\006\047\241" +
    "\050\254\051\245\052\264\053\263\054\262\055\251\056" +
    "\255\057\261\060\250\061\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\067\012" +
    "\107\013\064\015\054\016\071\017\106\020\075\021\103" +
    "\022\111\023\077\024\056\025\061\026\330\061\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\067" +
    "\006\270\012\107\013\064\015\161\016\071\017\106\020" +
    "\075\021\103\022\111\023\077\024\056\025\061\026\165" +
    "\027\202\047\323\050\254\051\245\054\262\055\251\056" +
    "\255\057\261\060\250\061\074\001\001\000\074\003\067" +
    "\004\320\006\270\012\107\013\064\015\161\016\071\017" +
    "\106\020\075\021\103\022\111\023\077\024\056\025\061" +
    "\026\165\027\202\032\267\034\007\036\006\047\241\050" +
    "\254\051\245\053\321\054\262\055\251\056\255\057\261" +
    "\060\250\061\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\274\031\275\033\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\274\033\301\001\001\000" +
    "\002\001\001\000\042\003\067\010\304\012\107\013\064" +
    "\015\161\016\071\017\106\020\075\021\103\022\111\023" +
    "\077\024\056\025\061\026\165\027\303\061\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\003\067\010" +
    "\307\012\107\013\064\015\161\016\071\017\106\020\075" +
    "\021\103\022\111\023\077\024\056\025\061\026\165\027" +
    "\303\046\306\061\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\067\010\313\012" +
    "\107\013\064\015\161\016\071\017\106\020\075\021\103" +
    "\022\111\023\077\024\056\025\061\026\165\027\303\061" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\067\006\315\012\107\013\064\015\161\016\071\017" +
    "\106\020\075\021\103\022\111\023\077\024\056\025\061" +
    "\026\165\027\202\061\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\067\006\270\012\107\013\064\015\161\016\071\017" +
    "\106\020\075\021\103\022\111\023\077\024\056\025\061" +
    "\026\165\027\202\047\323\050\254\051\245\054\262\055" +
    "\251\056\255\057\261\060\250\061\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\067\006\270\012\107\013\064\015\161\016" +
    "\071\017\106\020\075\021\103\022\111\023\077\024\056" +
    "\025\061\026\165\027\202\047\332\050\254\051\245\054" +
    "\262\055\251\056\255\057\261\060\250\061\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\067\006" +
    "\335\012\107\013\064\015\161\016\071\017\106\020\075" +
    "\021\103\022\111\023\077\024\056\025\061\026\165\027" +
    "\202\061\074\001\001\000\002\001\001\000\004\051\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\003" +
    "\067\006\270\012\107\013\064\015\161\016\071\017\106" +
    "\020\075\021\103\022\111\023\077\024\056\025\061\026" +
    "\165\027\202\054\342\061\074\001\001\000\044\003\067" +
    "\006\270\012\107\013\064\015\161\016\071\017\106\020" +
    "\075\021\103\022\111\023\077\024\056\025\061\026\165" +
    "\027\202\054\343\061\074\001\001\000\042\003\067\006" +
    "\345\012\107\013\064\015\161\016\071\017\106\020\075" +
    "\021\103\022\111\023\077\024\056\025\061\026\165\027" +
    "\202\061\074\001\001\000\062\003\067\006\270\012\107" +
    "\013\064\015\161\016\071\017\106\020\075\021\103\022" +
    "\111\023\077\024\056\025\061\026\165\027\202\047\350" +
    "\050\254\051\245\054\262\055\251\056\255\057\261\060" +
    "\250\061\074\001\001\000\002\001\001\000\062\003\067" +
    "\006\270\012\107\013\064\015\161\016\071\017\106\020" +
    "\075\021\103\022\111\023\077\024\056\025\061\026\165" +
    "\027\202\047\347\050\254\051\245\054\262\055\251\056" +
    "\255\057\261\060\250\061\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\067\006\352\012\107\013" +
    "\064\015\161\016\071\017\106\020\075\021\103\022\111" +
    "\023\077\024\056\025\061\026\165\027\202\061\074\001" +
    "\001\000\002\001\001\000\062\003\067\006\270\012\107" +
    "\013\064\015\161\016\071\017\106\020\075\021\103\022" +
    "\111\023\077\024\056\025\061\026\165\027\202\047\354" +
    "\050\254\051\245\054\262\055\251\056\255\057\261\060" +
    "\250\061\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\067\006\270\012\107\013\064\015\161\016\071\017" +
    "\106\020\075\021\103\022\111\023\077\024\056\025\061" +
    "\026\165\027\202\047\365\050\254\051\245\054\262\055" +
    "\251\056\255\057\261\060\250\061\074\001\001\000\002" +
    "\001\001\000\042\003\067\006\367\012\107\013\064\015" +
    "\161\016\071\017\106\020\075\021\103\022\111\023\077" +
    "\024\056\025\061\026\165\027\202\061\074\001\001\000" +
    "\002\001\001\000\004\051\371\001\001\000\002\001\001" +
    "\000\004\051\373\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\032\032\034\007\036\006" +
    "\037\377\040\030\041\034\042\031\001\001\000\002\001" +
    "\001\000\004\051\u0101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido.");
    } 
    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DECLARACION_EXTERNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INICIO DECLARACION_EXTERNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION_EXTERNA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_EXTERNA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION_EXTERNA ::= DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_EXTERNA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION_FUNCION ::= ESPECIFICADORES_DECLARACION DECLARADOR OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION_FUNCION ::= Void DECLARADOR OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION_FUNCION ::= error OperadorCorcheteDer 
            {
              Object RESULT =null;
		 errores.add(new ErrorSintactico(parser.getS(), "Declaración de función no válida")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXPRESION_PRIMARIA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPRESION_PRIMARIA ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPRESION_PRIMARIA ::= OperadorParentesisIz EXPRESION OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_PRIMARIA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LITERAL ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LITERAL ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LITERAL ::= FlotanteExponente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LITERAL ::= Octal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LITERAL ::= OctalFlotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LITERAL ::= Hexadecimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LITERAL ::= HexadecimalFlotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LITERAL ::= Caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION_POSTFIJA ::= EXPRESION_PRIMARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorParCuadradoIz EXPRESION OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorParentesisIz LISTA_ARGUMENTOS_EXPRESIONES OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorIncremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION_POSTFIJA ::= EXPRESION_POSTFIJA OperadorDecremental 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_POSTFIJA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_ARGUMENTOS_EXPRESIONES ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ARGUMENTOS_EXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_ARGUMENTOS_EXPRESIONES ::= LISTA_ARGUMENTOS_EXPRESIONES OperadorComa EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ARGUMENTOS_EXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION_UNARIA ::= EXPRESION_POSTFIJA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION_UNARIA ::= OperadorIncremental EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION_UNARIA ::= OperadorDecremental EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION_UNARIA ::= OPERADOR_UNARIO EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERADOR_UNARIO ::= OperadorAND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERADOR_UNARIO ::= OperadorMultiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERADOR_UNARIO ::= OperadorMas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERADOR_UNARIO ::= OperadorMenos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERADOR_UNARIO ::= OperadorNegacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_MULTIPLICATIVA OperadorMultiplicacion EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_MULTIPLICATIVA OperadorDivision EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION_MULTIPLICATIVA ::= EXPRESION_MULTIPLICATIVA OperadorModulo EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_MULTIPLICATIVA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION_ADITIVA ::= EXPRESION_MULTIPLICATIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ADITIVA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION_ADITIVA ::= EXPRESION_ADITIVA OperadorMas EXPRESION_MULTIPLICATIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ADITIVA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION_ADITIVA ::= EXPRESION_ADITIVA OperadorMenos EXPRESION_MULTIPLICATIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ADITIVA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION_RELACIONAL ::= EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMenor EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMayor EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMenorIgual EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION_RELACIONAL ::= EXPRESION_RELACIONAL OperadorMayorIgual EXPRESION_ADITIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION_IGUALDAD ::= EXPRESION_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_IGUALDAD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION_IGUALDAD ::= EXPRESION_IGUALDAD OperadorIgualIgual EXPRESION_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_IGUALDAD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION_IGUALDAD ::= EXPRESION_IGUALDAD OperadorDesigual EXPRESION_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_IGUALDAD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION_AND ::= EXPRESION_IGUALDAD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AND",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION_AND ::= EXPRESION_AND OperadorAND EXPRESION_IGUALDAD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AND",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION_XOR ::= EXPRESION_AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_XOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION_XOR ::= EXPRESION_XOR OperadorXOR EXPRESION_AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_XOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION_OR ::= EXPRESION_XOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_OR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION_OR ::= EXPRESION_OR OperadorOR EXPRESION_XOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_OR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION_LAZY_AND ::= EXPRESION_OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_AND",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION_LAZY_AND ::= EXPRESION_LAZY_AND OperadorANDLazy EXPRESION_OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_AND",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION_LAZY_OR ::= EXPRESION_LAZY_AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_OR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION_LAZY_OR ::= EXPRESION_LAZY_OR OperadorORLazy EXPRESION_LAZY_AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_LAZY_OR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION_ASIGNACION ::= EXPRESION_LAZY_OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION_ASIGNACION ::= EXPRESION_UNARIA OPERADOR_ASIGNACION EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERADOR_ASIGNACION ::= OperadorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERADOR_ASIGNACION ::= OperadorMasIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERADOR_ASIGNACION ::= OperadorMenosIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERADOR_ASIGNACION ::= OperadorMultiIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERADOR_ASIGNACION ::= OperadorDivIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERADOR_ASIGNACION ::= OperadorModIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION OperadorComa EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= OperadorNegacion EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= ESPECIFICADORES_DECLARACION OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= ESPECIFICADORES_DECLARACION LISTA_DECLARADORES_INICIALIZADORES OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= error OperadorPuntoComa 
            {
              Object RESULT =null;
		 errores.add(new ErrorSintactico(parser.getS(), "Declaración no válida")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ESPECIFICADORES_DECLARACION ::= ESPECIFICADOR_TIPO ESPECIFICADORES_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ESPECIFICADORES_DECLARACION ::= ESPECIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ESPECIFICADORES_DECLARACION ::= CUALIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ESPECIFICADORES_DECLARACION ::= CUALIFICADOR_TIPO ESPECIFICADORES_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADORES_DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LISTA_DECLARADORES_INICIALIZADORES ::= DECLARADOR_INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARADORES_INICIALIZADORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LISTA_DECLARADORES_INICIALIZADORES ::= LISTA_DECLARADORES_INICIALIZADORES OperadorComa DECLARADOR_INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARADORES_INICIALIZADORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARADOR_INICIALIZADOR ::= DECLARADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_INICIALIZADOR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARADOR_INICIALIZADOR ::= DECLARADOR OperadorIgual INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_INICIALIZADOR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ESPECIFICADOR_TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ESPECIFICADOR_TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ESPECIFICADOR_TIPO ::= Long 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ESPECIFICADOR_TIPO ::= Short 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPECIFICADOR_TIPO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= ESPECIFICADOR_TIPO LISTA_CUALIFICADOR_ESPECIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= ESPECIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= CUALIFICADOR_TIPO LISTA_CUALIFICADOR_ESPECIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LISTA_CUALIFICADOR_ESPECIFICADOR ::= CUALIFICADOR_TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_CUALIFICADOR_ESPECIFICADOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CUALIFICADOR_TIPO ::= Const 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUALIFICADOR_TIPO",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARADOR ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		System.out.println("Encuentra: "+id);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARADOR ::= OperadorParentesisIz DECLARADOR OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARADOR ::= DECLARADOR OperadorParCuadradoIz EXPRESION_LAZY_OR OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARADOR ::= DECLARADOR OperadorParCuadradoIz OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARADOR ::= DECLARADOR OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARADOR ::= DECLARADOR OperadorParentesisIz LISTA_IDENTIFICADORES OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARADOR ::= DECLARADOR OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LISTA_TIPOS_PARAMETROS ::= LISTA_PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_TIPOS_PARAMETROS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LISTA_PARAMETROS ::= DECLARACION_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LISTA_PARAMETROS ::= LISTA_PARAMETROS OperadorComa DECLARACION_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARACION_PARAMETRO ::= ESPECIFICADORES_DECLARACION DECLARADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECLARACION_PARAMETRO ::= ESPECIFICADORES_DECLARACION DECLARADOR_ABSTRACTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARACION_PARAMETRO ::= ESPECIFICADORES_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LISTA_IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES OperadorComa Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NOMBRE_TIPO ::= LISTA_CUALIFICADOR_ESPECIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOMBRE_TIPO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NOMBRE_TIPO ::= LISTA_CUALIFICADOR_ESPECIFICADOR DECLARADOR_ABSTRACTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOMBRE_TIPO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARADOR_ABSTRACTO ::= DECLARADOR_ABSTRACTO_DIRECTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParentesisIz DECLARADOR_ABSTRACTO OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParCuadradoIz OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParCuadradoIz EXPRESION_LAZY_OR OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParCuadradoIz OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParCuadradoIz EXPRESION_LAZY_OR OperadorParCuadradoDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARADOR_ABSTRACTO_DIRECTO ::= OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParentesisIz OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLARADOR_ABSTRACTO_DIRECTO ::= DECLARADOR_ABSTRACTO_DIRECTO OperadorParentesisIz LISTA_TIPOS_PARAMETROS OperadorParentesisDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARADOR_ABSTRACTO_DIRECTO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // INICIALIZADOR ::= EXPRESION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // INICIALIZADOR ::= OperadorCorcheteIz LISTA_INICIALIZADORES OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INICIALIZADOR ::= OperadorCorcheteIz LISTA_INICIALIZADORES OperadorComa OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZADOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LISTA_INICIALIZADORES ::= INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_INICIALIZADORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LISTA_INICIALIZADORES ::= LISTA_INICIALIZADORES OperadorComa INICIALIZADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_INICIALIZADORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA ::= SENTENCIA_ETIQUETADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIA ::= SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCIA ::= SENTENCIA_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA ::= SENTENCIA_SELECCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIA ::= SENTENCIA_ITERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIA ::= SENTENCIA_SALTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIA ::= SENTENCIA_READ_WRITE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIA ::= error OperadorCorcheteDer 
            {
              Object RESULT =null;
		 errores.add(new ErrorSintactico(parser.getS(), "Sentencia no válida")); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SENTENCIA_ETIQUETADA ::= Case EXPRESION_LAZY_OR OperadorDoblePunto SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ETIQUETADA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIA_ETIQUETADA ::= Default OperadorDoblePunto SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ETIQUETADA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz LISTA_SENTENCIAS OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz LISTA_DECLARACIONES OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIA_COMPUESTA ::= OperadorCorcheteIz LISTA_DECLARACIONES LISTA_SENTENCIAS OperadorCorcheteDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LISTA_DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LISTA_DECLARACIONES ::= LISTA_DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACIONES",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LISTA_SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LISTA_SENTENCIAS ::= LISTA_SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIA_EXPRESION ::= OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EXPRESION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIA_EXPRESION ::= EXPRESION OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_EXPRESION",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SENTENCIA_SELECCION ::= If OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SENTENCIA_SELECCION ::= If OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA Else SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SENTENCIA_SELECCION ::= Switch OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SENTENCIA_ITERACION ::= While OperadorParentesisIz EXPRESION OperadorParentesisDer SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ITERACION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SENTENCIA_ITERACION ::= For OperadorParentesisIz SENTENCIA_EXPRESION SENTENCIA_EXPRESION OperadorParentesisDer SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ITERACION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIA_ITERACION ::= For OperadorParentesisIz SENTENCIA_EXPRESION SENTENCIA_EXPRESION EXPRESION OperadorParentesisDer SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ITERACION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SENTENCIA_SALTO ::= Continue OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SALTO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTENCIA_SALTO ::= Break OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SALTO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTENCIA_READ_WRITE ::= Write OperadorParentesisIz EXPRESION OperadorParentesisDer OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_READ_WRITE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SENTENCIA_READ_WRITE ::= Read OperadorParentesisIz OperadorParentesisDer OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_READ_WRITE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCIA_READ_WRITE ::= Read OperadorParentesisIz Identificador OperadorParentesisDer OperadorPuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_READ_WRITE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
